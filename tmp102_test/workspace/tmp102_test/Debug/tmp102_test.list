
tmp102_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b38  08003b38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b38  08003b38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b38  08003b38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b3c  08003b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004f0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004fc  200004fc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011edd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fb  00000000  00000000  00031f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00034718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb0  00000000  00000000  000354e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de77  00000000  00000000  00036190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000137d8  00000000  00000000  00054007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afcb4  00000000  00000000  000677df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00117493  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003858  00000000  00000000  001174e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a1c 	.word	0x08003a1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003a1c 	.word	0x08003a1c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b08a      	sub	sp, #40	; 0x28
 80001dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001de:	f107 0314 	add.w	r3, r7, #20
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001ee:	4b37      	ldr	r3, [pc, #220]	; (80002cc <MX_GPIO_Init+0xf4>)
 80001f0:	695b      	ldr	r3, [r3, #20]
 80001f2:	4a36      	ldr	r2, [pc, #216]	; (80002cc <MX_GPIO_Init+0xf4>)
 80001f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001f8:	6153      	str	r3, [r2, #20]
 80001fa:	4b34      	ldr	r3, [pc, #208]	; (80002cc <MX_GPIO_Init+0xf4>)
 80001fc:	695b      	ldr	r3, [r3, #20]
 80001fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000202:	613b      	str	r3, [r7, #16]
 8000204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000206:	4b31      	ldr	r3, [pc, #196]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	4a30      	ldr	r2, [pc, #192]	; (80002cc <MX_GPIO_Init+0xf4>)
 800020c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000210:	6153      	str	r3, [r2, #20]
 8000212:	4b2e      	ldr	r3, [pc, #184]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	4a2a      	ldr	r2, [pc, #168]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000228:	6153      	str	r3, [r2, #20]
 800022a:	4b28      	ldr	r3, [pc, #160]	; (80002cc <MX_GPIO_Init+0xf4>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000232:	60bb      	str	r3, [r7, #8]
 8000234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	4b25      	ldr	r3, [pc, #148]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	4a24      	ldr	r2, [pc, #144]	; (80002cc <MX_GPIO_Init+0xf4>)
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	6153      	str	r3, [r2, #20]
 8000242:	4b22      	ldr	r3, [pc, #136]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800024a:	607b      	str	r3, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800024e:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	4a1e      	ldr	r2, [pc, #120]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000258:	6153      	str	r3, [r2, #20]
 800025a:	4b1c      	ldr	r3, [pc, #112]	; (80002cc <MX_GPIO_Init+0xf4>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000262:	603b      	str	r3, [r7, #0]
 8000264:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000266:	2200      	movs	r2, #0
 8000268:	f64f 7108 	movw	r1, #65288	; 0xff08
 800026c:	4818      	ldr	r0, [pc, #96]	; (80002d0 <MX_GPIO_Init+0xf8>)
 800026e:	f000 fed1 	bl	8001014 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000272:	2337      	movs	r3, #55	; 0x37
 8000274:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000276:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800027a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	4619      	mov	r1, r3
 8000286:	4812      	ldr	r0, [pc, #72]	; (80002d0 <MX_GPIO_Init+0xf8>)
 8000288:	f000 fd4a 	bl	8000d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800028c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000290:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000292:	2301      	movs	r3, #1
 8000294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029a:	2300      	movs	r3, #0
 800029c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	4619      	mov	r1, r3
 80002a4:	480a      	ldr	r0, [pc, #40]	; (80002d0 <MX_GPIO_Init+0xf8>)
 80002a6:	f000 fd3b 	bl	8000d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002aa:	2301      	movs	r3, #1
 80002ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002b6:	f107 0314 	add.w	r3, r7, #20
 80002ba:	4619      	mov	r1, r3
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c0:	f000 fd2e 	bl	8000d20 <HAL_GPIO_Init>

}
 80002c4:	bf00      	nop
 80002c6:	3728      	adds	r7, #40	; 0x28
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40021000 	.word	0x40021000
 80002d0:	48001000 	.word	0x48001000

080002d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <MX_I2C1_Init+0x74>)
 80002da:	4a1c      	ldr	r2, [pc, #112]	; (800034c <MX_I2C1_Init+0x78>)
 80002dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002de:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <MX_I2C1_Init+0x74>)
 80002e0:	4a1b      	ldr	r2, [pc, #108]	; (8000350 <MX_I2C1_Init+0x7c>)
 80002e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_I2C1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ea:	4b17      	ldr	r3, [pc, #92]	; (8000348 <MX_I2C1_Init+0x74>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <MX_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002f6:	4b14      	ldr	r3, [pc, #80]	; (8000348 <MX_I2C1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_I2C1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_I2C1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800030e:	480e      	ldr	r0, [pc, #56]	; (8000348 <MX_I2C1_Init+0x74>)
 8000310:	f000 fe98 	bl	8001044 <HAL_I2C_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800031a:	f000 f9b1 	bl	8000680 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800031e:	2100      	movs	r1, #0
 8000320:	4809      	ldr	r0, [pc, #36]	; (8000348 <MX_I2C1_Init+0x74>)
 8000322:	f001 f865 	bl	80013f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800032c:	f000 f9a8 	bl	8000680 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000330:	2100      	movs	r1, #0
 8000332:	4805      	ldr	r0, [pc, #20]	; (8000348 <MX_I2C1_Init+0x74>)
 8000334:	f001 f8a7 	bl	8001486 <HAL_I2CEx_ConfigDigitalFilter>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800033e:	f000 f99f 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000028 	.word	0x20000028
 800034c:	40005400 	.word	0x40005400
 8000350:	2000090e 	.word	0x2000090e

08000354 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MX_I2C2_Init+0x74>)
 800035a:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <MX_I2C2_Init+0x78>)
 800035c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000360:	4a1b      	ldr	r2, [pc, #108]	; (80003d0 <MX_I2C2_Init+0x7c>)
 8000362:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <MX_I2C2_Init+0x74>)
 800036c:	2201      	movs	r2, #1
 800036e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000378:	2200      	movs	r2, #0
 800037a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_I2C2_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_I2C2_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800038e:	480e      	ldr	r0, [pc, #56]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000390:	f000 fe58 	bl	8001044 <HAL_I2C_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800039a:	f000 f971 	bl	8000680 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800039e:	2100      	movs	r1, #0
 80003a0:	4809      	ldr	r0, [pc, #36]	; (80003c8 <MX_I2C2_Init+0x74>)
 80003a2:	f001 f825 	bl	80013f0 <HAL_I2CEx_ConfigAnalogFilter>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003ac:	f000 f968 	bl	8000680 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003b0:	2100      	movs	r1, #0
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <MX_I2C2_Init+0x74>)
 80003b4:	f001 f867 	bl	8001486 <HAL_I2CEx_ConfigDigitalFilter>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003be:	f000 f95f 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000074 	.word	0x20000074
 80003cc:	40005800 	.word	0x40005800
 80003d0:	2000090e 	.word	0x2000090e

080003d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08c      	sub	sp, #48	; 0x30
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003dc:	f107 031c 	add.w	r3, r7, #28
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a2f      	ldr	r2, [pc, #188]	; (80004b0 <HAL_I2C_MspInit+0xdc>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d128      	bne.n	8000448 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f6:	4b2f      	ldr	r3, [pc, #188]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a2e      	ldr	r2, [pc, #184]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 80003fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800040a:	61bb      	str	r3, [r7, #24]
 800040c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800040e:	23c0      	movs	r3, #192	; 0xc0
 8000410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000412:	2312      	movs	r3, #18
 8000414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000416:	2301      	movs	r3, #1
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800041a:	2303      	movs	r3, #3
 800041c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800041e:	2304      	movs	r3, #4
 8000420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	4619      	mov	r1, r3
 8000428:	4823      	ldr	r0, [pc, #140]	; (80004b8 <HAL_I2C_MspInit+0xe4>)
 800042a:	f000 fc79 	bl	8000d20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a20      	ldr	r2, [pc, #128]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000434:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000446:	e02e      	b.n	80004a6 <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C2)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <HAL_I2C_MspInit+0xe8>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d129      	bne.n	80004a6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800046a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800046e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000470:	2312      	movs	r3, #18
 8000472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000478:	2303      	movs	r3, #3
 800047a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800047c:	2304      	movs	r3, #4
 800047e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	f107 031c 	add.w	r3, r7, #28
 8000484:	4619      	mov	r1, r3
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f000 fc49 	bl	8000d20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000494:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
}
 80004a6:	bf00      	nop
 80004a8:	3730      	adds	r7, #48	; 0x30
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40005400 	.word	0x40005400
 80004b4:	40021000 	.word	0x40021000
 80004b8:	48000400 	.word	0x48000400
 80004bc:	40005800 	.word	0x40005800

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fae0 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f828 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f7ff fe84 	bl	80001d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f7ff ff00 	bl	80002d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004d4:	f000 f8f4 	bl	80006c0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80004d8:	f000 fa46 	bl	8000968 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 80004dc:	f7ff ff3a 	bl	8000354 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f9ce 	bl	8000880 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LogMessage("Initializing I2C...\r\n");
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <main+0x48>)
 80004e6:	f000 f8b5 	bl	8000654 <LogMessage>
  HAL_I2C_MspInit(&hi2c2);	// initializes the GPIO I2C pins (SDA and SCL), initializes I2C clock
 80004ea:	4808      	ldr	r0, [pc, #32]	; (800050c <main+0x4c>)
 80004ec:	f7ff ff72 	bl	80003d4 <HAL_I2C_MspInit>
  LogMessage("I2C initialization complete\r\n");
 80004f0:	4807      	ldr	r0, [pc, #28]	; (8000510 <main+0x50>)
 80004f2:	f000 f8af 	bl	8000654 <LogMessage>

  LogMessage("Initializing TMP102 sensor...\r\n");
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x54>)
 80004f8:	f000 f8ac 	bl	8000654 <LogMessage>
  Tmp102Init();
 80004fc:	f000 f874 	bl	80005e8 <Tmp102Init>
  LogMessage("TMP102 sensor initialization complete\r\n");
 8000500:	4805      	ldr	r0, [pc, #20]	; (8000518 <main+0x58>)
 8000502:	f000 f8a7 	bl	8000654 <LogMessage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000506:	e7fe      	b.n	8000506 <main+0x46>
 8000508:	08003a34 	.word	0x08003a34
 800050c:	20000074 	.word	0x20000074
 8000510:	08003a4c 	.word	0x08003a4c
 8000514:	08003a6c 	.word	0x08003a6c
 8000518:	08003a8c 	.word	0x08003a8c

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b09e      	sub	sp, #120	; 0x78
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000526:	2228      	movs	r2, #40	; 0x28
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fa6e 	bl	8003a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	223c      	movs	r2, #60	; 0x3c
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fa60 	bl	8003a0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800054c:	2303      	movs	r3, #3
 800054e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000550:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000554:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055e:	2310      	movs	r3, #16
 8000560:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800056c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000570:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000576:	4618      	mov	r0, r3
 8000578:	f001 f8b0 	bl	80016dc <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000582:	f000 f87d 	bl	8000680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2302      	movs	r3, #2
 800058c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005a0:	2101      	movs	r1, #1
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 f8d8 	bl	8002758 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 f867 	bl	8000680 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <SystemClock_Config+0xc8>)
 80005b4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fafa 	bl	8002bc4 <HAL_RCCEx_PeriphCLKConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005d6:	f000 f853 	bl	8000680 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3778      	adds	r7, #120	; 0x78
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	00020061 	.word	0x00020061

080005e8 <Tmp102Init>:

/* USER CODE BEGIN 4 */
void Tmp102Init()
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0

	  uint32_t trials = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	607b      	str	r3, [r7, #4]
	  uint32_t timeout = 1000; // milliseconds
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	603b      	str	r3, [r7, #0]
	  // TODO figure out why changing the tmp102 address to other available addresses doesn't work.
	  // TODO figure out why we had to left-shift the address by 1
	  if(HAL_I2C_IsDeviceReady(&hi2c2, tmp102Address, trials, timeout) != HAL_OK)
 80005f8:	2190      	movs	r1, #144	; 0x90
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	4811      	ldr	r0, [pc, #68]	; (8000644 <Tmp102Init+0x5c>)
 8000600:	f000 fdaf 	bl	8001162 <HAL_I2C_IsDeviceReady>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <Tmp102Init+0x28>
	  {
		  Error_Handler();
 800060a:	f000 f839 	bl	8000680 <Error_Handler>
	  {
		   strcpy(MSG,"TMP102 sensor ACK received\r\n");
		   HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
		   memset(MSG, 0, 100);
	  }
}
 800060e:	e014      	b.n	800063a <Tmp102Init+0x52>
		   strcpy(MSG,"TMP102 sensor ACK received\r\n");
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <Tmp102Init+0x60>)
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <Tmp102Init+0x64>)
 8000614:	4614      	mov	r4, r2
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000620:	c407      	stmia	r4!, {r0, r1, r2}
 8000622:	7023      	strb	r3, [r4, #0]
		   HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	2264      	movs	r2, #100	; 0x64
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <Tmp102Init+0x60>)
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <Tmp102Init+0x68>)
 800062c:	f002 fd73 	bl	8003116 <HAL_UART_Transmit>
		   memset(MSG, 0, 100);
 8000630:	2264      	movs	r2, #100	; 0x64
 8000632:	2100      	movs	r1, #0
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <Tmp102Init+0x60>)
 8000636:	f003 f9e9 	bl	8003a0c <memset>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bdb0      	pop	{r4, r5, r7, pc}
 8000642:	bf00      	nop
 8000644:	20000074 	.word	0x20000074
 8000648:	200000c0 	.word	0x200000c0
 800064c:	08003ab4 	.word	0x08003ab4
 8000650:	20000188 	.word	0x20000188

08000654 <LogMessage>:

/*
 *  Displays contents of msgStr to console
 */
void LogMessage(int8_t* msgStr)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	  const int timeoutMs = 100;
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, msgStr, strlen(msgStr), timeoutMs);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fdb1 	bl	80001c8 <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b29a      	uxth	r2, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	4803      	ldr	r0, [pc, #12]	; (800067c <LogMessage+0x28>)
 8000670:	f002 fd51 	bl	8003116 <HAL_UART_Transmit>
};
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000188 	.word	0x20000188

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b08c      	sub	sp, #48	; 0x30
 8000684:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000686:	b672      	cpsid	i
}
 8000688:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  char errMsg[] = "Error encountered. Terminate the program\r\n";
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <Error_Handler+0x38>)
 800068c:	1d3c      	adds	r4, r7, #4
 800068e:	461d      	mov	r5, r3
 8000690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000698:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069c:	c403      	stmia	r4!, {r0, r1}
 800069e:	8022      	strh	r2, [r4, #0]
 80006a0:	3402      	adds	r4, #2
 80006a2:	0c13      	lsrs	r3, r2, #16
 80006a4:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, errMsg, sizeof(errMsg), HAL_MAX_DELAY);
 80006a6:	1d39      	adds	r1, r7, #4
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	222b      	movs	r2, #43	; 0x2b
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <Error_Handler+0x3c>)
 80006b0:	f002 fd31 	bl	8003116 <HAL_UART_Transmit>

  while (1)
 80006b4:	e7fe      	b.n	80006b4 <Error_Handler+0x34>
 80006b6:	bf00      	nop
 80006b8:	08003ad4 	.word	0x08003ad4
 80006bc:	20000188 	.word	0x20000188

080006c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_SPI1_Init+0x74>)
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <MX_SPI1_Init+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_SPI1_Init+0x74>)
 80006cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_SPI1_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_SPI1_Init+0x74>)
 80006da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_SPI1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_SPI1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI1_Init+0x74>)
 80006ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_SPI1_Init+0x74>)
 80006f6:	2208      	movs	r2, #8
 80006f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SPI1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_SPI1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI1_Init+0x74>)
 800070e:	2207      	movs	r2, #7
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_SPI1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI1_Init+0x74>)
 800071a:	2208      	movs	r2, #8
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_SPI1_Init+0x74>)
 8000720:	f002 fc00 	bl	8002f24 <HAL_SPI_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f7ff ffa9 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000124 	.word	0x20000124
 8000738:	40013000 	.word	0x40013000

0800073c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <HAL_SPI_MspInit+0x7c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d128      	bne.n	80007b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <HAL_SPI_MspInit+0x80>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a16      	ldr	r2, [pc, #88]	; (80007bc <HAL_SPI_MspInit+0x80>)
 8000764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <HAL_SPI_MspInit+0x80>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <HAL_SPI_MspInit+0x80>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <HAL_SPI_MspInit+0x80>)
 800077c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <HAL_SPI_MspInit+0x80>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800078e:	23e0      	movs	r3, #224	; 0xe0
 8000790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800079e:	2305      	movs	r3, #5
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f000 fab8 	bl	8000d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40013000 	.word	0x40013000
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_MspInit+0x44>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_MspInit+0x44>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <HAL_MspInit+0x44>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x44>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x44>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x44>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007f6:	2007      	movs	r0, #7
 80007f8:	f000 fa5e 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 f95e 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <SystemInit+0x20>)
 8000862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <SystemInit+0x20>)
 8000868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800086c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USART1_UART_Init+0x58>)
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <MX_USART1_UART_Init+0x5c>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_USART1_UART_Init+0x58>)
 800088c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART1_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_USART1_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART1_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART1_UART_Init+0x58>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART1_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART1_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART1_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART1_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART1_UART_Init+0x58>)
 80008c4:	f002 fbd9 	bl	800307a <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ce:	f7ff fed7 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000188 	.word	0x20000188
 80008dc:	40013800 	.word	0x40013800

080008e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <HAL_UART_MspInit+0x7c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d127      	bne.n	8000952 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <HAL_UART_MspInit+0x80>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <HAL_UART_MspInit+0x80>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <HAL_UART_MspInit+0x80>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_UART_MspInit+0x80>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a10      	ldr	r2, [pc, #64]	; (8000960 <HAL_UART_MspInit+0x80>)
 8000920:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_UART_MspInit+0x80>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000932:	2330      	movs	r3, #48	; 0x30
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000942:	2307      	movs	r3, #7
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <HAL_UART_MspInit+0x84>)
 800094e:	f000 f9e7 	bl	8000d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40013800 	.word	0x40013800
 8000960:	40021000 	.word	0x40021000
 8000964:	48000800 	.word	0x48000800

08000968 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_USB_PCD_Init+0x3c>)
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <MX_USB_PCD_Init+0x40>)
 8000970:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USB_PCD_Init+0x3c>)
 8000974:	2208      	movs	r2, #8
 8000976:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_USB_PCD_Init+0x3c>)
 800097a:	2202      	movs	r2, #2
 800097c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USB_PCD_Init+0x3c>)
 8000980:	2202      	movs	r2, #2
 8000982:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_USB_PCD_Init+0x3c>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USB_PCD_Init+0x3c>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_USB_PCD_Init+0x3c>)
 8000992:	f000 fdc4 	bl	800151e <HAL_PCD_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800099c:	f7ff fe70 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000020c 	.word	0x2000020c
 80009a8:	40005c00 	.word	0x40005c00

080009ac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <HAL_PCD_MspInit+0x80>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d129      	bne.n	8000a22 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_PCD_MspInit+0x84>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_PCD_MspInit+0x84>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	6153      	str	r3, [r2, #20]
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_PCD_MspInit+0x84>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80009e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80009f8:	230e      	movs	r3, #14
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f000 f98b 	bl	8000d20 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_PCD_MspInit+0x84>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_PCD_MspInit+0x84>)
 8000a10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_PCD_MspInit+0x84>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40005c00 	.word	0x40005c00
 8000a30:	40021000 	.word	0x40021000

08000a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a6c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490e      	ldr	r1, [pc, #56]	; (8000a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0b      	ldr	r4, [pc, #44]	; (8000a80 <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a5e:	f7ff fefd 	bl	800085c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f002 ffaf 	bl	80039c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a66:	f7ff fd2b 	bl	80004c0 <main>

08000a6a <LoopForever>:

LoopForever:
    b LoopForever
 8000a6a:	e7fe      	b.n	8000a6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a6c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a78:	08003b40 	.word	0x08003b40
  ldr r2, =_sbss
 8000a7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a80:	200004fc 	.word	0x200004fc

08000a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_2_IRQHandler>
	...

08000a88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x28>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x28>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f90d 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff fe8c 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f917 	bl	8000d06 <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 f8ed 	bl	8000cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000004 	.word	0x20000004

08000b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	200004f8 	.word	0x200004f8

08000b3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200004f8 	.word	0x200004f8

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff8e 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff47 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff5c 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ff8e 	bl	8000c0c <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ffb0 	bl	8000c74 <SysTick_Config>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2e:	e154      	b.n	8000fda <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	2101      	movs	r1, #1
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 8146 	beq.w	8000fd4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d005      	beq.n	8000d60 <HAL_GPIO_Init+0x40>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d130      	bne.n	8000dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d96:	2201      	movs	r2, #1
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	091b      	lsrs	r3, r3, #4
 8000dac:	f003 0201 	and.w	r2, r3, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d017      	beq.n	8000dfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d123      	bne.n	8000e52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	08da      	lsrs	r2, r3, #3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3208      	adds	r2, #8
 8000e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	691a      	ldr	r2, [r3, #16]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	6939      	ldr	r1, [r7, #16]
 8000e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0203 	and.w	r2, r3, #3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 80a0 	beq.w	8000fd4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e94:	4b58      	ldr	r3, [pc, #352]	; (8000ff8 <HAL_GPIO_Init+0x2d8>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a57      	ldr	r2, [pc, #348]	; (8000ff8 <HAL_GPIO_Init+0x2d8>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b55      	ldr	r3, [pc, #340]	; (8000ff8 <HAL_GPIO_Init+0x2d8>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eac:	4a53      	ldr	r2, [pc, #332]	; (8000ffc <HAL_GPIO_Init+0x2dc>)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ed6:	d019      	beq.n	8000f0c <HAL_GPIO_Init+0x1ec>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a49      	ldr	r2, [pc, #292]	; (8001000 <HAL_GPIO_Init+0x2e0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d013      	beq.n	8000f08 <HAL_GPIO_Init+0x1e8>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a48      	ldr	r2, [pc, #288]	; (8001004 <HAL_GPIO_Init+0x2e4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d00d      	beq.n	8000f04 <HAL_GPIO_Init+0x1e4>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a47      	ldr	r2, [pc, #284]	; (8001008 <HAL_GPIO_Init+0x2e8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d007      	beq.n	8000f00 <HAL_GPIO_Init+0x1e0>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a46      	ldr	r2, [pc, #280]	; (800100c <HAL_GPIO_Init+0x2ec>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d101      	bne.n	8000efc <HAL_GPIO_Init+0x1dc>
 8000ef8:	2304      	movs	r3, #4
 8000efa:	e008      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000efc:	2305      	movs	r3, #5
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000f00:	2303      	movs	r3, #3
 8000f02:	e004      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_Init+0x1ee>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f1e:	4937      	ldr	r1, [pc, #220]	; (8000ffc <HAL_GPIO_Init+0x2dc>)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2c:	4b38      	ldr	r3, [pc, #224]	; (8001010 <HAL_GPIO_Init+0x2f0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f50:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <HAL_GPIO_Init+0x2f0>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f56:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <HAL_GPIO_Init+0x2f0>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f7a:	4a25      	ldr	r2, [pc, #148]	; (8001010 <HAL_GPIO_Init+0x2f0>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_GPIO_Init+0x2f0>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fa4:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <HAL_GPIO_Init+0x2f0>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_GPIO_Init+0x2f0>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_GPIO_Init+0x2f0>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f47f aea3 	bne.w	8000d30 <HAL_GPIO_Init+0x10>
  }
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000800 	.word	0x48000800
 8001008:	48000c00 	.word	0x48000c00
 800100c:	48001000 	.word	0x48001000
 8001010:	40010400 	.word	0x40010400

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001030:	e002      	b.n	8001038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e081      	b.n	800115a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d106      	bne.n	8001070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff f9b2 	bl	80003d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2224      	movs	r2, #36	; 0x24
 8001074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001094:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	e006      	b.n	80010cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d104      	bne.n	80010de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001100:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69d9      	ldr	r1, [r3, #28]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1a      	ldr	r2, [r3, #32]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2220      	movs	r2, #32
 8001146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b08a      	sub	sp, #40	; 0x28
 8001166:	af02      	add	r7, sp, #8
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	460b      	mov	r3, r1
 8001170:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b20      	cmp	r3, #32
 8001180:	f040 80f1 	bne.w	8001366 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800118e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001192:	d101      	bne.n	8001198 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001194:	2302      	movs	r3, #2
 8001196:	e0e7      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_I2C_IsDeviceReady+0x44>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e0e0      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x206>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2224      	movs	r2, #36	; 0x24
 80011b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d107      	bne.n	80011d4 <HAL_I2C_IsDeviceReady+0x72>
 80011c4:	897b      	ldrh	r3, [r7, #10]
 80011c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011d2:	e004      	b.n	80011de <HAL_I2C_IsDeviceReady+0x7c>
 80011d4:	897b      	ldrh	r3, [r7, #10]
 80011d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011da:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80011e4:	f7ff fcaa 	bl	8000b3c <HAL_GetTick>
 80011e8:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0320 	and.w	r3, r3, #32
 80011f4:	2b20      	cmp	r3, #32
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	2b10      	cmp	r3, #16
 800120c:	bf0c      	ite	eq
 800120e:	2301      	moveq	r3, #1
 8001210:	2300      	movne	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001216:	e034      	b.n	8001282 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121e:	d01a      	beq.n	8001256 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001220:	f7ff fc8c 	bl	8000b3c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d302      	bcc.n	8001236 <HAL_I2C_IsDeviceReady+0xd4>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10f      	bne.n	8001256 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2220      	movs	r2, #32
 800123a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f043 0220 	orr.w	r2, r3, #32
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e088      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0320 	and.w	r3, r3, #32
 8001260:	2b20      	cmp	r3, #32
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b10      	cmp	r3, #16
 8001278:	bf0c      	ite	eq
 800127a:	2301      	moveq	r3, #1
 800127c:	2300      	movne	r3, #0
 800127e:	b2db      	uxtb	r3, r3
 8001280:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001282:	7ffb      	ldrb	r3, [r7, #31]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <HAL_I2C_IsDeviceReady+0x12c>
 8001288:	7fbb      	ldrb	r3, [r7, #30]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0c4      	beq.n	8001218 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b10      	cmp	r3, #16
 800129a:	d01a      	beq.n	80012d2 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	2120      	movs	r1, #32
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 f862 	bl	8001370 <I2C_WaitOnFlagUntilTimeout>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e058      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2220      	movs	r2, #32
 80012bc:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2220      	movs	r2, #32
 80012c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e04a      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	2120      	movs	r1, #32
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 f847 	bl	8001370 <I2C_WaitOnFlagUntilTimeout>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e03d      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2210      	movs	r2, #16
 80012f2:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2220      	movs	r2, #32
 80012fa:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d118      	bne.n	8001336 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001312:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	2120      	movs	r1, #32
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 f826 	bl	8001370 <I2C_WaitOnFlagUntilTimeout>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e01c      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2220      	movs	r2, #32
 8001334:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	f63f af3b 	bhi.w	80011bc <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2220      	movs	r2, #32
 800134a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f043 0220 	orr.w	r2, r3, #32
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001366:	2302      	movs	r3, #2
  }
}
 8001368:	4618      	mov	r0, r3
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001380:	e022      	b.n	80013c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d01e      	beq.n	80013c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800138a:	f7ff fbd7 	bl	8000b3c <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d302      	bcc.n	80013a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d113      	bne.n	80013c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	f043 0220 	orr.w	r2, r3, #32
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2220      	movs	r2, #32
 80013b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e00f      	b.n	80013e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	4013      	ands	r3, r2
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	bf0c      	ite	eq
 80013d8:	2301      	moveq	r3, #1
 80013da:	2300      	movne	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d0cd      	beq.n	8001382 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b20      	cmp	r3, #32
 8001404:	d138      	bne.n	8001478 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001410:	2302      	movs	r3, #2
 8001412:	e032      	b.n	800147a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2224      	movs	r2, #36	; 0x24
 8001420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001442:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6819      	ldr	r1, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2220      	movs	r2, #32
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	e000      	b.n	800147a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001478:	2302      	movs	r3, #2
  }
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b20      	cmp	r3, #32
 800149a:	d139      	bne.n	8001510 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e033      	b.n	8001512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2224      	movs	r2, #36	; 0x24
 80014b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2220      	movs	r2, #32
 8001500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	e000      	b.n	8001512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001510:	2302      	movs	r3, #2
  }
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800151e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001520:	b08b      	sub	sp, #44	; 0x2c
 8001522:	af06      	add	r7, sp, #24
 8001524:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0d0      	b.n	80016d2 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d106      	bne.n	800154a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fa31 	bl	80009ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2203      	movs	r2, #3
 800154e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f002 f9f7 	bl	800394a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e04c      	b.n	80015fc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	3301      	adds	r3, #1
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	b298      	uxth	r0, r3
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	3336      	adds	r3, #54	; 0x36
 80015a0:	4602      	mov	r2, r0
 80015a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	3303      	adds	r3, #3
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	3338      	adds	r3, #56	; 0x38
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	333c      	adds	r3, #60	; 0x3c
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	3340      	adds	r3, #64	; 0x40
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	3301      	adds	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3ad      	bcc.n	8001562 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e044      	b.n	8001696 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	3301      	adds	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3b5      	bcc.n	800160c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	687e      	ldr	r6, [r7, #4]
 80016a8:	466d      	mov	r5, sp
 80016aa:	f106 0410 	add.w	r4, r6, #16
 80016ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	602b      	str	r3, [r5, #0]
 80016b6:	1d33      	adds	r3, r6, #4
 80016b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ba:	6838      	ldr	r0, [r7, #0]
 80016bc:	f002 f960 	bl	8003980 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	f001 b823 	b.w	8002748 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 817d 	beq.w	8001a12 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001718:	4bbc      	ldr	r3, [pc, #752]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b04      	cmp	r3, #4
 8001722:	d00c      	beq.n	800173e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001724:	4bb9      	ldr	r3, [pc, #740]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b08      	cmp	r3, #8
 800172e:	d15c      	bne.n	80017ea <HAL_RCC_OscConfig+0x10e>
 8001730:	4bb6      	ldr	r3, [pc, #728]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173c:	d155      	bne.n	80017ea <HAL_RCC_OscConfig+0x10e>
 800173e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001742:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800174a:	fa93 f3a3 	rbit	r3, r3
 800174e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001752:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	095b      	lsrs	r3, r3, #5
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d102      	bne.n	8001770 <HAL_RCC_OscConfig+0x94>
 800176a:	4ba8      	ldr	r3, [pc, #672]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	e015      	b.n	800179c <HAL_RCC_OscConfig+0xc0>
 8001770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001774:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001784:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001788:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800178c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001790:	fa93 f3a3 	rbit	r3, r3
 8001794:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001798:	4b9c      	ldr	r3, [pc, #624]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017a0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80017a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017a8:	fa92 f2a2 	rbit	r2, r2
 80017ac:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80017b0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80017b4:	fab2 f282 	clz	r2, r2
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	f042 0220 	orr.w	r2, r2, #32
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	f002 021f 	and.w	r2, r2, #31
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 811f 	beq.w	8001a10 <HAL_RCC_OscConfig+0x334>
 80017d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 8116 	bne.w	8001a10 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f000 bfaf 	b.w	8002748 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x12e>
 80017fc:	4b83      	ldr	r3, [pc, #524]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a82      	ldr	r2, [pc, #520]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 8001802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e036      	b.n	8001878 <HAL_RCC_OscConfig+0x19c>
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x158>
 800181a:	4b7c      	ldr	r3, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a7b      	ldr	r2, [pc, #492]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 8001820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b79      	ldr	r3, [pc, #484]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a78      	ldr	r2, [pc, #480]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 800182c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e021      	b.n	8001878 <HAL_RCC_OscConfig+0x19c>
 8001834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001838:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0x184>
 8001846:	4b71      	ldr	r3, [pc, #452]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a70      	ldr	r2, [pc, #448]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b6e      	ldr	r3, [pc, #440]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a6d      	ldr	r2, [pc, #436]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0x19c>
 8001860:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a69      	ldr	r2, [pc, #420]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a66      	ldr	r2, [pc, #408]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001878:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	f023 020f 	bic.w	r2, r3, #15
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	495f      	ldr	r1, [pc, #380]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 800188e:	4313      	orrs	r3, r2
 8001890:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d059      	beq.n	8001956 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff f94b 	bl	8000b3c <HAL_GetTick>
 80018a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff f946 	bl	8000b3c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b64      	cmp	r3, #100	; 0x64
 80018ba:	d902      	bls.n	80018c2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	f000 bf43 	b.w	8002748 <HAL_RCC_OscConfig+0x106c>
 80018c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80018d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	095b      	lsrs	r3, r3, #5
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d102      	bne.n	80018f4 <HAL_RCC_OscConfig+0x218>
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e015      	b.n	8001920 <HAL_RCC_OscConfig+0x244>
 80018f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001910:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800191c:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001924:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001928:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800192c:	fa92 f2a2 	rbit	r2, r2
 8001930:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001934:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f042 0220 	orr.w	r2, r2, #32
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	f002 021f 	and.w	r2, r2, #31
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f202 	lsl.w	r2, r1, r2
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0ab      	beq.n	80018ac <HAL_RCC_OscConfig+0x1d0>
 8001954:	e05d      	b.n	8001a12 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff f8f1 	bl	8000b3c <HAL_GetTick>
 800195a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff f8ec 	bl	8000b3c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d902      	bls.n	8001976 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	f000 bee9 	b.w	8002748 <HAL_RCC_OscConfig+0x106c>
 8001976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800197a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800198a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	095b      	lsrs	r3, r3, #5
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d102      	bne.n	80019a8 <HAL_RCC_OscConfig+0x2cc>
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	e015      	b.n	80019d4 <HAL_RCC_OscConfig+0x2f8>
 80019a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019c4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_RCC_OscConfig+0x330>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019d8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80019dc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019e0:	fa92 f2a2 	rbit	r2, r2
 80019e4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80019e8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80019ec:	fab2 f282 	clz	r2, r2
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	f042 0220 	orr.w	r2, r2, #32
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	f002 021f 	and.w	r2, r2, #31
 80019fc:	2101      	movs	r1, #1
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1ab      	bne.n	8001960 <HAL_RCC_OscConfig+0x284>
 8001a08:	e003      	b.n	8001a12 <HAL_RCC_OscConfig+0x336>
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 817d 	beq.w	8001d22 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a28:	4ba6      	ldr	r3, [pc, #664]	; (8001cc4 <HAL_RCC_OscConfig+0x5e8>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00b      	beq.n	8001a4c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a34:	4ba3      	ldr	r3, [pc, #652]	; (8001cc4 <HAL_RCC_OscConfig+0x5e8>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d172      	bne.n	8001b26 <HAL_RCC_OscConfig+0x44a>
 8001a40:	4ba0      	ldr	r3, [pc, #640]	; (8001cc4 <HAL_RCC_OscConfig+0x5e8>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d16c      	bne.n	8001b26 <HAL_RCC_OscConfig+0x44a>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	095b      	lsrs	r3, r3, #5
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d102      	bne.n	8001a7c <HAL_RCC_OscConfig+0x3a0>
 8001a76:	4b93      	ldr	r3, [pc, #588]	; (8001cc4 <HAL_RCC_OscConfig+0x5e8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e013      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c8>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001aa0:	4b88      	ldr	r3, [pc, #544]	; (8001cc4 <HAL_RCC_OscConfig+0x5e8>)
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001aaa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001aae:	fa92 f2a2 	rbit	r2, r2
 8001ab2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ab6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001aba:	fab2 f282 	clz	r2, r2
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	f042 0220 	orr.w	r2, r2, #32
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	f002 021f 	and.w	r2, r2, #31
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <HAL_RCC_OscConfig+0x410>
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d002      	beq.n	8001aec <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f000 be2e 	b.w	8002748 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	4b75      	ldr	r3, [pc, #468]	; (8001cc4 <HAL_RCC_OscConfig+0x5e8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	21f8      	movs	r1, #248	; 0xf8
 8001b02:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b0a:	fa91 f1a1 	rbit	r1, r1
 8001b0e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b12:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b16:	fab1 f181 	clz	r1, r1
 8001b1a:	b2c9      	uxtb	r1, r1
 8001b1c:	408b      	lsls	r3, r1
 8001b1e:	4969      	ldr	r1, [pc, #420]	; (8001cc4 <HAL_RCC_OscConfig+0x5e8>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b24:	e0fd      	b.n	8001d22 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8088 	beq.w	8001c48 <HAL_RCC_OscConfig+0x56c>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2301      	movs	r3, #1
 8001b62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7fe ffea 	bl	8000b3c <HAL_GetTick>
 8001b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7fe ffe5 	bl	8000b3c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d902      	bls.n	8001b84 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	f000 bde2 	b.w	8002748 <HAL_RCC_OscConfig+0x106c>
 8001b84:	2302      	movs	r3, #2
 8001b86:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b96:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d102      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4d8>
 8001bae:	4b45      	ldr	r3, [pc, #276]	; (8001cc4 <HAL_RCC_OscConfig+0x5e8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	e013      	b.n	8001bdc <HAL_RCC_OscConfig+0x500>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001bcc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <HAL_RCC_OscConfig+0x5e8>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001be2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001be6:	fa92 f2a2 	rbit	r2, r2
 8001bea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001bee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001bf2:	fab2 f282 	clz	r2, r2
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f042 0220 	orr.w	r2, r2, #32
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f002 021f 	and.w	r2, r2, #31
 8001c02:	2101      	movs	r1, #1
 8001c04:	fa01 f202 	lsl.w	r2, r1, r2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0af      	beq.n	8001b6e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_RCC_OscConfig+0x5e8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	21f8      	movs	r1, #248	; 0xf8
 8001c24:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c2c:	fa91 f1a1 	rbit	r1, r1
 8001c30:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c34:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c38:	fab1 f181 	clz	r1, r1
 8001c3c:	b2c9      	uxtb	r1, r1
 8001c3e:	408b      	lsls	r3, r1
 8001c40:	4920      	ldr	r1, [pc, #128]	; (8001cc4 <HAL_RCC_OscConfig+0x5e8>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
 8001c46:	e06c      	b.n	8001d22 <HAL_RCC_OscConfig+0x646>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2300      	movs	r3, #0
 8001c72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7fe ff62 	bl	8000b3c <HAL_GetTick>
 8001c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7fe ff5d 	bl	8000b3c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d902      	bls.n	8001c94 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	f000 bd5a 	b.w	8002748 <HAL_RCC_OscConfig+0x106c>
 8001c94:	2302      	movs	r3, #2
 8001c96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d104      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x5ec>
 8001cbe:	4b01      	ldr	r3, [pc, #4]	; (8001cc4 <HAL_RCC_OscConfig+0x5e8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	e015      	b.n	8001cf0 <HAL_RCC_OscConfig+0x614>
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ce0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001cec:	4bc8      	ldr	r3, [pc, #800]	; (8002010 <HAL_RCC_OscConfig+0x934>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001cf6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001cfa:	fa92 f2a2 	rbit	r2, r2
 8001cfe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d02:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d06:	fab2 f282 	clz	r2, r2
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f042 0220 	orr.w	r2, r2, #32
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f002 021f 	and.w	r2, r2, #31
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ad      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8110 	beq.w	8001f58 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d079      	beq.n	8001e3c <HAL_RCC_OscConfig+0x760>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	4bab      	ldr	r3, [pc, #684]	; (8002014 <HAL_RCC_OscConfig+0x938>)
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2301      	movs	r3, #1
 8001d70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d72:	f7fe fee3 	bl	8000b3c <HAL_GetTick>
 8001d76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7fe fede 	bl	8000b3c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d902      	bls.n	8001d92 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f000 bcdb 	b.w	8002748 <HAL_RCC_OscConfig+0x106c>
 8001d92:	2302      	movs	r3, #2
 8001d94:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dac:	2202      	movs	r2, #2
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	fa93 f2a3 	rbit	r2, r3
 8001dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	fa93 f2a3 	rbit	r2, r3
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001dea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dec:	4b88      	ldr	r3, [pc, #544]	; (8002010 <HAL_RCC_OscConfig+0x934>)
 8001dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001df8:	2102      	movs	r1, #2
 8001dfa:	6019      	str	r1, [r3, #0]
 8001dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	fa93 f1a3 	rbit	r1, r3
 8001e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e12:	6019      	str	r1, [r3, #0]
  return result;
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2101      	movs	r1, #1
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0a0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x6a0>
 8001e3a:	e08d      	b.n	8001f58 <HAL_RCC_OscConfig+0x87c>
 8001e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e40:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e5e:	601a      	str	r2, [r3, #0]
  return result;
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e68:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b68      	ldr	r3, [pc, #416]	; (8002014 <HAL_RCC_OscConfig+0x938>)
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7fe fe5d 	bl	8000b3c <HAL_GetTick>
 8001e82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e88:	f7fe fe58 	bl	8000b3c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d902      	bls.n	8001e9e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	f000 bc55 	b.w	8002748 <HAL_RCC_OscConfig+0x106c>
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001eca:	2202      	movs	r2, #2
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	fa93 f2a3 	rbit	r2, r3
 8001edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001eee:	2202      	movs	r2, #2
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f2a3 	rbit	r2, r3
 8001f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f08:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0a:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCC_OscConfig+0x934>)
 8001f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f16:	2102      	movs	r1, #2
 8001f18:	6019      	str	r1, [r3, #0]
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f1a3 	rbit	r1, r3
 8001f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f30:	6019      	str	r1, [r3, #0]
  return result;
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d197      	bne.n	8001e88 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 81a1 	beq.w	80022b0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_RCC_OscConfig+0x934>)
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d116      	bne.n	8001fae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f80:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_RCC_OscConfig+0x934>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	4a22      	ldr	r2, [pc, #136]	; (8002010 <HAL_RCC_OscConfig+0x934>)
 8001f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	61d3      	str	r3, [r2, #28]
 8001f8c:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_RCC_OscConfig+0x934>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001fa6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_RCC_OscConfig+0x93c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d11a      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_RCC_OscConfig+0x93c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a16      	ldr	r2, [pc, #88]	; (8002018 <HAL_RCC_OscConfig+0x93c>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc6:	f7fe fdb9 	bl	8000b3c <HAL_GetTick>
 8001fca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fce:	e009      	b.n	8001fe4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd0:	f7fe fdb4 	bl	8000b3c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b64      	cmp	r3, #100	; 0x64
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e3b1      	b.n	8002748 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_RCC_OscConfig+0x93c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ef      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d10d      	bne.n	800201c <HAL_RCC_OscConfig+0x940>
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_RCC_OscConfig+0x934>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a02      	ldr	r2, [pc, #8]	; (8002010 <HAL_RCC_OscConfig+0x934>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6213      	str	r3, [r2, #32]
 800200c:	e03c      	b.n	8002088 <HAL_RCC_OscConfig+0x9ac>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	10908120 	.word	0x10908120
 8002018:	40007000 	.word	0x40007000
 800201c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002020:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10c      	bne.n	8002046 <HAL_RCC_OscConfig+0x96a>
 800202c:	4bc1      	ldr	r3, [pc, #772]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4ac0      	ldr	r2, [pc, #768]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	6213      	str	r3, [r2, #32]
 8002038:	4bbe      	ldr	r3, [pc, #760]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4abd      	ldr	r2, [pc, #756]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 800203e:	f023 0304 	bic.w	r3, r3, #4
 8002042:	6213      	str	r3, [r2, #32]
 8002044:	e020      	b.n	8002088 <HAL_RCC_OscConfig+0x9ac>
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b05      	cmp	r3, #5
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x994>
 8002056:	4bb7      	ldr	r3, [pc, #732]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4ab6      	ldr	r2, [pc, #728]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	6213      	str	r3, [r2, #32]
 8002062:	4bb4      	ldr	r3, [pc, #720]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4ab3      	ldr	r2, [pc, #716]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	e00b      	b.n	8002088 <HAL_RCC_OscConfig+0x9ac>
 8002070:	4bb0      	ldr	r3, [pc, #704]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4aaf      	ldr	r2, [pc, #700]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6213      	str	r3, [r2, #32]
 800207c:	4bad      	ldr	r3, [pc, #692]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4aac      	ldr	r2, [pc, #688]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 8002082:	f023 0304 	bic.w	r3, r3, #4
 8002086:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 8081 	beq.w	800219c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7fe fd4f 	bl	8000b3c <HAL_GetTick>
 800209e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7fe fd4a 	bl	8000b3c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e345      	b.n	8002748 <HAL_RCC_OscConfig+0x106c>
 80020bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020c4:	2202      	movs	r2, #2
 80020c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80020e8:	2202      	movs	r2, #2
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	fa93 f2a3 	rbit	r2, r3
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002102:	601a      	str	r2, [r3, #0]
  return result;
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800210c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d102      	bne.n	8002128 <HAL_RCC_OscConfig+0xa4c>
 8002122:	4b84      	ldr	r3, [pc, #528]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	e013      	b.n	8002150 <HAL_RCC_OscConfig+0xa74>
 8002128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002130:	2202      	movs	r2, #2
 8002132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002138:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	fa93 f2a3 	rbit	r2, r3
 8002142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002146:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	4b79      	ldr	r3, [pc, #484]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002154:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002158:	2102      	movs	r1, #2
 800215a:	6011      	str	r1, [r2, #0]
 800215c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002160:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	fa92 f1a2 	rbit	r1, r2
 800216a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800216e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002172:	6011      	str	r1, [r2, #0]
  return result;
 8002174:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002178:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	fab2 f282 	clz	r2, r2
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	f002 021f 	and.w	r2, r2, #31
 800218e:	2101      	movs	r1, #1
 8002190:	fa01 f202 	lsl.w	r2, r1, r2
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d084      	beq.n	80020a4 <HAL_RCC_OscConfig+0x9c8>
 800219a:	e07f      	b.n	800229c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219c:	f7fe fcce 	bl	8000b3c <HAL_GetTick>
 80021a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7fe fcc9 	bl	8000b3c <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e2c4      	b.n	8002748 <HAL_RCC_OscConfig+0x106c>
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80021c6:	2202      	movs	r2, #2
 80021c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	fa93 f2a3 	rbit	r2, r3
 80021d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021dc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021ea:	2202      	movs	r2, #2
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	fa93 f2a3 	rbit	r2, r3
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002204:	601a      	str	r2, [r3, #0]
  return result;
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800220e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d102      	bne.n	800222a <HAL_RCC_OscConfig+0xb4e>
 8002224:	4b43      	ldr	r3, [pc, #268]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	e013      	b.n	8002252 <HAL_RCC_OscConfig+0xb76>
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002232:	2202      	movs	r2, #2
 8002234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002256:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800225a:	2102      	movs	r1, #2
 800225c:	6011      	str	r1, [r2, #0]
 800225e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002262:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	fa92 f1a2 	rbit	r1, r2
 800226c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002270:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002274:	6011      	str	r1, [r2, #0]
  return result;
 8002276:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800227a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	fab2 f282 	clz	r2, r2
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f002 021f 	and.w	r2, r2, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f202 	lsl.w	r2, r1, r2
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d184      	bne.n	80021a6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800229c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 80022aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8242 	beq.w	8002746 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_RCC_OscConfig+0xc58>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	f000 8213 	beq.w	80026f6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	f040 8162 	bne.w	80025a6 <HAL_RCC_OscConfig+0xeca>
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80022ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002306:	601a      	str	r2, [r3, #0]
  return result;
 8002308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002310:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800231c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	461a      	mov	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7fe fc08 	bl	8000b3c <HAL_GetTick>
 800232c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002330:	e00c      	b.n	800234c <HAL_RCC_OscConfig+0xc70>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002338:	f7fe fc00 	bl	8000b3c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1fd      	b.n	8002748 <HAL_RCC_OscConfig+0x106c>
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002354:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	fa93 f2a3 	rbit	r2, r3
 8002368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002370:	601a      	str	r2, [r3, #0]
  return result;
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800237a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d102      	bne.n	8002396 <HAL_RCC_OscConfig+0xcba>
 8002390:	4bb0      	ldr	r3, [pc, #704]	; (8002654 <HAL_RCC_OscConfig+0xf78>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	e027      	b.n	80023e6 <HAL_RCC_OscConfig+0xd0a>
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800239e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	fa93 f2a3 	rbit	r2, r3
 80023b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	fa93 f2a3 	rbit	r2, r3
 80023d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	4b9c      	ldr	r3, [pc, #624]	; (8002654 <HAL_RCC_OscConfig+0xf78>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ea:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80023ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023f2:	6011      	str	r1, [r2, #0]
 80023f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023f8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	fa92 f1a2 	rbit	r1, r2
 8002402:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002406:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800240a:	6011      	str	r1, [r2, #0]
  return result;
 800240c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002410:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	fab2 f282 	clz	r2, r2
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	f042 0220 	orr.w	r2, r2, #32
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f002 021f 	and.w	r2, r2, #31
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d182      	bne.n	8002338 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002432:	4b88      	ldr	r3, [pc, #544]	; (8002654 <HAL_RCC_OscConfig+0xf78>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	430b      	orrs	r3, r1
 8002454:	497f      	ldr	r1, [pc, #508]	; (8002654 <HAL_RCC_OscConfig+0xf78>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
 800245a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002462:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800247e:	601a      	str	r2, [r3, #0]
  return result;
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002488:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002494:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	461a      	mov	r2, r3
 800249c:	2301      	movs	r3, #1
 800249e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fb4c 	bl	8000b3c <HAL_GetTick>
 80024a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a8:	e009      	b.n	80024be <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe fb47 	bl	8000b3c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e144      	b.n	8002748 <HAL_RCC_OscConfig+0x106c>
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	fa93 f2a3 	rbit	r2, r3
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024e2:	601a      	str	r2, [r3, #0]
  return result;
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d102      	bne.n	8002508 <HAL_RCC_OscConfig+0xe2c>
 8002502:	4b54      	ldr	r3, [pc, #336]	; (8002654 <HAL_RCC_OscConfig+0xf78>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	e027      	b.n	8002558 <HAL_RCC_OscConfig+0xe7c>
 8002508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002528:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002536:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	fa93 f2a3 	rbit	r2, r3
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <HAL_RCC_OscConfig+0xf78>)
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800255c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002560:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002564:	6011      	str	r1, [r2, #0]
 8002566:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800256a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	fa92 f1a2 	rbit	r1, r2
 8002574:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002578:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800257c:	6011      	str	r1, [r2, #0]
  return result;
 800257e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002582:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	fab2 f282 	clz	r2, r2
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f042 0220 	orr.w	r2, r2, #32
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f002 021f 	and.w	r2, r2, #31
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f202 	lsl.w	r2, r1, r2
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d082      	beq.n	80024aa <HAL_RCC_OscConfig+0xdce>
 80025a4:	e0cf      	b.n	8002746 <HAL_RCC_OscConfig+0x106a>
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80025ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	fa93 f2a3 	rbit	r2, r3
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025ca:	601a      	str	r2, [r3, #0]
  return result;
 80025cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	461a      	mov	r2, r3
 80025e8:	2300      	movs	r3, #0
 80025ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe faa6 	bl	8000b3c <HAL_GetTick>
 80025f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f4:	e009      	b.n	800260a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe faa1 	bl	8000b3c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e09e      	b.n	8002748 <HAL_RCC_OscConfig+0x106c>
 800260a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	fa93 f2a3 	rbit	r2, r3
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800262e:	601a      	str	r2, [r3, #0]
  return result;
 8002630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002634:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002638:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d104      	bne.n	8002658 <HAL_RCC_OscConfig+0xf7c>
 800264e:	4b01      	ldr	r3, [pc, #4]	; (8002654 <HAL_RCC_OscConfig+0xf78>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	e029      	b.n	80026a8 <HAL_RCC_OscConfig+0xfcc>
 8002654:	40021000 	.word	0x40021000
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002660:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	fa93 f2a3 	rbit	r2, r3
 8002674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002678:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002690:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	fa93 f2a3 	rbit	r2, r3
 800269a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <HAL_RCC_OscConfig+0x1078>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ac:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80026b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026b4:	6011      	str	r1, [r2, #0]
 80026b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ba:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	fa92 f1a2 	rbit	r1, r2
 80026c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026c8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026cc:	6011      	str	r1, [r2, #0]
  return result;
 80026ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026d2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	fab2 f282 	clz	r2, r2
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	f002 021f 	and.w	r2, r2, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d180      	bne.n	80025f6 <HAL_RCC_OscConfig+0xf1a>
 80026f4:	e027      	b.n	8002746 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e01e      	b.n	8002748 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_RCC_OscConfig+0x1078>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002712:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002716:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	429a      	cmp	r2, r3
 8002728:	d10b      	bne.n	8002742 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800272a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800272e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800273e:	429a      	cmp	r2, r3
 8002740:	d001      	beq.n	8002746 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000

08002758 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b09e      	sub	sp, #120	; 0x78
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e162      	b.n	8002a36 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002770:	4b90      	ldr	r3, [pc, #576]	; (80029b4 <HAL_RCC_ClockConfig+0x25c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d910      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b8d      	ldr	r3, [pc, #564]	; (80029b4 <HAL_RCC_ClockConfig+0x25c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 0207 	bic.w	r2, r3, #7
 8002786:	498b      	ldr	r1, [pc, #556]	; (80029b4 <HAL_RCC_ClockConfig+0x25c>)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b89      	ldr	r3, [pc, #548]	; (80029b4 <HAL_RCC_ClockConfig+0x25c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e14a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b82      	ldr	r3, [pc, #520]	; (80029b8 <HAL_RCC_ClockConfig+0x260>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	497f      	ldr	r1, [pc, #508]	; (80029b8 <HAL_RCC_ClockConfig+0x260>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80dc 	beq.w	8002984 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d13c      	bne.n	800284e <HAL_RCC_ClockConfig+0xf6>
 80027d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d102      	bne.n	80027fe <HAL_RCC_ClockConfig+0xa6>
 80027f8:	4b6f      	ldr	r3, [pc, #444]	; (80029b8 <HAL_RCC_ClockConfig+0x260>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	e00f      	b.n	800281e <HAL_RCC_ClockConfig+0xc6>
 80027fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002802:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	667b      	str	r3, [r7, #100]	; 0x64
 800280c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002810:	663b      	str	r3, [r7, #96]	; 0x60
 8002812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800281a:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_RCC_ClockConfig+0x260>)
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002822:	65ba      	str	r2, [r7, #88]	; 0x58
 8002824:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002826:	fa92 f2a2 	rbit	r2, r2
 800282a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800282c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800282e:	fab2 f282 	clz	r2, r2
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f042 0220 	orr.w	r2, r2, #32
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f002 021f 	and.w	r2, r2, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f202 	lsl.w	r2, r1, r2
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d17b      	bne.n	8002942 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0f3      	b.n	8002a36 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d13c      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x178>
 8002856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800285a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d102      	bne.n	8002880 <HAL_RCC_ClockConfig+0x128>
 800287a:	4b4f      	ldr	r3, [pc, #316]	; (80029b8 <HAL_RCC_ClockConfig+0x260>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	e00f      	b.n	80028a0 <HAL_RCC_ClockConfig+0x148>
 8002880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002884:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	647b      	str	r3, [r7, #68]	; 0x44
 800288e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002892:	643b      	str	r3, [r7, #64]	; 0x40
 8002894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800289c:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <HAL_RCC_ClockConfig+0x260>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80028a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028a8:	fa92 f2a2 	rbit	r2, r2
 80028ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028b0:	fab2 f282 	clz	r2, r2
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f042 0220 	orr.w	r2, r2, #32
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f002 021f 	and.w	r2, r2, #31
 80028c0:	2101      	movs	r1, #1
 80028c2:	fa01 f202 	lsl.w	r2, r1, r2
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d13a      	bne.n	8002942 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0b2      	b.n	8002a36 <HAL_RCC_ClockConfig+0x2de>
 80028d0:	2302      	movs	r3, #2
 80028d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d102      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x1a0>
 80028f2:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_RCC_ClockConfig+0x260>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	e00d      	b.n	8002914 <HAL_RCC_ClockConfig+0x1bc>
 80028f8:	2302      	movs	r3, #2
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
 8002904:	2302      	movs	r3, #2
 8002906:	623b      	str	r3, [r7, #32]
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <HAL_RCC_ClockConfig+0x260>)
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	2202      	movs	r2, #2
 8002916:	61ba      	str	r2, [r7, #24]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	fa92 f2a2 	rbit	r2, r2
 800291e:	617a      	str	r2, [r7, #20]
  return result;
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	fab2 f282 	clz	r2, r2
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f042 0220 	orr.w	r2, r2, #32
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	f002 021f 	and.w	r2, r2, #31
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f202 	lsl.w	r2, r1, r2
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e079      	b.n	8002a36 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_RCC_ClockConfig+0x260>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f023 0203 	bic.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	491a      	ldr	r1, [pc, #104]	; (80029b8 <HAL_RCC_ClockConfig+0x260>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002954:	f7fe f8f2 	bl	8000b3c <HAL_GetTick>
 8002958:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	e00a      	b.n	8002972 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295c:	f7fe f8ee 	bl	8000b3c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e061      	b.n	8002a36 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <HAL_RCC_ClockConfig+0x260>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 020c 	and.w	r2, r3, #12
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	429a      	cmp	r2, r3
 8002982:	d1eb      	bne.n	800295c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCC_ClockConfig+0x25c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d214      	bcs.n	80029bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_RCC_ClockConfig+0x25c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 0207 	bic.w	r2, r3, #7
 800299a:	4906      	ldr	r1, [pc, #24]	; (80029b4 <HAL_RCC_ClockConfig+0x25c>)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <HAL_RCC_ClockConfig+0x25c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e040      	b.n	8002a36 <HAL_RCC_ClockConfig+0x2de>
 80029b4:	40022000 	.word	0x40022000
 80029b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_RCC_ClockConfig+0x2e8>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	491a      	ldr	r1, [pc, #104]	; (8002a40 <HAL_RCC_ClockConfig+0x2e8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <HAL_RCC_ClockConfig+0x2e8>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4912      	ldr	r1, [pc, #72]	; (8002a40 <HAL_RCC_ClockConfig+0x2e8>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029fa:	f000 f829 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 80029fe:	4601      	mov	r1, r0
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <HAL_RCC_ClockConfig+0x2e8>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a08:	22f0      	movs	r2, #240	; 0xf0
 8002a0a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	fa92 f2a2 	rbit	r2, r2
 8002a12:	60fa      	str	r2, [r7, #12]
  return result;
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	fab2 f282 	clz	r2, r2
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	40d3      	lsrs	r3, r2
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_RCC_ClockConfig+0x2ec>)
 8002a20:	5cd3      	ldrb	r3, [r2, r3]
 8002a22:	fa21 f303 	lsr.w	r3, r1, r3
 8002a26:	4a08      	ldr	r2, [pc, #32]	; (8002a48 <HAL_RCC_ClockConfig+0x2f0>)
 8002a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_RCC_ClockConfig+0x2f4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe f840 	bl	8000ab4 <HAL_InitTick>
  
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3778      	adds	r7, #120	; 0x78
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	08003b00 	.word	0x08003b00
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	20000004 	.word	0x20000004

08002a50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b08b      	sub	sp, #44	; 0x2c
 8002a54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a6a:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d002      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x30>
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d003      	beq.n	8002a86 <HAL_RCC_GetSysClockFreq+0x36>
 8002a7e:	e03c      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a80:	4b24      	ldr	r3, [pc, #144]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a82:	623b      	str	r3, [r7, #32]
      break;
 8002a84:	e03c      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a8c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a90:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	fa92 f2a2 	rbit	r2, r2
 8002a98:	607a      	str	r2, [r7, #4]
  return result;
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	fab2 f282 	clz	r2, r2
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	40d3      	lsrs	r3, r2
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	fa92 f2a2 	rbit	r2, r2
 8002abc:	60fa      	str	r2, [r7, #12]
  return result;
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	fab2 f282 	clz	r2, r2
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	40d3      	lsrs	r3, r2
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002aca:	5cd3      	ldrb	r3, [r2, r3]
 8002acc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ad8:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	e004      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aee:	fb02 f303 	mul.w	r3, r2, r3
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	623b      	str	r3, [r7, #32]
      break;
 8002af8:	e002      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002afc:	623b      	str	r3, [r7, #32]
      break;
 8002afe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b00:	6a3b      	ldr	r3, [r7, #32]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	372c      	adds	r7, #44	; 0x2c
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	007a1200 	.word	0x007a1200
 8002b18:	08003b18 	.word	0x08003b18
 8002b1c:	08003b28 	.word	0x08003b28
 8002b20:	003d0900 	.word	0x003d0900

08002b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000000 	.word	0x20000000

08002b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b42:	f7ff ffef 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b46:	4601      	mov	r1, r0
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b50:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	fa92 f2a2 	rbit	r2, r2
 8002b5c:	603a      	str	r2, [r7, #0]
  return result;
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	fab2 f282 	clz	r2, r2
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	40d3      	lsrs	r3, r2
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	08003b10 	.word	0x08003b10

08002b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b86:	f7ff ffcd 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b94:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	fa92 f2a2 	rbit	r2, r2
 8002ba0:	603a      	str	r2, [r7, #0]
  return result;
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	40d3      	lsrs	r3, r2
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	08003b10 	.word	0x08003b10

08002bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b092      	sub	sp, #72	; 0x48
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80d4 	beq.w	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be8:	4b4e      	ldr	r3, [pc, #312]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10e      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf4:	4b4b      	ldr	r3, [pc, #300]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	4a4a      	ldr	r2, [pc, #296]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	61d3      	str	r3, [r2, #28]
 8002c00:	4b48      	ldr	r3, [pc, #288]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c12:	4b45      	ldr	r3, [pc, #276]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d118      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1e:	4b42      	ldr	r3, [pc, #264]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a41      	ldr	r2, [pc, #260]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2a:	f7fd ff87 	bl	8000b3c <HAL_GetTick>
 8002c2e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	e008      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c32:	f7fd ff83 	bl	8000b3c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b64      	cmp	r3, #100	; 0x64
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e169      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c50:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8084 	beq.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d07c      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c70:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cc2:	4a18      	ldr	r2, [pc, #96]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d04b      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7fd ff33 	bl	8000b3c <HAL_GetTick>
 8002cd6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fd ff2f 	bl	8000b3c <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e113      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	61fb      	str	r3, [r7, #28]
  return result;
 8002d08:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d108      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d1e:	4b01      	ldr	r3, [pc, #4]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	e00d      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40007000 	.word	0x40007000
 8002d2c:	10908100 	.word	0x10908100
 8002d30:	2302      	movs	r3, #2
 8002d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	4b78      	ldr	r3, [pc, #480]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	2202      	movs	r2, #2
 8002d42:	613a      	str	r2, [r7, #16]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	fa92 f2a2 	rbit	r2, r2
 8002d4a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	fab2 f282 	clz	r2, r2
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	f002 021f 	and.w	r2, r2, #31
 8002d5e:	2101      	movs	r1, #1
 8002d60:	fa01 f202 	lsl.w	r2, r1, r2
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0b7      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d6a:	4b6d      	ldr	r3, [pc, #436]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	496a      	ldr	r1, [pc, #424]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d84:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4a65      	ldr	r2, [pc, #404]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d9c:	4b60      	ldr	r3, [pc, #384]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f023 0203 	bic.w	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	495d      	ldr	r1, [pc, #372]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dba:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4956      	ldr	r1, [pc, #344]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dd8:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	494e      	ldr	r1, [pc, #312]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df6:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f023 0210 	bic.w	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4947      	ldr	r1, [pc, #284]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e14:	4b42      	ldr	r3, [pc, #264]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	493f      	ldr	r1, [pc, #252]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f023 0220 	bic.w	r2, r3, #32
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4938      	ldr	r1, [pc, #224]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e50:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	4930      	ldr	r1, [pc, #192]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e6e:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	4929      	ldr	r1, [pc, #164]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	4921      	ldr	r1, [pc, #132]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	491a      	ldr	r1, [pc, #104]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	4912      	ldr	r1, [pc, #72]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	490b      	ldr	r1, [pc, #44]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	4903      	ldr	r1, [pc, #12]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3748      	adds	r7, #72	; 0x48
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e09d      	b.n	8003072 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f46:	d009      	beq.n	8002f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
 8002f4e:	e005      	b.n	8002f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd fbe0 	bl	800073c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f9c:	d902      	bls.n	8002fa4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	e002      	b.n	8002faa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fb2:	d007      	beq.n	8002fc4 <HAL_SPI_Init+0xa0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fbc:	d002      	beq.n	8002fc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	ea42 0103 	orr.w	r1, r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	0c1b      	lsrs	r3, r3, #16
 8003020:	f003 0204 	and.w	r2, r3, #4
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003040:	ea42 0103 	orr.w	r1, r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003060:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e040      	b.n	800310e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003090:	2b00      	cmp	r3, #0
 8003092:	d106      	bne.n	80030a2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fd fc1f 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2224      	movs	r2, #36	; 0x24
 80030a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f8c1 	bl	8003240 <UART_SetConfig>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e022      	b.n	800310e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fa8b 	bl	80035ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fb12 	bl	8003730 <UART_CheckIdleState>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b08a      	sub	sp, #40	; 0x28
 800311a:	af02      	add	r7, sp, #8
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800312a:	2b20      	cmp	r3, #32
 800312c:	f040 8082 	bne.w	8003234 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_UART_Transmit+0x26>
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e07a      	b.n	8003236 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_UART_Transmit+0x38>
 800314a:	2302      	movs	r3, #2
 800314c:	e073      	b.n	8003236 <HAL_UART_Transmit+0x120>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2221      	movs	r2, #33	; 0x21
 8003162:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003164:	f7fd fcea 	bl	8000b3c <HAL_GetTick>
 8003168:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	88fa      	ldrh	r2, [r7, #6]
 8003176:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003182:	d108      	bne.n	8003196 <HAL_UART_Transmit+0x80>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d104      	bne.n	8003196 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	e003      	b.n	800319e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80031a6:	e02d      	b.n	8003204 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2200      	movs	r2, #0
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fb05 	bl	80037c2 <UART_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e039      	b.n	8003236 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10b      	bne.n	80031e0 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	881a      	ldrh	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d4:	b292      	uxth	r2, r2
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	3302      	adds	r3, #2
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e008      	b.n	80031f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b292      	uxth	r2, r2
 80031ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	3301      	adds	r3, #1
 80031f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1cb      	bne.n	80031a8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2200      	movs	r2, #0
 8003218:	2140      	movs	r1, #64	; 0x40
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fad1 	bl	80037c2 <UART_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e005      	b.n	8003236 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800326e:	f023 030c 	bic.w	r3, r3, #12
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	6979      	ldr	r1, [r7, #20]
 8003278:	430b      	orrs	r3, r1
 800327a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4aa8      	ldr	r2, [pc, #672]	; (800355c <UART_SetConfig+0x31c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d120      	bne.n	8003302 <UART_SetConfig+0xc2>
 80032c0:	4ba7      	ldr	r3, [pc, #668]	; (8003560 <UART_SetConfig+0x320>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d817      	bhi.n	80032fc <UART_SetConfig+0xbc>
 80032cc:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <UART_SetConfig+0x94>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	080032e5 	.word	0x080032e5
 80032d8:	080032f1 	.word	0x080032f1
 80032dc:	080032f7 	.word	0x080032f7
 80032e0:	080032eb 	.word	0x080032eb
 80032e4:	2301      	movs	r3, #1
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e0b5      	b.n	8003456 <UART_SetConfig+0x216>
 80032ea:	2302      	movs	r3, #2
 80032ec:	77fb      	strb	r3, [r7, #31]
 80032ee:	e0b2      	b.n	8003456 <UART_SetConfig+0x216>
 80032f0:	2304      	movs	r3, #4
 80032f2:	77fb      	strb	r3, [r7, #31]
 80032f4:	e0af      	b.n	8003456 <UART_SetConfig+0x216>
 80032f6:	2308      	movs	r3, #8
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e0ac      	b.n	8003456 <UART_SetConfig+0x216>
 80032fc:	2310      	movs	r3, #16
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e0a9      	b.n	8003456 <UART_SetConfig+0x216>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a97      	ldr	r2, [pc, #604]	; (8003564 <UART_SetConfig+0x324>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d124      	bne.n	8003356 <UART_SetConfig+0x116>
 800330c:	4b94      	ldr	r3, [pc, #592]	; (8003560 <UART_SetConfig+0x320>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003314:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003318:	d011      	beq.n	800333e <UART_SetConfig+0xfe>
 800331a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800331e:	d817      	bhi.n	8003350 <UART_SetConfig+0x110>
 8003320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003324:	d011      	beq.n	800334a <UART_SetConfig+0x10a>
 8003326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800332a:	d811      	bhi.n	8003350 <UART_SetConfig+0x110>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <UART_SetConfig+0xf8>
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d006      	beq.n	8003344 <UART_SetConfig+0x104>
 8003336:	e00b      	b.n	8003350 <UART_SetConfig+0x110>
 8003338:	2300      	movs	r3, #0
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	e08b      	b.n	8003456 <UART_SetConfig+0x216>
 800333e:	2302      	movs	r3, #2
 8003340:	77fb      	strb	r3, [r7, #31]
 8003342:	e088      	b.n	8003456 <UART_SetConfig+0x216>
 8003344:	2304      	movs	r3, #4
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e085      	b.n	8003456 <UART_SetConfig+0x216>
 800334a:	2308      	movs	r3, #8
 800334c:	77fb      	strb	r3, [r7, #31]
 800334e:	e082      	b.n	8003456 <UART_SetConfig+0x216>
 8003350:	2310      	movs	r3, #16
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	e07f      	b.n	8003456 <UART_SetConfig+0x216>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a83      	ldr	r2, [pc, #524]	; (8003568 <UART_SetConfig+0x328>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d124      	bne.n	80033aa <UART_SetConfig+0x16a>
 8003360:	4b7f      	ldr	r3, [pc, #508]	; (8003560 <UART_SetConfig+0x320>)
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003368:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800336c:	d011      	beq.n	8003392 <UART_SetConfig+0x152>
 800336e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003372:	d817      	bhi.n	80033a4 <UART_SetConfig+0x164>
 8003374:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003378:	d011      	beq.n	800339e <UART_SetConfig+0x15e>
 800337a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800337e:	d811      	bhi.n	80033a4 <UART_SetConfig+0x164>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <UART_SetConfig+0x14c>
 8003384:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003388:	d006      	beq.n	8003398 <UART_SetConfig+0x158>
 800338a:	e00b      	b.n	80033a4 <UART_SetConfig+0x164>
 800338c:	2300      	movs	r3, #0
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e061      	b.n	8003456 <UART_SetConfig+0x216>
 8003392:	2302      	movs	r3, #2
 8003394:	77fb      	strb	r3, [r7, #31]
 8003396:	e05e      	b.n	8003456 <UART_SetConfig+0x216>
 8003398:	2304      	movs	r3, #4
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e05b      	b.n	8003456 <UART_SetConfig+0x216>
 800339e:	2308      	movs	r3, #8
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e058      	b.n	8003456 <UART_SetConfig+0x216>
 80033a4:	2310      	movs	r3, #16
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e055      	b.n	8003456 <UART_SetConfig+0x216>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6f      	ldr	r2, [pc, #444]	; (800356c <UART_SetConfig+0x32c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d124      	bne.n	80033fe <UART_SetConfig+0x1be>
 80033b4:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <UART_SetConfig+0x320>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033c0:	d011      	beq.n	80033e6 <UART_SetConfig+0x1a6>
 80033c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033c6:	d817      	bhi.n	80033f8 <UART_SetConfig+0x1b8>
 80033c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033cc:	d011      	beq.n	80033f2 <UART_SetConfig+0x1b2>
 80033ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033d2:	d811      	bhi.n	80033f8 <UART_SetConfig+0x1b8>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <UART_SetConfig+0x1a0>
 80033d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033dc:	d006      	beq.n	80033ec <UART_SetConfig+0x1ac>
 80033de:	e00b      	b.n	80033f8 <UART_SetConfig+0x1b8>
 80033e0:	2300      	movs	r3, #0
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e037      	b.n	8003456 <UART_SetConfig+0x216>
 80033e6:	2302      	movs	r3, #2
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e034      	b.n	8003456 <UART_SetConfig+0x216>
 80033ec:	2304      	movs	r3, #4
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e031      	b.n	8003456 <UART_SetConfig+0x216>
 80033f2:	2308      	movs	r3, #8
 80033f4:	77fb      	strb	r3, [r7, #31]
 80033f6:	e02e      	b.n	8003456 <UART_SetConfig+0x216>
 80033f8:	2310      	movs	r3, #16
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e02b      	b.n	8003456 <UART_SetConfig+0x216>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a5b      	ldr	r2, [pc, #364]	; (8003570 <UART_SetConfig+0x330>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d124      	bne.n	8003452 <UART_SetConfig+0x212>
 8003408:	4b55      	ldr	r3, [pc, #340]	; (8003560 <UART_SetConfig+0x320>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003410:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003414:	d011      	beq.n	800343a <UART_SetConfig+0x1fa>
 8003416:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800341a:	d817      	bhi.n	800344c <UART_SetConfig+0x20c>
 800341c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003420:	d011      	beq.n	8003446 <UART_SetConfig+0x206>
 8003422:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003426:	d811      	bhi.n	800344c <UART_SetConfig+0x20c>
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <UART_SetConfig+0x1f4>
 800342c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003430:	d006      	beq.n	8003440 <UART_SetConfig+0x200>
 8003432:	e00b      	b.n	800344c <UART_SetConfig+0x20c>
 8003434:	2300      	movs	r3, #0
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e00d      	b.n	8003456 <UART_SetConfig+0x216>
 800343a:	2302      	movs	r3, #2
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e00a      	b.n	8003456 <UART_SetConfig+0x216>
 8003440:	2304      	movs	r3, #4
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e007      	b.n	8003456 <UART_SetConfig+0x216>
 8003446:	2308      	movs	r3, #8
 8003448:	77fb      	strb	r3, [r7, #31]
 800344a:	e004      	b.n	8003456 <UART_SetConfig+0x216>
 800344c:	2310      	movs	r3, #16
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e001      	b.n	8003456 <UART_SetConfig+0x216>
 8003452:	2310      	movs	r3, #16
 8003454:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345e:	d15c      	bne.n	800351a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003460:	7ffb      	ldrb	r3, [r7, #31]
 8003462:	2b08      	cmp	r3, #8
 8003464:	d827      	bhi.n	80034b6 <UART_SetConfig+0x276>
 8003466:	a201      	add	r2, pc, #4	; (adr r2, 800346c <UART_SetConfig+0x22c>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	08003491 	.word	0x08003491
 8003470:	08003499 	.word	0x08003499
 8003474:	080034a1 	.word	0x080034a1
 8003478:	080034b7 	.word	0x080034b7
 800347c:	080034a7 	.word	0x080034a7
 8003480:	080034b7 	.word	0x080034b7
 8003484:	080034b7 	.word	0x080034b7
 8003488:	080034b7 	.word	0x080034b7
 800348c:	080034af 	.word	0x080034af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003490:	f7ff fb54 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003494:	61b8      	str	r0, [r7, #24]
        break;
 8003496:	e013      	b.n	80034c0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003498:	f7ff fb72 	bl	8002b80 <HAL_RCC_GetPCLK2Freq>
 800349c:	61b8      	str	r0, [r7, #24]
        break;
 800349e:	e00f      	b.n	80034c0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a0:	4b34      	ldr	r3, [pc, #208]	; (8003574 <UART_SetConfig+0x334>)
 80034a2:	61bb      	str	r3, [r7, #24]
        break;
 80034a4:	e00c      	b.n	80034c0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034a6:	f7ff fad3 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 80034aa:	61b8      	str	r0, [r7, #24]
        break;
 80034ac:	e008      	b.n	80034c0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b2:	61bb      	str	r3, [r7, #24]
        break;
 80034b4:	e004      	b.n	80034c0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	77bb      	strb	r3, [r7, #30]
        break;
 80034be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8084 	beq.w	80035d0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	005a      	lsls	r2, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	441a      	add	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	b29b      	uxth	r3, r3
 80034de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	d916      	bls.n	8003514 <UART_SetConfig+0x2d4>
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ec:	d212      	bcs.n	8003514 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f023 030f 	bic.w	r3, r3, #15
 80034f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	b29a      	uxth	r2, r3
 8003504:	89fb      	ldrh	r3, [r7, #14]
 8003506:	4313      	orrs	r3, r2
 8003508:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	89fa      	ldrh	r2, [r7, #14]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	e05d      	b.n	80035d0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	77bb      	strb	r3, [r7, #30]
 8003518:	e05a      	b.n	80035d0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800351a:	7ffb      	ldrb	r3, [r7, #31]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d836      	bhi.n	800358e <UART_SetConfig+0x34e>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <UART_SetConfig+0x2e8>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800354d 	.word	0x0800354d
 800352c:	08003555 	.word	0x08003555
 8003530:	08003579 	.word	0x08003579
 8003534:	0800358f 	.word	0x0800358f
 8003538:	0800357f 	.word	0x0800357f
 800353c:	0800358f 	.word	0x0800358f
 8003540:	0800358f 	.word	0x0800358f
 8003544:	0800358f 	.word	0x0800358f
 8003548:	08003587 	.word	0x08003587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7ff faf6 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8003550:	61b8      	str	r0, [r7, #24]
        break;
 8003552:	e021      	b.n	8003598 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003554:	f7ff fb14 	bl	8002b80 <HAL_RCC_GetPCLK2Freq>
 8003558:	61b8      	str	r0, [r7, #24]
        break;
 800355a:	e01d      	b.n	8003598 <UART_SetConfig+0x358>
 800355c:	40013800 	.word	0x40013800
 8003560:	40021000 	.word	0x40021000
 8003564:	40004400 	.word	0x40004400
 8003568:	40004800 	.word	0x40004800
 800356c:	40004c00 	.word	0x40004c00
 8003570:	40005000 	.word	0x40005000
 8003574:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <UART_SetConfig+0x3a8>)
 800357a:	61bb      	str	r3, [r7, #24]
        break;
 800357c:	e00c      	b.n	8003598 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7ff fa67 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8003582:	61b8      	str	r0, [r7, #24]
        break;
 8003584:	e008      	b.n	8003598 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	61bb      	str	r3, [r7, #24]
        break;
 800358c:	e004      	b.n	8003598 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	77bb      	strb	r3, [r7, #30]
        break;
 8003596:	bf00      	nop
    }

    if (pclk != 0U)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d018      	beq.n	80035d0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	085a      	lsrs	r2, r3, #1
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	441a      	add	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b0f      	cmp	r3, #15
 80035b8:	d908      	bls.n	80035cc <UART_SetConfig+0x38c>
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d204      	bcs.n	80035cc <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	e001      	b.n	80035d0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	007a1200 	.word	0x007a1200

080035ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01a      	beq.n	8003702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ea:	d10a      	bne.n	8003702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af02      	add	r7, sp, #8
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003740:	f7fd f9fc 	bl	8000b3c <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b08      	cmp	r3, #8
 8003752:	d10e      	bne.n	8003772 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f82d 	bl	80037c2 <UART_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e023      	b.n	80037ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b04      	cmp	r3, #4
 800377e:	d10e      	bne.n	800379e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f817 	bl	80037c2 <UART_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e00d      	b.n	80037ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b09c      	sub	sp, #112	; 0x70
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d2:	e0a5      	b.n	8003920 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	f000 80a1 	beq.w	8003920 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037de:	f7fd f9ad 	bl	8000b3c <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d302      	bcc.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80037ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d13e      	bne.n	8003872 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003804:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003808:	667b      	str	r3, [r7, #100]	; 0x64
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003814:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003818:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e6      	bne.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3308      	adds	r3, #8
 800382c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	663b      	str	r3, [r7, #96]	; 0x60
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3308      	adds	r3, #8
 8003844:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003846:	64ba      	str	r2, [r7, #72]	; 0x48
 8003848:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800384c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e5      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e067      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d04f      	beq.n	8003920 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388e:	d147      	bne.n	8003920 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003898:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
 80038ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e6      	bne.n	800389a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3308      	adds	r3, #8
 80038d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	613b      	str	r3, [r7, #16]
   return(result);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3308      	adds	r3, #8
 80038ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038ec:	623a      	str	r2, [r7, #32]
 80038ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	69f9      	ldr	r1, [r7, #28]
 80038f2:	6a3a      	ldr	r2, [r7, #32]
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e5      	bne.n	80038cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e010      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4013      	ands	r3, r2
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	429a      	cmp	r2, r3
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	429a      	cmp	r2, r3
 800393c:	f43f af4a 	beq.w	80037d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3770      	adds	r7, #112	; 0x70
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800394a:	b480      	push	{r7}
 800394c:	b085      	sub	sp, #20
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003952:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003956:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	b29b      	uxth	r3, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	b29b      	uxth	r3, r3
 8003968:	4013      	ands	r3, r2
 800396a:	b29a      	uxth	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003980:	b084      	sub	sp, #16
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	f107 0014 	add.w	r0, r7, #20
 800398e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	b004      	add	sp, #16
 80039c0:	4770      	bx	lr
	...

080039c4 <__libc_init_array>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	4d0d      	ldr	r5, [pc, #52]	; (80039fc <__libc_init_array+0x38>)
 80039c8:	4c0d      	ldr	r4, [pc, #52]	; (8003a00 <__libc_init_array+0x3c>)
 80039ca:	1b64      	subs	r4, r4, r5
 80039cc:	10a4      	asrs	r4, r4, #2
 80039ce:	2600      	movs	r6, #0
 80039d0:	42a6      	cmp	r6, r4
 80039d2:	d109      	bne.n	80039e8 <__libc_init_array+0x24>
 80039d4:	4d0b      	ldr	r5, [pc, #44]	; (8003a04 <__libc_init_array+0x40>)
 80039d6:	4c0c      	ldr	r4, [pc, #48]	; (8003a08 <__libc_init_array+0x44>)
 80039d8:	f000 f820 	bl	8003a1c <_init>
 80039dc:	1b64      	subs	r4, r4, r5
 80039de:	10a4      	asrs	r4, r4, #2
 80039e0:	2600      	movs	r6, #0
 80039e2:	42a6      	cmp	r6, r4
 80039e4:	d105      	bne.n	80039f2 <__libc_init_array+0x2e>
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
 80039e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ec:	4798      	blx	r3
 80039ee:	3601      	adds	r6, #1
 80039f0:	e7ee      	b.n	80039d0 <__libc_init_array+0xc>
 80039f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f6:	4798      	blx	r3
 80039f8:	3601      	adds	r6, #1
 80039fa:	e7f2      	b.n	80039e2 <__libc_init_array+0x1e>
 80039fc:	08003b38 	.word	0x08003b38
 8003a00:	08003b38 	.word	0x08003b38
 8003a04:	08003b38 	.word	0x08003b38
 8003a08:	08003b3c 	.word	0x08003b3c

08003a0c <memset>:
 8003a0c:	4402      	add	r2, r0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d100      	bne.n	8003a16 <memset+0xa>
 8003a14:	4770      	bx	lr
 8003a16:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1a:	e7f9      	b.n	8003a10 <memset+0x4>

08003a1c <_init>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr

08003a28 <_fini>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr


tmp102_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000382c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a1c  08003a1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a1c  08003a1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a1c  08003a1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000048c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000498  20000498  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e26  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027c2  00000000  00000000  00031e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  00034628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca0  00000000  00000000  000353e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de71  00000000  00000000  00036080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001379d  00000000  00000000  00053ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afc00  00000000  00000000  0006768e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011728e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003808  00000000  00000000  001172e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800399c 	.word	0x0800399c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800399c 	.word	0x0800399c

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001de:	4b37      	ldr	r3, [pc, #220]	; (80002bc <MX_GPIO_Init+0xf4>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a36      	ldr	r2, [pc, #216]	; (80002bc <MX_GPIO_Init+0xf4>)
 80001e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b34      	ldr	r3, [pc, #208]	; (80002bc <MX_GPIO_Init+0xf4>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f6:	4b31      	ldr	r3, [pc, #196]	; (80002bc <MX_GPIO_Init+0xf4>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a30      	ldr	r2, [pc, #192]	; (80002bc <MX_GPIO_Init+0xf4>)
 80001fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b2e      	ldr	r3, [pc, #184]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800020e:	4b2b      	ldr	r3, [pc, #172]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a2a      	ldr	r2, [pc, #168]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b28      	ldr	r3, [pc, #160]	; (80002bc <MX_GPIO_Init+0xf4>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4b25      	ldr	r3, [pc, #148]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a24      	ldr	r2, [pc, #144]	; (80002bc <MX_GPIO_Init+0xf4>)
 800022c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b22      	ldr	r3, [pc, #136]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <MX_GPIO_Init+0xf4>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000256:	2200      	movs	r2, #0
 8000258:	f64f 7108 	movw	r1, #65288	; 0xff08
 800025c:	4818      	ldr	r0, [pc, #96]	; (80002c0 <MX_GPIO_Init+0xf8>)
 800025e:	f000 fe99 	bl	8000f94 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000262:	2337      	movs	r3, #55	; 0x37
 8000264:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000266:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800026a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026c:	2300      	movs	r3, #0
 800026e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	4619      	mov	r1, r3
 8000276:	4812      	ldr	r0, [pc, #72]	; (80002c0 <MX_GPIO_Init+0xf8>)
 8000278:	f000 fd12 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800027c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000280:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000282:	2301      	movs	r3, #1
 8000284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800028a:	2300      	movs	r3, #0
 800028c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800028e:	f107 0314 	add.w	r3, r7, #20
 8000292:	4619      	mov	r1, r3
 8000294:	480a      	ldr	r0, [pc, #40]	; (80002c0 <MX_GPIO_Init+0xf8>)
 8000296:	f000 fd03 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800029a:	2301      	movs	r3, #1
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800029e:	2300      	movs	r3, #0
 80002a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	4619      	mov	r1, r3
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f000 fcf6 	bl	8000ca0 <HAL_GPIO_Init>

}
 80002b4:	bf00      	nop
 80002b6:	3728      	adds	r7, #40	; 0x28
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40021000 	.word	0x40021000
 80002c0:	48001000 	.word	0x48001000

080002c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c8:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <MX_I2C1_Init+0x74>)
 80002ca:	4a1c      	ldr	r2, [pc, #112]	; (800033c <MX_I2C1_Init+0x78>)
 80002cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002ce:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <MX_I2C1_Init+0x74>)
 80002d0:	4a1b      	ldr	r2, [pc, #108]	; (8000340 <MX_I2C1_Init+0x7c>)
 80002d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <MX_I2C1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <MX_I2C1_Init+0x74>)
 80002dc:	2201      	movs	r2, #1
 80002de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <MX_I2C1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_I2C1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002fe:	480e      	ldr	r0, [pc, #56]	; (8000338 <MX_I2C1_Init+0x74>)
 8000300:	f000 fe60 	bl	8000fc4 <HAL_I2C_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800030a:	f000 f993 	bl	8000634 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800030e:	2100      	movs	r1, #0
 8000310:	4809      	ldr	r0, [pc, #36]	; (8000338 <MX_I2C1_Init+0x74>)
 8000312:	f001 f82d 	bl	8001370 <HAL_I2CEx_ConfigAnalogFilter>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800031c:	f000 f98a 	bl	8000634 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000320:	2100      	movs	r1, #0
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_I2C1_Init+0x74>)
 8000324:	f001 f86f 	bl	8001406 <HAL_I2CEx_ConfigDigitalFilter>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800032e:	f000 f981 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000028 	.word	0x20000028
 800033c:	40005400 	.word	0x40005400
 8000340:	2000090e 	.word	0x2000090e

08000344 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000348:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_I2C2_Init+0x74>)
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <MX_I2C2_Init+0x78>)
 800034c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <MX_I2C2_Init+0x7c>)
 8000352:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000354:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <MX_I2C2_Init+0x74>)
 800035c:	2201      	movs	r2, #1
 800035e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_I2C2_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_I2C2_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800037e:	480e      	ldr	r0, [pc, #56]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000380:	f000 fe20 	bl	8000fc4 <HAL_I2C_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800038a:	f000 f953 	bl	8000634 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038e:	2100      	movs	r1, #0
 8000390:	4809      	ldr	r0, [pc, #36]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000392:	f000 ffed 	bl	8001370 <HAL_I2CEx_ConfigAnalogFilter>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800039c:	f000 f94a 	bl	8000634 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003a0:	2100      	movs	r1, #0
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_I2C2_Init+0x74>)
 80003a4:	f001 f82f 	bl	8001406 <HAL_I2CEx_ConfigDigitalFilter>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f941 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000074 	.word	0x20000074
 80003bc:	40005800 	.word	0x40005800
 80003c0:	2000090e 	.word	0x2000090e

080003c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08c      	sub	sp, #48	; 0x30
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003cc:	f107 031c 	add.w	r3, r7, #28
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]
 80003d8:	60da      	str	r2, [r3, #12]
 80003da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a2f      	ldr	r2, [pc, #188]	; (80004a0 <HAL_I2C_MspInit+0xdc>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d128      	bne.n	8000438 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e6:	4b2f      	ldr	r3, [pc, #188]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a2e      	ldr	r2, [pc, #184]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 80003ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b2c      	ldr	r3, [pc, #176]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003fa:	61bb      	str	r3, [r7, #24]
 80003fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80003fe:	23c0      	movs	r3, #192	; 0xc0
 8000400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000402:	2312      	movs	r3, #18
 8000404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000406:	2301      	movs	r3, #1
 8000408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800040a:	2303      	movs	r3, #3
 800040c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800040e:	2304      	movs	r3, #4
 8000410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000412:	f107 031c 	add.w	r3, r7, #28
 8000416:	4619      	mov	r1, r3
 8000418:	4823      	ldr	r0, [pc, #140]	; (80004a8 <HAL_I2C_MspInit+0xe4>)
 800041a:	f000 fc41 	bl	8000ca0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	4a20      	ldr	r2, [pc, #128]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000428:	61d3      	str	r3, [r2, #28]
 800042a:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000436:	e02e      	b.n	8000496 <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C2)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a1b      	ldr	r2, [pc, #108]	; (80004ac <HAL_I2C_MspInit+0xe8>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d129      	bne.n	8000496 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a17      	ldr	r2, [pc, #92]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800045a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800045e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000460:	2312      	movs	r3, #18
 8000462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000468:	2303      	movs	r3, #3
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800046c:	2304      	movs	r3, #4
 800046e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	f107 031c 	add.w	r3, r7, #28
 8000474:	4619      	mov	r1, r3
 8000476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047a:	f000 fc11 	bl	8000ca0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
}
 8000496:	bf00      	nop
 8000498:	3730      	adds	r7, #48	; 0x30
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40005400 	.word	0x40005400
 80004a4:	40021000 	.word	0x40021000
 80004a8:	48000400 	.word	0x48000400
 80004ac:	40005800 	.word	0x40005800

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b5b0      	push	{r4, r5, r7, lr}
 80004b2:	b090      	sub	sp, #64	; 0x40
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 faa7 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f855 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f7ff fe83 	bl	80001c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c2:	f7ff feff 	bl	80002c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004c6:	f000 f8bb 	bl	8000640 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80004ca:	f000 fa0d 	bl	80008e8 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 80004ce:	f7ff ff39 	bl	8000344 <MX_I2C2_Init>
  MX_UART4_Init();
 80004d2:	f000 f995 	bl	8000800 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_MspInit(&huart4);
 80004d6:	4820      	ldr	r0, [pc, #128]	; (8000558 <main+0xa8>)
 80004d8:	f000 f9c2 	bl	8000860 <HAL_UART_MspInit>
  HAL_I2C_MspInit(&hi2c2);	// initializes the GPIO I2C pins (SDA and SCL), initializes I2C clock
 80004dc:	481f      	ldr	r0, [pc, #124]	; (800055c <main+0xac>)
 80004de:	f7ff ff71 	bl	80003c4 <HAL_I2C_MspInit>

  uint8_t MSG[50] = {'\0'};
 80004e2:	2300      	movs	r3, #0
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	222e      	movs	r2, #46	; 0x2e
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f003 fa4d 	bl	800398c <memset>
  strcpy(MSG, "Initialized UART\n");
 80004f2:	463b      	mov	r3, r7
 80004f4:	4a1a      	ldr	r2, [pc, #104]	; (8000560 <main+0xb0>)
 80004f6:	461c      	mov	r4, r3
 80004f8:	4615      	mov	r5, r2
 80004fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004fe:	682b      	ldr	r3, [r5, #0]
 8000500:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart4, MSG, sizeof(MSG), 100);
 8000502:	4639      	mov	r1, r7
 8000504:	2364      	movs	r3, #100	; 0x64
 8000506:	2232      	movs	r2, #50	; 0x32
 8000508:	4813      	ldr	r0, [pc, #76]	; (8000558 <main+0xa8>)
 800050a:	f002 fdc4 	bl	8003096 <HAL_UART_Transmit>

  uint16_t tmp102Address = 0x48 << 1;	// required left-shift by 1 by the HAL_I2C_IsDeviceReady
 800050e:	2390      	movs	r3, #144	; 0x90
 8000510:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint32_t trials = 1;
 8000512:	2301      	movs	r3, #1
 8000514:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t timeout = 1000; // milliseconds
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	637b      	str	r3, [r7, #52]	; 0x34

  // TODO figure out why changing the tmp102 address to other available addresses doesn't work.
  if(HAL_I2C_IsDeviceReady(&hi2c2, tmp102Address, trials, timeout) != HAL_OK)
 800051c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800051e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000522:	480e      	ldr	r0, [pc, #56]	; (800055c <main+0xac>)
 8000524:	f000 fddd 	bl	80010e2 <HAL_I2C_IsDeviceReady>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <main+0x84>
  {
	  Error_Handler();
 800052e:	f000 f881 	bl	8000634 <Error_Handler>
 8000532:	e00f      	b.n	8000554 <main+0xa4>
  }
  else
  {
	   strcpy(MSG,"TMP102 sensor ACK received\n");
 8000534:	463b      	mov	r3, r7
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <main+0xb4>)
 8000538:	461c      	mov	r4, r3
 800053a:	4615      	mov	r5, r2
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	   HAL_UART_Transmit(&huart4, MSG, sizeof(MSG), 100);
 8000548:	4639      	mov	r1, r7
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	2232      	movs	r2, #50	; 0x32
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <main+0xa8>)
 8000550:	f002 fda1 	bl	8003096 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0xa4>
 8000556:	bf00      	nop
 8000558:	20000124 	.word	0x20000124
 800055c:	20000074 	.word	0x20000074
 8000560:	080039b4 	.word	0x080039b4
 8000564:	080039c8 	.word	0x080039c8

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b09e      	sub	sp, #120	; 0x78
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000572:	2228      	movs	r2, #40	; 0x28
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fa08 	bl	800398c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	223c      	movs	r2, #60	; 0x3c
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 f9fa 	bl	800398c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000598:	2303      	movs	r3, #3
 800059a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800059c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a6:	2301      	movs	r3, #1
 80005a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2310      	movs	r3, #16
 80005ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005bc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f84a 	bl	800165c <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005ce:	f000 f831 	bl	8000634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ec:	2101      	movs	r1, #1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 f872 	bl	80026d8 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fa:	f000 f81b 	bl	8000634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <SystemClock_Config+0xc8>)
 8000600:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fa94 	bl	8002b44 <HAL_RCCEx_PeriphCLKConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000622:	f000 f807 	bl	8000634 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3778      	adds	r7, #120	; 0x78
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	00020068 	.word	0x00020068

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
}
 800063a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063c:	e7fe      	b.n	800063c <Error_Handler+0x8>
	...

08000640 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <MX_SPI1_Init+0x78>)
 8000648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_SPI1_Init+0x74>)
 800064c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_SPI1_Init+0x74>)
 800065a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800065e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_SPI1_Init+0x74>)
 800066e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000672:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000676:	2208      	movs	r2, #8
 8000678:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_SPI1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_SPI1_Init+0x74>)
 800068e:	2207      	movs	r2, #7
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_SPI1_Init+0x74>)
 800069a:	2208      	movs	r2, #8
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_SPI1_Init+0x74>)
 80006a0:	f002 fc00 	bl	8002ea4 <HAL_SPI_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f7ff ffc3 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000c0 	.word	0x200000c0
 80006b8:	40013000 	.word	0x40013000

080006bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a17      	ldr	r2, [pc, #92]	; (8000738 <HAL_SPI_MspInit+0x7c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d128      	bne.n	8000730 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <HAL_SPI_MspInit+0x80>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	4a16      	ldr	r2, [pc, #88]	; (800073c <HAL_SPI_MspInit+0x80>)
 80006e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006e8:	6193      	str	r3, [r2, #24]
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <HAL_SPI_MspInit+0x80>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <HAL_SPI_MspInit+0x80>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <HAL_SPI_MspInit+0x80>)
 80006fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000700:	6153      	str	r3, [r2, #20]
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_SPI_MspInit+0x80>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800070e:	23e0      	movs	r3, #224	; 0xe0
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800071e:	2305      	movs	r3, #5
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f000 fab8 	bl	8000ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	; 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40013000 	.word	0x40013000
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x44>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_MspInit+0x44>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x44>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x44>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_MspInit+0x44>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_MspInit+0x44>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000776:	2007      	movs	r0, #7
 8000778:	f000 fa5e 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d4:	f000 f95e 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}

080007dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <SystemInit+0x20>)
 80007e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e6:	4a05      	ldr	r2, [pc, #20]	; (80007fc <SystemInit+0x20>)
 80007e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_UART4_Init+0x58>)
 8000806:	4a15      	ldr	r2, [pc, #84]	; (800085c <MX_UART4_Init+0x5c>)
 8000808:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_UART4_Init+0x58>)
 800080c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000810:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_UART4_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_UART4_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_UART4_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_UART4_Init+0x58>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_UART4_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_UART4_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_UART4_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_UART4_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_UART4_Init+0x58>)
 8000844:	f002 fbd9 	bl	8002ffa <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800084e:	f7ff fef1 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000124 	.word	0x20000124
 800085c:	40004c00 	.word	0x40004c00

08000860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a17      	ldr	r2, [pc, #92]	; (80008dc <HAL_UART_MspInit+0x7c>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d128      	bne.n	80008d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <HAL_UART_MspInit+0x80>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <HAL_UART_MspInit+0x80>)
 8000888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <HAL_UART_MspInit+0x80>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_UART_MspInit+0x80>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <HAL_UART_MspInit+0x80>)
 80008a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008a4:	6153      	str	r3, [r2, #20]
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <HAL_UART_MspInit+0x80>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80008c4:	2305      	movs	r3, #5
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <HAL_UART_MspInit+0x84>)
 80008d0:	f000 f9e6 	bl	8000ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40004c00 	.word	0x40004c00
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000800 	.word	0x48000800

080008e8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <MX_USB_PCD_Init+0x3c>)
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <MX_USB_PCD_Init+0x40>)
 80008f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USB_PCD_Init+0x3c>)
 80008f4:	2208      	movs	r2, #8
 80008f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_USB_PCD_Init+0x3c>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USB_PCD_Init+0x3c>)
 8000900:	2202      	movs	r2, #2
 8000902:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_USB_PCD_Init+0x3c>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USB_PCD_Init+0x3c>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_USB_PCD_Init+0x3c>)
 8000912:	f000 fdc4 	bl	800149e <HAL_PCD_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800091c:	f7ff fe8a 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200001a8 	.word	0x200001a8
 8000928:	40005c00 	.word	0x40005c00

0800092c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a18      	ldr	r2, [pc, #96]	; (80009ac <HAL_PCD_MspInit+0x80>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d129      	bne.n	80009a2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_PCD_MspInit+0x84>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <HAL_PCD_MspInit+0x84>)
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_PCD_MspInit+0x84>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000966:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000978:	230e      	movs	r3, #14
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f000 f98b 	bl	8000ca0 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_PCD_MspInit+0x84>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_PCD_MspInit+0x84>)
 8000990:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000994:	61d3      	str	r3, [r2, #28]
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_PCD_MspInit+0x84>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40005c00 	.word	0x40005c00
 80009b0:	40021000 	.word	0x40021000

080009b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ba:	490e      	ldr	r1, [pc, #56]	; (80009f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <LoopForever+0xe>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d0:	4c0b      	ldr	r4, [pc, #44]	; (8000a00 <LoopForever+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009de:	f7ff fefd 	bl	80007dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e2:	f002 ffaf 	bl	8003944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009e6:	f7ff fd63 	bl	80004b0 <main>

080009ea <LoopForever>:

LoopForever:
    b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f8:	08003a24 	.word	0x08003a24
  ldr r2, =_sbss
 80009fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a00:	20000498 	.word	0x20000498

08000a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_2_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_Init+0x28>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_Init+0x28>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f90d 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 f808 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff fe8c 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40022000 	.word	0x40022000

08000a34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x54>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x58>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f917 	bl	8000c86 <HAL_SYSTICK_Config>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00e      	b.n	8000a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d80a      	bhi.n	8000a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f000 f8ed 	bl	8000c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_InitTick+0x5c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000494 	.word	0x20000494

08000abc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000494 	.word	0x20000494

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff47 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff5c 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffb0 	bl	8000bf4 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cae:	e154      	b.n	8000f5a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 8146 	beq.w	8000f54 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d005      	beq.n	8000ce0 <HAL_GPIO_Init+0x40>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d130      	bne.n	8000d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d16:	2201      	movs	r2, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	f003 0201 	and.w	r2, r3, #1
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d017      	beq.n	8000d7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d123      	bne.n	8000dd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	6939      	ldr	r1, [r7, #16]
 8000dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0203 	and.w	r2, r3, #3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80a0 	beq.w	8000f54 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <HAL_GPIO_Init+0x2d8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a57      	ldr	r2, [pc, #348]	; (8000f78 <HAL_GPIO_Init+0x2d8>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b55      	ldr	r3, [pc, #340]	; (8000f78 <HAL_GPIO_Init+0x2d8>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e2c:	4a53      	ldr	r2, [pc, #332]	; (8000f7c <HAL_GPIO_Init+0x2dc>)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e56:	d019      	beq.n	8000e8c <HAL_GPIO_Init+0x1ec>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a49      	ldr	r2, [pc, #292]	; (8000f80 <HAL_GPIO_Init+0x2e0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d013      	beq.n	8000e88 <HAL_GPIO_Init+0x1e8>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a48      	ldr	r2, [pc, #288]	; (8000f84 <HAL_GPIO_Init+0x2e4>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d00d      	beq.n	8000e84 <HAL_GPIO_Init+0x1e4>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a47      	ldr	r2, [pc, #284]	; (8000f88 <HAL_GPIO_Init+0x2e8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d007      	beq.n	8000e80 <HAL_GPIO_Init+0x1e0>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a46      	ldr	r2, [pc, #280]	; (8000f8c <HAL_GPIO_Init+0x2ec>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d101      	bne.n	8000e7c <HAL_GPIO_Init+0x1dc>
 8000e78:	2304      	movs	r3, #4
 8000e7a:	e008      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	e006      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e80:	2303      	movs	r3, #3
 8000e82:	e004      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e002      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	f002 0203 	and.w	r2, r2, #3
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	4093      	lsls	r3, r2
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e9e:	4937      	ldr	r1, [pc, #220]	; (8000f7c <HAL_GPIO_Init+0x2dc>)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eac:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ed0:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ed6:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000efa:	4a25      	ldr	r2, [pc, #148]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f00:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f24:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa22 f303 	lsr.w	r3, r2, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f47f aea3 	bne.w	8000cb0 <HAL_GPIO_Init+0x10>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	48000400 	.word	0x48000400
 8000f84:	48000800 	.word	0x48000800
 8000f88:	48000c00 	.word	0x48000c00
 8000f8c:	48001000 	.word	0x48001000
 8000f90:	40010400 	.word	0x40010400

08000f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa4:	787b      	ldrb	r3, [r7, #1]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e081      	b.n	80010da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d106      	bne.n	8000ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff f9ea 	bl	80003c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2224      	movs	r2, #36	; 0x24
 8000ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001014:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001024:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d107      	bne.n	800103e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	e006      	b.n	800104c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800104a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d104      	bne.n	800105e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800105c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800106c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001070:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001080:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691a      	ldr	r2, [r3, #16]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69d9      	ldr	r1, [r3, #28]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1a      	ldr	r2, [r3, #32]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2220      	movs	r2, #32
 80010c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b08a      	sub	sp, #40	; 0x28
 80010e6:	af02      	add	r7, sp, #8
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	460b      	mov	r3, r1
 80010f0:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b20      	cmp	r3, #32
 8001100:	f040 80f1 	bne.w	80012e6 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800110e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001112:	d101      	bne.n	8001118 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001114:	2302      	movs	r3, #2
 8001116:	e0e7      	b.n	80012e8 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_I2C_IsDeviceReady+0x44>
 8001122:	2302      	movs	r3, #2
 8001124:	e0e0      	b.n	80012e8 <HAL_I2C_IsDeviceReady+0x206>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2224      	movs	r2, #36	; 0x24
 8001132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d107      	bne.n	8001154 <HAL_I2C_IsDeviceReady+0x72>
 8001144:	897b      	ldrh	r3, [r7, #10]
 8001146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800114a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800114e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001152:	e004      	b.n	800115e <HAL_I2C_IsDeviceReady+0x7c>
 8001154:	897b      	ldrh	r3, [r7, #10]
 8001156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800115a:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001164:	f7ff fcaa 	bl	8000abc <HAL_GetTick>
 8001168:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0320 	and.w	r3, r3, #32
 8001174:	2b20      	cmp	r3, #32
 8001176:	bf0c      	ite	eq
 8001178:	2301      	moveq	r3, #1
 800117a:	2300      	movne	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	2b10      	cmp	r3, #16
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001196:	e034      	b.n	8001202 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119e:	d01a      	beq.n	80011d6 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80011a0:	f7ff fc8c 	bl	8000abc <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d302      	bcc.n	80011b6 <HAL_I2C_IsDeviceReady+0xd4>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10f      	bne.n	80011d6 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2220      	movs	r2, #32
 80011ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f043 0220 	orr.w	r2, r3, #32
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e088      	b.n	80012e8 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0320 	and.w	r3, r3, #32
 80011e0:	2b20      	cmp	r3, #32
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	bf0c      	ite	eq
 80011fa:	2301      	moveq	r3, #1
 80011fc:	2300      	movne	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001202:	7ffb      	ldrb	r3, [r7, #31]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <HAL_I2C_IsDeviceReady+0x12c>
 8001208:	7fbb      	ldrb	r3, [r7, #30]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0c4      	beq.n	8001198 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	2b10      	cmp	r3, #16
 800121a:	d01a      	beq.n	8001252 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	2120      	movs	r1, #32
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f000 f862 	bl	80012f0 <I2C_WaitOnFlagUntilTimeout>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e058      	b.n	80012e8 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2220      	movs	r2, #32
 800123c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2220      	movs	r2, #32
 8001242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e04a      	b.n	80012e8 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	2120      	movs	r1, #32
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 f847 	bl	80012f0 <I2C_WaitOnFlagUntilTimeout>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e03d      	b.n	80012e8 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2210      	movs	r2, #16
 8001272:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2220      	movs	r2, #32
 800127a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	d118      	bne.n	80012b6 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001292:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2200      	movs	r2, #0
 800129c:	2120      	movs	r1, #32
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 f826 	bl	80012f0 <I2C_WaitOnFlagUntilTimeout>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e01c      	b.n	80012e8 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2220      	movs	r2, #32
 80012b4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f63f af3b 	bhi.w	800113c <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2220      	movs	r2, #32
 80012ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f043 0220 	orr.w	r2, r3, #32
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80012e6:	2302      	movs	r3, #2
  }
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001300:	e022      	b.n	8001348 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001308:	d01e      	beq.n	8001348 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800130a:	f7ff fbd7 	bl	8000abc <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d302      	bcc.n	8001320 <I2C_WaitOnFlagUntilTimeout+0x30>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d113      	bne.n	8001348 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001324:	f043 0220 	orr.w	r2, r3, #32
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2220      	movs	r2, #32
 8001330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e00f      	b.n	8001368 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4013      	ands	r3, r2
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	429a      	cmp	r2, r3
 8001356:	bf0c      	ite	eq
 8001358:	2301      	moveq	r3, #1
 800135a:	2300      	movne	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	429a      	cmp	r2, r3
 8001364:	d0cd      	beq.n	8001302 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b20      	cmp	r3, #32
 8001384:	d138      	bne.n	80013f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001390:	2302      	movs	r3, #2
 8001392:	e032      	b.n	80013fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2224      	movs	r2, #36	; 0x24
 80013a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0201 	orr.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2220      	movs	r2, #32
 80013e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e000      	b.n	80013fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013f8:	2302      	movs	r3, #2
  }
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b20      	cmp	r3, #32
 800141a:	d139      	bne.n	8001490 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001426:	2302      	movs	r3, #2
 8001428:	e033      	b.n	8001492 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2224      	movs	r2, #36	; 0x24
 8001436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001458:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4313      	orrs	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0201 	orr.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2220      	movs	r2, #32
 8001480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	e000      	b.n	8001492 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001490:	2302      	movs	r3, #2
  }
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800149e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a0:	b08b      	sub	sp, #44	; 0x2c
 80014a2:	af06      	add	r7, sp, #24
 80014a4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0d0      	b.n	8001652 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d106      	bne.n	80014ca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fa31 	bl	800092c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 f9f7 	bl	80038ca <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	e04c      	b.n	800157c <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3301      	adds	r3, #1
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	b298      	uxth	r0, r3
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	440b      	add	r3, r1
 800151e:	3336      	adds	r3, #54	; 0x36
 8001520:	4602      	mov	r2, r0
 8001522:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	3303      	adds	r3, #3
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	3338      	adds	r3, #56	; 0x38
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	333c      	adds	r3, #60	; 0x3c
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	3340      	adds	r3, #64	; 0x40
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	3301      	adds	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	d3ad      	bcc.n	80014e2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	e044      	b.n	8001616 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	440b      	add	r3, r1
 800159a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	440b      	add	r3, r1
 80015b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	440b      	add	r3, r1
 8001608:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	3301      	adds	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	d3b5      	bcc.n	800158c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	687e      	ldr	r6, [r7, #4]
 8001628:	466d      	mov	r5, sp
 800162a:	f106 0410 	add.w	r4, r6, #16
 800162e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001632:	6823      	ldr	r3, [r4, #0]
 8001634:	602b      	str	r3, [r5, #0]
 8001636:	1d33      	adds	r3, r6, #4
 8001638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163a:	6838      	ldr	r0, [r7, #0]
 800163c:	f002 f960 	bl	8003900 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800165c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001662:	af00      	add	r7, sp, #0
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800166c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	f001 b823 	b.w	80026c8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001686:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 817d 	beq.w	8001992 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001698:	4bbc      	ldr	r3, [pc, #752]	; (800198c <HAL_RCC_OscConfig+0x330>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d00c      	beq.n	80016be <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016a4:	4bb9      	ldr	r3, [pc, #740]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d15c      	bne.n	800176a <HAL_RCC_OscConfig+0x10e>
 80016b0:	4bb6      	ldr	r3, [pc, #728]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016bc:	d155      	bne.n	800176a <HAL_RCC_OscConfig+0x10e>
 80016be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80016ca:	fa93 f3a3 	rbit	r3, r3
 80016ce:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016d2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	095b      	lsrs	r3, r3, #5
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d102      	bne.n	80016f0 <HAL_RCC_OscConfig+0x94>
 80016ea:	4ba8      	ldr	r3, [pc, #672]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	e015      	b.n	800171c <HAL_RCC_OscConfig+0xc0>
 80016f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001708:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800170c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001718:	4b9c      	ldr	r3, [pc, #624]	; (800198c <HAL_RCC_OscConfig+0x330>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001720:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001724:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001728:	fa92 f2a2 	rbit	r2, r2
 800172c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001730:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001734:	fab2 f282 	clz	r2, r2
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	f042 0220 	orr.w	r2, r2, #32
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	f002 021f 	and.w	r2, r2, #31
 8001744:	2101      	movs	r1, #1
 8001746:	fa01 f202 	lsl.w	r2, r1, r2
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 811f 	beq.w	8001990 <HAL_RCC_OscConfig+0x334>
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f040 8116 	bne.w	8001990 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	f000 bfaf 	b.w	80026c8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x12e>
 800177c:	4b83      	ldr	r3, [pc, #524]	; (800198c <HAL_RCC_OscConfig+0x330>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a82      	ldr	r2, [pc, #520]	; (800198c <HAL_RCC_OscConfig+0x330>)
 8001782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e036      	b.n	80017f8 <HAL_RCC_OscConfig+0x19c>
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x158>
 800179a:	4b7c      	ldr	r3, [pc, #496]	; (800198c <HAL_RCC_OscConfig+0x330>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a7b      	ldr	r2, [pc, #492]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80017a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b79      	ldr	r3, [pc, #484]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a78      	ldr	r2, [pc, #480]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80017ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e021      	b.n	80017f8 <HAL_RCC_OscConfig+0x19c>
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x184>
 80017c6:	4b71      	ldr	r3, [pc, #452]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a70      	ldr	r2, [pc, #448]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b6e      	ldr	r3, [pc, #440]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6d      	ldr	r2, [pc, #436]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80017d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0x19c>
 80017e0:	4b6a      	ldr	r3, [pc, #424]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a69      	ldr	r2, [pc, #420]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b67      	ldr	r3, [pc, #412]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a66      	ldr	r2, [pc, #408]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017f8:	4b64      	ldr	r3, [pc, #400]	; (800198c <HAL_RCC_OscConfig+0x330>)
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	f023 020f 	bic.w	r2, r3, #15
 8001800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001804:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	495f      	ldr	r1, [pc, #380]	; (800198c <HAL_RCC_OscConfig+0x330>)
 800180e:	4313      	orrs	r3, r2
 8001810:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d059      	beq.n	80018d6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff f94b 	bl	8000abc <HAL_GetTick>
 8001826:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff f946 	bl	8000abc <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d902      	bls.n	8001842 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	f000 bf43 	b.w	80026c8 <HAL_RCC_OscConfig+0x106c>
 8001842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001846:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001856:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	095b      	lsrs	r3, r3, #5
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d102      	bne.n	8001874 <HAL_RCC_OscConfig+0x218>
 800186e:	4b47      	ldr	r3, [pc, #284]	; (800198c <HAL_RCC_OscConfig+0x330>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	e015      	b.n	80018a0 <HAL_RCC_OscConfig+0x244>
 8001874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001878:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001890:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800189c:	4b3b      	ldr	r3, [pc, #236]	; (800198c <HAL_RCC_OscConfig+0x330>)
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80018a8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018ac:	fa92 f2a2 	rbit	r2, r2
 80018b0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80018b4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80018b8:	fab2 f282 	clz	r2, r2
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	f042 0220 	orr.w	r2, r2, #32
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	f002 021f 	and.w	r2, r2, #31
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ab      	beq.n	800182c <HAL_RCC_OscConfig+0x1d0>
 80018d4:	e05d      	b.n	8001992 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff f8f1 	bl	8000abc <HAL_GetTick>
 80018da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff f8ec 	bl	8000abc <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b64      	cmp	r3, #100	; 0x64
 80018ee:	d902      	bls.n	80018f6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	f000 bee9 	b.w	80026c8 <HAL_RCC_OscConfig+0x106c>
 80018f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018fa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800190a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	095b      	lsrs	r3, r3, #5
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d102      	bne.n	8001928 <HAL_RCC_OscConfig+0x2cc>
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_RCC_OscConfig+0x330>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	e015      	b.n	8001954 <HAL_RCC_OscConfig+0x2f8>
 8001928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800192c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800193c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001940:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001944:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_RCC_OscConfig+0x330>)
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001958:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800195c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001960:	fa92 f2a2 	rbit	r2, r2
 8001964:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001968:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800196c:	fab2 f282 	clz	r2, r2
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f042 0220 	orr.w	r2, r2, #32
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	f002 021f 	and.w	r2, r2, #31
 800197c:	2101      	movs	r1, #1
 800197e:	fa01 f202 	lsl.w	r2, r1, r2
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ab      	bne.n	80018e0 <HAL_RCC_OscConfig+0x284>
 8001988:	e003      	b.n	8001992 <HAL_RCC_OscConfig+0x336>
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 817d 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019a8:	4ba6      	ldr	r3, [pc, #664]	; (8001c44 <HAL_RCC_OscConfig+0x5e8>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00b      	beq.n	80019cc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019b4:	4ba3      	ldr	r3, [pc, #652]	; (8001c44 <HAL_RCC_OscConfig+0x5e8>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d172      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x44a>
 80019c0:	4ba0      	ldr	r3, [pc, #640]	; (8001c44 <HAL_RCC_OscConfig+0x5e8>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d16c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x44a>
 80019cc:	2302      	movs	r3, #2
 80019ce:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019d6:	fa93 f3a3 	rbit	r3, r3
 80019da:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80019de:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	095b      	lsrs	r3, r3, #5
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d102      	bne.n	80019fc <HAL_RCC_OscConfig+0x3a0>
 80019f6:	4b93      	ldr	r3, [pc, #588]	; (8001c44 <HAL_RCC_OscConfig+0x5e8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	e013      	b.n	8001a24 <HAL_RCC_OscConfig+0x3c8>
 80019fc:	2302      	movs	r3, #2
 80019fe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a0e:	2302      	movs	r3, #2
 8001a10:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a14:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a20:	4b88      	ldr	r3, [pc, #544]	; (8001c44 <HAL_RCC_OscConfig+0x5e8>)
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	2202      	movs	r2, #2
 8001a26:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a2a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a2e:	fa92 f2a2 	rbit	r2, r2
 8001a32:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a36:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a3a:	fab2 f282 	clz	r2, r2
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	f042 0220 	orr.w	r2, r2, #32
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	f002 021f 	and.w	r2, r2, #31
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00a      	beq.n	8001a6c <HAL_RCC_OscConfig+0x410>
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d002      	beq.n	8001a6c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f000 be2e 	b.w	80026c8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	4b75      	ldr	r3, [pc, #468]	; (8001c44 <HAL_RCC_OscConfig+0x5e8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	21f8      	movs	r1, #248	; 0xf8
 8001a82:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a8a:	fa91 f1a1 	rbit	r1, r1
 8001a8e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a92:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a96:	fab1 f181 	clz	r1, r1
 8001a9a:	b2c9      	uxtb	r1, r1
 8001a9c:	408b      	lsls	r3, r1
 8001a9e:	4969      	ldr	r1, [pc, #420]	; (8001c44 <HAL_RCC_OscConfig+0x5e8>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa4:	e0fd      	b.n	8001ca2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8088 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x56c>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001aca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ad8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7fe ffea 	bl	8000abc <HAL_GetTick>
 8001ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aee:	f7fe ffe5 	bl	8000abc <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d902      	bls.n	8001b04 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	f000 bde2 	b.w	80026c8 <HAL_RCC_OscConfig+0x106c>
 8001b04:	2302      	movs	r3, #2
 8001b06:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b16:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	fab3 f383 	clz	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d102      	bne.n	8001b34 <HAL_RCC_OscConfig+0x4d8>
 8001b2e:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <HAL_RCC_OscConfig+0x5e8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	e013      	b.n	8001b5c <HAL_RCC_OscConfig+0x500>
 8001b34:	2302      	movs	r3, #2
 8001b36:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b3e:	fa93 f3a3 	rbit	r3, r3
 8001b42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b46:	2302      	movs	r3, #2
 8001b48:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b4c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <HAL_RCC_OscConfig+0x5e8>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b62:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b66:	fa92 f2a2 	rbit	r2, r2
 8001b6a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b6e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b72:	fab2 f282 	clz	r2, r2
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f042 0220 	orr.w	r2, r2, #32
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	f002 021f 	and.w	r2, r2, #31
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f202 	lsl.w	r2, r1, r2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0af      	beq.n	8001aee <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_RCC_OscConfig+0x5e8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	21f8      	movs	r1, #248	; 0xf8
 8001ba4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bac:	fa91 f1a1 	rbit	r1, r1
 8001bb0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001bb4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001bb8:	fab1 f181 	clz	r1, r1
 8001bbc:	b2c9      	uxtb	r1, r1
 8001bbe:	408b      	lsls	r3, r1
 8001bc0:	4920      	ldr	r1, [pc, #128]	; (8001c44 <HAL_RCC_OscConfig+0x5e8>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
 8001bc6:	e06c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x646>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001bda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7fe ff62 	bl	8000abc <HAL_GetTick>
 8001bf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfe:	f7fe ff5d 	bl	8000abc <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d902      	bls.n	8001c14 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	f000 bd5a 	b.w	80026c8 <HAL_RCC_OscConfig+0x106c>
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	095b      	lsrs	r3, r3, #5
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d104      	bne.n	8001c48 <HAL_RCC_OscConfig+0x5ec>
 8001c3e:	4b01      	ldr	r3, [pc, #4]	; (8001c44 <HAL_RCC_OscConfig+0x5e8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	e015      	b.n	8001c70 <HAL_RCC_OscConfig+0x614>
 8001c44:	40021000 	.word	0x40021000
 8001c48:	2302      	movs	r3, #2
 8001c4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c6c:	4bc8      	ldr	r3, [pc, #800]	; (8001f90 <HAL_RCC_OscConfig+0x934>)
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	2202      	movs	r2, #2
 8001c72:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c76:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c7a:	fa92 f2a2 	rbit	r2, r2
 8001c7e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c82:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c86:	fab2 f282 	clz	r2, r2
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	f042 0220 	orr.w	r2, r2, #32
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f002 021f 	and.w	r2, r2, #31
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1ad      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8110 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d079      	beq.n	8001dbc <HAL_RCC_OscConfig+0x760>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4bab      	ldr	r3, [pc, #684]	; (8001f94 <HAL_RCC_OscConfig+0x938>)
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	461a      	mov	r2, r3
 8001cee:	2301      	movs	r3, #1
 8001cf0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7fe fee3 	bl	8000abc <HAL_GetTick>
 8001cf6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7fe fede 	bl	8000abc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d902      	bls.n	8001d12 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	f000 bcdb 	b.w	80026c8 <HAL_RCC_OscConfig+0x106c>
 8001d12:	2302      	movs	r3, #2
 8001d14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	fa93 f2a3 	rbit	r2, r3
 8001d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d50:	2202      	movs	r2, #2
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d6a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6c:	4b88      	ldr	r3, [pc, #544]	; (8001f90 <HAL_RCC_OscConfig+0x934>)
 8001d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d78:	2102      	movs	r1, #2
 8001d7a:	6019      	str	r1, [r3, #0]
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	fa93 f1a3 	rbit	r1, r3
 8001d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d92:	6019      	str	r1, [r3, #0]
  return result;
 8001d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0a0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x6a0>
 8001dba:	e08d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x87c>
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dcc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	fa93 f2a3 	rbit	r2, r3
 8001dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dda:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001dde:	601a      	str	r2, [r3, #0]
  return result;
 8001de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001de8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b68      	ldr	r3, [pc, #416]	; (8001f94 <HAL_RCC_OscConfig+0x938>)
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7fe fe5d 	bl	8000abc <HAL_GetTick>
 8001e02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e08:	f7fe fe58 	bl	8000abc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d902      	bls.n	8001e1e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	f000 bc55 	b.w	80026c8 <HAL_RCC_OscConfig+0x106c>
 8001e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e22:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e26:	2202      	movs	r2, #2
 8001e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fa93 f2a3 	rbit	r2, r3
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e6e:	2202      	movs	r2, #2
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fa93 f2a3 	rbit	r2, r3
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8a:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_RCC_OscConfig+0x934>)
 8001e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e92:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e96:	2102      	movs	r1, #2
 8001e98:	6019      	str	r1, [r3, #0]
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	fa93 f1a3 	rbit	r1, r3
 8001ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001eb0:	6019      	str	r1, [r3, #0]
  return result;
 8001eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d197      	bne.n	8001e08 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001edc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 81a1 	beq.w	8002230 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef4:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_RCC_OscConfig+0x934>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d116      	bne.n	8001f2e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_RCC_OscConfig+0x934>)
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <HAL_RCC_OscConfig+0x934>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	61d3      	str	r3, [r2, #28]
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_RCC_OscConfig+0x934>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f18:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f26:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_RCC_OscConfig+0x93c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d11a      	bne.n	8001f70 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <HAL_RCC_OscConfig+0x93c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a16      	ldr	r2, [pc, #88]	; (8001f98 <HAL_RCC_OscConfig+0x93c>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f46:	f7fe fdb9 	bl	8000abc <HAL_GetTick>
 8001f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4e:	e009      	b.n	8001f64 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f50:	f7fe fdb4 	bl	8000abc <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	; 0x64
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e3b1      	b.n	80026c8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <HAL_RCC_OscConfig+0x93c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ef      	beq.n	8001f50 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d10d      	bne.n	8001f9c <HAL_RCC_OscConfig+0x940>
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <HAL_RCC_OscConfig+0x934>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a02      	ldr	r2, [pc, #8]	; (8001f90 <HAL_RCC_OscConfig+0x934>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	e03c      	b.n	8002008 <HAL_RCC_OscConfig+0x9ac>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	10908120 	.word	0x10908120
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x96a>
 8001fac:	4bc1      	ldr	r3, [pc, #772]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4ac0      	ldr	r2, [pc, #768]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6213      	str	r3, [r2, #32]
 8001fb8:	4bbe      	ldr	r3, [pc, #760]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4abd      	ldr	r2, [pc, #756]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	6213      	str	r3, [r2, #32]
 8001fc4:	e020      	b.n	8002008 <HAL_RCC_OscConfig+0x9ac>
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x994>
 8001fd6:	4bb7      	ldr	r3, [pc, #732]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4ab6      	ldr	r2, [pc, #728]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	4bb4      	ldr	r3, [pc, #720]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4ab3      	ldr	r2, [pc, #716]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	e00b      	b.n	8002008 <HAL_RCC_OscConfig+0x9ac>
 8001ff0:	4bb0      	ldr	r3, [pc, #704]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4aaf      	ldr	r2, [pc, #700]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	4bad      	ldr	r3, [pc, #692]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4aac      	ldr	r2, [pc, #688]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8002002:	f023 0304 	bic.w	r3, r3, #4
 8002006:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 8081 	beq.w	800211c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7fe fd4f 	bl	8000abc <HAL_GetTick>
 800201e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7fe fd4a 	bl	8000abc <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e345      	b.n	80026c8 <HAL_RCC_OscConfig+0x106c>
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002044:	2202      	movs	r2, #2
 8002046:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	fa93 f2a3 	rbit	r2, r3
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002068:	2202      	movs	r2, #2
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002070:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fa93 f2a3 	rbit	r2, r3
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002082:	601a      	str	r2, [r3, #0]
  return result;
 8002084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002088:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800208c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d102      	bne.n	80020a8 <HAL_RCC_OscConfig+0xa4c>
 80020a2:	4b84      	ldr	r3, [pc, #528]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	e013      	b.n	80020d0 <HAL_RCC_OscConfig+0xa74>
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020b0:	2202      	movs	r2, #2
 80020b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	fa93 f2a3 	rbit	r2, r3
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	4b79      	ldr	r3, [pc, #484]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020d4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80020d8:	2102      	movs	r1, #2
 80020da:	6011      	str	r1, [r2, #0]
 80020dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	fa92 f1a2 	rbit	r1, r2
 80020ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020ee:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020f2:	6011      	str	r1, [r2, #0]
  return result;
 80020f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020f8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d084      	beq.n	8002024 <HAL_RCC_OscConfig+0x9c8>
 800211a:	e07f      	b.n	800221c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7fe fcce 	bl	8000abc <HAL_GetTick>
 8002120:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	e00b      	b.n	800213e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe fcc9 	bl	8000abc <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e2c4      	b.n	80026c8 <HAL_RCC_OscConfig+0x106c>
 800213e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002142:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002146:	2202      	movs	r2, #2
 8002148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	fa93 f2a3 	rbit	r2, r3
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800216a:	2202      	movs	r2, #2
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002172:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	fa93 f2a3 	rbit	r2, r3
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002184:	601a      	str	r2, [r3, #0]
  return result;
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800218e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_OscConfig+0xb4e>
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	e013      	b.n	80021d2 <HAL_RCC_OscConfig+0xb76>
 80021aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021b2:	2202      	movs	r2, #2
 80021b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	fa93 f2a3 	rbit	r2, r3
 80021c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021d6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80021da:	2102      	movs	r1, #2
 80021dc:	6011      	str	r1, [r2, #0]
 80021de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	fa92 f1a2 	rbit	r1, r2
 80021ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021f0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021f4:	6011      	str	r1, [r2, #0]
  return result;
 80021f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021fa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f002 021f 	and.w	r2, r2, #31
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f202 	lsl.w	r2, r1, r2
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d184      	bne.n	8002126 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800221c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	4a22      	ldr	r2, [pc, #136]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 800222a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002234:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8242 	beq.w	80026c6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <HAL_RCC_OscConfig+0xc58>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b08      	cmp	r3, #8
 800224c:	f000 8213 	beq.w	8002676 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002254:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	2b02      	cmp	r3, #2
 800225e:	f040 8162 	bne.w	8002526 <HAL_RCC_OscConfig+0xeca>
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800226a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800226e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	fa93 f2a3 	rbit	r2, r3
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002286:	601a      	str	r2, [r3, #0]
  return result;
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002290:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800229c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	461a      	mov	r2, r3
 80022a4:	2300      	movs	r3, #0
 80022a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe fc08 	bl	8000abc <HAL_GetTick>
 80022ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b0:	e00c      	b.n	80022cc <HAL_RCC_OscConfig+0xc70>
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fc00 	bl	8000abc <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e1fd      	b.n	80026c8 <HAL_RCC_OscConfig+0x106c>
 80022cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022de:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	fa93 f2a3 	rbit	r2, r3
 80022e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022f0:	601a      	str	r2, [r3, #0]
  return result;
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b01      	cmp	r3, #1
 800230e:	d102      	bne.n	8002316 <HAL_RCC_OscConfig+0xcba>
 8002310:	4bb0      	ldr	r3, [pc, #704]	; (80025d4 <HAL_RCC_OscConfig+0xf78>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	e027      	b.n	8002366 <HAL_RCC_OscConfig+0xd0a>
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800231e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002322:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002328:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	fa93 f2a3 	rbit	r2, r3
 8002332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002336:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	fa93 f2a3 	rbit	r2, r3
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	4b9c      	ldr	r3, [pc, #624]	; (80025d4 <HAL_RCC_OscConfig+0xf78>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800236a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800236e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002372:	6011      	str	r1, [r2, #0]
 8002374:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002378:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	fa92 f1a2 	rbit	r1, r2
 8002382:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002386:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800238a:	6011      	str	r1, [r2, #0]
  return result;
 800238c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002390:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	fab2 f282 	clz	r2, r2
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	f042 0220 	orr.w	r2, r2, #32
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f002 021f 	and.w	r2, r2, #31
 80023a6:	2101      	movs	r1, #1
 80023a8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d182      	bne.n	80022b8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b2:	4b88      	ldr	r3, [pc, #544]	; (80025d4 <HAL_RCC_OscConfig+0xf78>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	430b      	orrs	r3, r1
 80023d4:	497f      	ldr	r1, [pc, #508]	; (80025d4 <HAL_RCC_OscConfig+0xf78>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023fe:	601a      	str	r2, [r3, #0]
  return result;
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002408:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002414:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	461a      	mov	r2, r3
 800241c:	2301      	movs	r3, #1
 800241e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fb4c 	bl	8000abc <HAL_GetTick>
 8002424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002428:	e009      	b.n	800243e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242a:	f7fe fb47 	bl	8000abc <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e144      	b.n	80026c8 <HAL_RCC_OscConfig+0x106c>
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002446:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800244a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002450:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f2a3 	rbit	r2, r3
 800245a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002462:	601a      	str	r2, [r3, #0]
  return result;
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800246c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d102      	bne.n	8002488 <HAL_RCC_OscConfig+0xe2c>
 8002482:	4b54      	ldr	r3, [pc, #336]	; (80025d4 <HAL_RCC_OscConfig+0xf78>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	e027      	b.n	80024d8 <HAL_RCC_OscConfig+0xe7c>
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002490:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	fa93 f2a3 	rbit	r2, r3
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <HAL_RCC_OscConfig+0xf78>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024dc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80024e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024e4:	6011      	str	r1, [r2, #0]
 80024e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ea:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	fa92 f1a2 	rbit	r1, r2
 80024f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024f8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024fc:	6011      	str	r1, [r2, #0]
  return result;
 80024fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002502:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	fab2 f282 	clz	r2, r2
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	f042 0220 	orr.w	r2, r2, #32
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f002 021f 	and.w	r2, r2, #31
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f202 	lsl.w	r2, r1, r2
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d082      	beq.n	800242a <HAL_RCC_OscConfig+0xdce>
 8002524:	e0cf      	b.n	80026c6 <HAL_RCC_OscConfig+0x106a>
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800252e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f2a3 	rbit	r2, r3
 8002542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002546:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800254a:	601a      	str	r2, [r3, #0]
  return result;
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002554:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002560:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	461a      	mov	r2, r3
 8002568:	2300      	movs	r3, #0
 800256a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe faa6 	bl	8000abc <HAL_GetTick>
 8002570:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002574:	e009      	b.n	800258a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe faa1 	bl	8000abc <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e09e      	b.n	80026c8 <HAL_RCC_OscConfig+0x106c>
 800258a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f2a3 	rbit	r2, r3
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025ae:	601a      	str	r2, [r3, #0]
  return result;
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d104      	bne.n	80025d8 <HAL_RCC_OscConfig+0xf7c>
 80025ce:	4b01      	ldr	r3, [pc, #4]	; (80025d4 <HAL_RCC_OscConfig+0xf78>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	e029      	b.n	8002628 <HAL_RCC_OscConfig+0xfcc>
 80025d4:	40021000 	.word	0x40021000
 80025d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f2a3 	rbit	r2, r3
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002606:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002610:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	fa93 f2a3 	rbit	r2, r3
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_OscConfig+0x1078>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800262c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002630:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002634:	6011      	str	r1, [r2, #0]
 8002636:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800263a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	fa92 f1a2 	rbit	r1, r2
 8002644:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002648:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800264c:	6011      	str	r1, [r2, #0]
  return result;
 800264e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002652:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	fab2 f282 	clz	r2, r2
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	f042 0220 	orr.w	r2, r2, #32
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	f002 021f 	and.w	r2, r2, #31
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f202 	lsl.w	r2, r1, r2
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d180      	bne.n	8002576 <HAL_RCC_OscConfig+0xf1a>
 8002674:	e027      	b.n	80026c6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e01e      	b.n	80026c8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_OscConfig+0x1078>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002692:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002696:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800269a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d10b      	bne.n	80026c2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026be:	429a      	cmp	r2, r3
 80026c0:	d001      	beq.n	80026c6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b09e      	sub	sp, #120	; 0x78
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e162      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b90      	ldr	r3, [pc, #576]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b8d      	ldr	r3, [pc, #564]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 0207 	bic.w	r2, r3, #7
 8002706:	498b      	ldr	r1, [pc, #556]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b89      	ldr	r3, [pc, #548]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e14a      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800272c:	4b82      	ldr	r3, [pc, #520]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	497f      	ldr	r1, [pc, #508]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80dc 	beq.w	8002904 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d13c      	bne.n	80027ce <HAL_RCC_ClockConfig+0xf6>
 8002754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002758:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d102      	bne.n	800277e <HAL_RCC_ClockConfig+0xa6>
 8002778:	4b6f      	ldr	r3, [pc, #444]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	e00f      	b.n	800279e <HAL_RCC_ClockConfig+0xc6>
 800277e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002782:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	667b      	str	r3, [r7, #100]	; 0x64
 800278c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002790:	663b      	str	r3, [r7, #96]	; 0x60
 8002792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800279a:	4b67      	ldr	r3, [pc, #412]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80027a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027a6:	fa92 f2a2 	rbit	r2, r2
 80027aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027ae:	fab2 f282 	clz	r2, r2
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	f042 0220 	orr.w	r2, r2, #32
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f002 021f 	and.w	r2, r2, #31
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d17b      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0f3      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d13c      	bne.n	8002850 <HAL_RCC_ClockConfig+0x178>
 80027d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d102      	bne.n	8002800 <HAL_RCC_ClockConfig+0x128>
 80027fa:	4b4f      	ldr	r3, [pc, #316]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	e00f      	b.n	8002820 <HAL_RCC_ClockConfig+0x148>
 8002800:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002804:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	647b      	str	r3, [r7, #68]	; 0x44
 800280e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002812:	643b      	str	r3, [r7, #64]	; 0x40
 8002814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281c:	4b46      	ldr	r3, [pc, #280]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002824:	63ba      	str	r2, [r7, #56]	; 0x38
 8002826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002828:	fa92 f2a2 	rbit	r2, r2
 800282c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800282e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0220 	orr.w	r2, r2, #32
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d13a      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0b2      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
 8002850:	2302      	movs	r3, #2
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <HAL_RCC_ClockConfig+0x1a0>
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	e00d      	b.n	8002894 <HAL_RCC_ClockConfig+0x1bc>
 8002878:	2302      	movs	r3, #2
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
 8002884:	2302      	movs	r3, #2
 8002886:	623b      	str	r3, [r7, #32]
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2202      	movs	r2, #2
 8002896:	61ba      	str	r2, [r7, #24]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	fa92 f2a2 	rbit	r2, r2
 800289e:	617a      	str	r2, [r7, #20]
  return result;
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f042 0220 	orr.w	r2, r2, #32
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f002 021f 	and.w	r2, r2, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e079      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	491a      	ldr	r1, [pc, #104]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fe f8f2 	bl	8000abc <HAL_GetTick>
 80028d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe f8ee 	bl	8000abc <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e061      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_RCC_ClockConfig+0x260>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d214      	bcs.n	800293c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 0207 	bic.w	r2, r3, #7
 800291a:	4906      	ldr	r1, [pc, #24]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_RCC_ClockConfig+0x25c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e040      	b.n	80029b6 <HAL_RCC_ClockConfig+0x2de>
 8002934:	40022000 	.word	0x40022000
 8002938:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_RCC_ClockConfig+0x2e8>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	491a      	ldr	r1, [pc, #104]	; (80029c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4912      	ldr	r1, [pc, #72]	; (80029c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800297a:	f000 f829 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 800297e:	4601      	mov	r1, r0
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002988:	22f0      	movs	r2, #240	; 0xf0
 800298a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	fa92 f2a2 	rbit	r2, r2
 8002992:	60fa      	str	r2, [r7, #12]
  return result;
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	fab2 f282 	clz	r2, r2
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	40d3      	lsrs	r3, r2
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x2ec>)
 80029a0:	5cd3      	ldrb	r3, [r2, r3]
 80029a2:	fa21 f303 	lsr.w	r3, r1, r3
 80029a6:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <HAL_RCC_ClockConfig+0x2f0>)
 80029a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <HAL_RCC_ClockConfig+0x2f4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe f840 	bl	8000a34 <HAL_InitTick>
  
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3778      	adds	r7, #120	; 0x78
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	080039e4 	.word	0x080039e4
 80029c8:	20000000 	.word	0x20000000
 80029cc:	20000004 	.word	0x20000004

080029d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b08b      	sub	sp, #44	; 0x2c
 80029d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029ea:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d002      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x30>
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_GetSysClockFreq+0x36>
 80029fe:	e03c      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a00:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a02:	623b      	str	r3, [r7, #32]
      break;
 8002a04:	e03c      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a0c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a10:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	fa92 f2a2 	rbit	r2, r2
 8002a18:	607a      	str	r2, [r7, #4]
  return result;
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	40d3      	lsrs	r3, r2
 8002a24:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	220f      	movs	r2, #15
 8002a34:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	fa92 f2a2 	rbit	r2, r2
 8002a3c:	60fa      	str	r2, [r7, #12]
  return result;
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	40d3      	lsrs	r3, r2
 8002a48:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a58:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
 8002a68:	e004      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	623b      	str	r3, [r7, #32]
      break;
 8002a78:	e002      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a7c:	623b      	str	r3, [r7, #32]
      break;
 8002a7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a80:	6a3b      	ldr	r3, [r7, #32]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	372c      	adds	r7, #44	; 0x2c
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000
 8002a94:	007a1200 	.word	0x007a1200
 8002a98:	080039fc 	.word	0x080039fc
 8002a9c:	08003a0c 	.word	0x08003a0c
 8002aa0:	003d0900 	.word	0x003d0900

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000000 	.word	0x20000000

08002abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ac2:	f7ff ffef 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ac6:	4601      	mov	r1, r0
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ad0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ad4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	fa92 f2a2 	rbit	r2, r2
 8002adc:	603a      	str	r2, [r7, #0]
  return result;
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	40d3      	lsrs	r3, r2
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	080039f4 	.word	0x080039f4

08002b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b06:	f7ff ffcd 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002b0a:	4601      	mov	r1, r0
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b14:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	fa92 f2a2 	rbit	r2, r2
 8002b20:	603a      	str	r2, [r7, #0]
  return result;
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	fab2 f282 	clz	r2, r2
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	40d3      	lsrs	r3, r2
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	080039f4 	.word	0x080039f4

08002b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b092      	sub	sp, #72	; 0x48
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80d4 	beq.w	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b68:	4b4e      	ldr	r3, [pc, #312]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10e      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b74:	4b4b      	ldr	r3, [pc, #300]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	4a4a      	ldr	r2, [pc, #296]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	61d3      	str	r3, [r2, #28]
 8002b80:	4b48      	ldr	r3, [pc, #288]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b92:	4b45      	ldr	r3, [pc, #276]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d118      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b9e:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a41      	ldr	r2, [pc, #260]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002baa:	f7fd ff87 	bl	8000abc <HAL_GetTick>
 8002bae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb2:	f7fd ff83 	bl	8000abc <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b64      	cmp	r3, #100	; 0x64
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e169      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc4:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bd0:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8084 	beq.w	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d07c      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf0:	4b2c      	ldr	r3, [pc, #176]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b26      	ldr	r3, [pc, #152]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2300      	movs	r3, #0
 8002c40:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c42:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c46:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d04b      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fd ff33 	bl	8000abc <HAL_GetTick>
 8002c56:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fd ff2f 	bl	8000abc <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e113      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002c70:	2302      	movs	r3, #2
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	623b      	str	r3, [r7, #32]
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	61fb      	str	r3, [r7, #28]
  return result;
 8002c88:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d108      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c9e:	4b01      	ldr	r3, [pc, #4]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	e00d      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40007000 	.word	0x40007000
 8002cac:	10908100 	.word	0x10908100
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	4b78      	ldr	r3, [pc, #480]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	613a      	str	r2, [r7, #16]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	fa92 f2a2 	rbit	r2, r2
 8002cca:	60fa      	str	r2, [r7, #12]
  return result;
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	fab2 f282 	clz	r2, r2
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	f002 021f 	and.w	r2, r2, #31
 8002cde:	2101      	movs	r1, #1
 8002ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0b7      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cea:	4b6d      	ldr	r3, [pc, #436]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	496a      	ldr	r1, [pc, #424]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d04:	4b66      	ldr	r3, [pc, #408]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	4a65      	ldr	r2, [pc, #404]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d1c:	4b60      	ldr	r3, [pc, #384]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	f023 0203 	bic.w	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	495d      	ldr	r1, [pc, #372]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d3a:	4b59      	ldr	r3, [pc, #356]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	4956      	ldr	r1, [pc, #344]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d58:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	494e      	ldr	r1, [pc, #312]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d76:	4b4a      	ldr	r3, [pc, #296]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f023 0210 	bic.w	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4947      	ldr	r1, [pc, #284]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d94:	4b42      	ldr	r3, [pc, #264]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	493f      	ldr	r1, [pc, #252]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002db2:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f023 0220 	bic.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4938      	ldr	r1, [pc, #224]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dd0:	4b33      	ldr	r3, [pc, #204]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	4930      	ldr	r1, [pc, #192]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dee:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	4929      	ldr	r1, [pc, #164]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e0c:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	4921      	ldr	r1, [pc, #132]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	491a      	ldr	r1, [pc, #104]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	4912      	ldr	r1, [pc, #72]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	490b      	ldr	r1, [pc, #44]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e90:	4903      	ldr	r1, [pc, #12]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3748      	adds	r7, #72	; 0x48
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e09d      	b.n	8002ff2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec6:	d009      	beq.n	8002edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	61da      	str	r2, [r3, #28]
 8002ece:	e005      	b.n	8002edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fbe0 	bl	80006bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f1c:	d902      	bls.n	8002f24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e002      	b.n	8002f2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f32:	d007      	beq.n	8002f44 <HAL_SPI_Init+0xa0>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f3c:	d002      	beq.n	8002f44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	ea42 0103 	orr.w	r1, r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	0c1b      	lsrs	r3, r3, #16
 8002fa0:	f003 0204 	and.w	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002fc0:	ea42 0103 	orr.w	r1, r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e040      	b.n	800308e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003010:	2b00      	cmp	r3, #0
 8003012:	d106      	bne.n	8003022 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fd fc1f 	bl	8000860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2224      	movs	r2, #36	; 0x24
 8003026:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f8c1 	bl	80031c0 <UART_SetConfig>
 800303e:	4603      	mov	r3, r0
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e022      	b.n	800308e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fa8b 	bl	800356c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003064:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003074:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f042 0201 	orr.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fb12 	bl	80036b0 <UART_CheckIdleState>
 800308c:	4603      	mov	r3, r0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b08a      	sub	sp, #40	; 0x28
 800309a:	af02      	add	r7, sp, #8
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4613      	mov	r3, r2
 80030a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	f040 8082 	bne.w	80031b4 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_UART_Transmit+0x26>
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e07a      	b.n	80031b6 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Transmit+0x38>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e073      	b.n	80031b6 <HAL_UART_Transmit+0x120>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2221      	movs	r2, #33	; 0x21
 80030e2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e4:	f7fd fcea 	bl	8000abc <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	88fa      	ldrh	r2, [r7, #6]
 80030ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	d108      	bne.n	8003116 <HAL_UART_Transmit+0x80>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d104      	bne.n	8003116 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	e003      	b.n	800311e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003126:	e02d      	b.n	8003184 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2200      	movs	r2, #0
 8003130:	2180      	movs	r1, #128	; 0x80
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fb05 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e039      	b.n	80031b6 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003154:	b292      	uxth	r2, r2
 8003156:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	3302      	adds	r3, #2
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e008      	b.n	8003172 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	781a      	ldrb	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	b292      	uxth	r2, r2
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3301      	adds	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1cb      	bne.n	8003128 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2200      	movs	r2, #0
 8003198:	2140      	movs	r1, #64	; 0x40
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fad1 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e005      	b.n	80031b6 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80031ee:	f023 030c 	bic.w	r3, r3, #12
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	6979      	ldr	r1, [r7, #20]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	430a      	orrs	r2, r1
 8003234:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4aa8      	ldr	r2, [pc, #672]	; (80034dc <UART_SetConfig+0x31c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d120      	bne.n	8003282 <UART_SetConfig+0xc2>
 8003240:	4ba7      	ldr	r3, [pc, #668]	; (80034e0 <UART_SetConfig+0x320>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b03      	cmp	r3, #3
 800324a:	d817      	bhi.n	800327c <UART_SetConfig+0xbc>
 800324c:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <UART_SetConfig+0x94>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	08003265 	.word	0x08003265
 8003258:	08003271 	.word	0x08003271
 800325c:	08003277 	.word	0x08003277
 8003260:	0800326b 	.word	0x0800326b
 8003264:	2301      	movs	r3, #1
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e0b5      	b.n	80033d6 <UART_SetConfig+0x216>
 800326a:	2302      	movs	r3, #2
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e0b2      	b.n	80033d6 <UART_SetConfig+0x216>
 8003270:	2304      	movs	r3, #4
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e0af      	b.n	80033d6 <UART_SetConfig+0x216>
 8003276:	2308      	movs	r3, #8
 8003278:	77fb      	strb	r3, [r7, #31]
 800327a:	e0ac      	b.n	80033d6 <UART_SetConfig+0x216>
 800327c:	2310      	movs	r3, #16
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e0a9      	b.n	80033d6 <UART_SetConfig+0x216>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a97      	ldr	r2, [pc, #604]	; (80034e4 <UART_SetConfig+0x324>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d124      	bne.n	80032d6 <UART_SetConfig+0x116>
 800328c:	4b94      	ldr	r3, [pc, #592]	; (80034e0 <UART_SetConfig+0x320>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003294:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003298:	d011      	beq.n	80032be <UART_SetConfig+0xfe>
 800329a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800329e:	d817      	bhi.n	80032d0 <UART_SetConfig+0x110>
 80032a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032a4:	d011      	beq.n	80032ca <UART_SetConfig+0x10a>
 80032a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032aa:	d811      	bhi.n	80032d0 <UART_SetConfig+0x110>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <UART_SetConfig+0xf8>
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b4:	d006      	beq.n	80032c4 <UART_SetConfig+0x104>
 80032b6:	e00b      	b.n	80032d0 <UART_SetConfig+0x110>
 80032b8:	2300      	movs	r3, #0
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e08b      	b.n	80033d6 <UART_SetConfig+0x216>
 80032be:	2302      	movs	r3, #2
 80032c0:	77fb      	strb	r3, [r7, #31]
 80032c2:	e088      	b.n	80033d6 <UART_SetConfig+0x216>
 80032c4:	2304      	movs	r3, #4
 80032c6:	77fb      	strb	r3, [r7, #31]
 80032c8:	e085      	b.n	80033d6 <UART_SetConfig+0x216>
 80032ca:	2308      	movs	r3, #8
 80032cc:	77fb      	strb	r3, [r7, #31]
 80032ce:	e082      	b.n	80033d6 <UART_SetConfig+0x216>
 80032d0:	2310      	movs	r3, #16
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e07f      	b.n	80033d6 <UART_SetConfig+0x216>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a83      	ldr	r2, [pc, #524]	; (80034e8 <UART_SetConfig+0x328>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d124      	bne.n	800332a <UART_SetConfig+0x16a>
 80032e0:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <UART_SetConfig+0x320>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80032e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032ec:	d011      	beq.n	8003312 <UART_SetConfig+0x152>
 80032ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032f2:	d817      	bhi.n	8003324 <UART_SetConfig+0x164>
 80032f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032f8:	d011      	beq.n	800331e <UART_SetConfig+0x15e>
 80032fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032fe:	d811      	bhi.n	8003324 <UART_SetConfig+0x164>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <UART_SetConfig+0x14c>
 8003304:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003308:	d006      	beq.n	8003318 <UART_SetConfig+0x158>
 800330a:	e00b      	b.n	8003324 <UART_SetConfig+0x164>
 800330c:	2300      	movs	r3, #0
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e061      	b.n	80033d6 <UART_SetConfig+0x216>
 8003312:	2302      	movs	r3, #2
 8003314:	77fb      	strb	r3, [r7, #31]
 8003316:	e05e      	b.n	80033d6 <UART_SetConfig+0x216>
 8003318:	2304      	movs	r3, #4
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e05b      	b.n	80033d6 <UART_SetConfig+0x216>
 800331e:	2308      	movs	r3, #8
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	e058      	b.n	80033d6 <UART_SetConfig+0x216>
 8003324:	2310      	movs	r3, #16
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e055      	b.n	80033d6 <UART_SetConfig+0x216>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6f      	ldr	r2, [pc, #444]	; (80034ec <UART_SetConfig+0x32c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d124      	bne.n	800337e <UART_SetConfig+0x1be>
 8003334:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <UART_SetConfig+0x320>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800333c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003340:	d011      	beq.n	8003366 <UART_SetConfig+0x1a6>
 8003342:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003346:	d817      	bhi.n	8003378 <UART_SetConfig+0x1b8>
 8003348:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800334c:	d011      	beq.n	8003372 <UART_SetConfig+0x1b2>
 800334e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003352:	d811      	bhi.n	8003378 <UART_SetConfig+0x1b8>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <UART_SetConfig+0x1a0>
 8003358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800335c:	d006      	beq.n	800336c <UART_SetConfig+0x1ac>
 800335e:	e00b      	b.n	8003378 <UART_SetConfig+0x1b8>
 8003360:	2300      	movs	r3, #0
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e037      	b.n	80033d6 <UART_SetConfig+0x216>
 8003366:	2302      	movs	r3, #2
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e034      	b.n	80033d6 <UART_SetConfig+0x216>
 800336c:	2304      	movs	r3, #4
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e031      	b.n	80033d6 <UART_SetConfig+0x216>
 8003372:	2308      	movs	r3, #8
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e02e      	b.n	80033d6 <UART_SetConfig+0x216>
 8003378:	2310      	movs	r3, #16
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e02b      	b.n	80033d6 <UART_SetConfig+0x216>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a5b      	ldr	r2, [pc, #364]	; (80034f0 <UART_SetConfig+0x330>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d124      	bne.n	80033d2 <UART_SetConfig+0x212>
 8003388:	4b55      	ldr	r3, [pc, #340]	; (80034e0 <UART_SetConfig+0x320>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003390:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003394:	d011      	beq.n	80033ba <UART_SetConfig+0x1fa>
 8003396:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800339a:	d817      	bhi.n	80033cc <UART_SetConfig+0x20c>
 800339c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033a0:	d011      	beq.n	80033c6 <UART_SetConfig+0x206>
 80033a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033a6:	d811      	bhi.n	80033cc <UART_SetConfig+0x20c>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <UART_SetConfig+0x1f4>
 80033ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b0:	d006      	beq.n	80033c0 <UART_SetConfig+0x200>
 80033b2:	e00b      	b.n	80033cc <UART_SetConfig+0x20c>
 80033b4:	2300      	movs	r3, #0
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	e00d      	b.n	80033d6 <UART_SetConfig+0x216>
 80033ba:	2302      	movs	r3, #2
 80033bc:	77fb      	strb	r3, [r7, #31]
 80033be:	e00a      	b.n	80033d6 <UART_SetConfig+0x216>
 80033c0:	2304      	movs	r3, #4
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	e007      	b.n	80033d6 <UART_SetConfig+0x216>
 80033c6:	2308      	movs	r3, #8
 80033c8:	77fb      	strb	r3, [r7, #31]
 80033ca:	e004      	b.n	80033d6 <UART_SetConfig+0x216>
 80033cc:	2310      	movs	r3, #16
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e001      	b.n	80033d6 <UART_SetConfig+0x216>
 80033d2:	2310      	movs	r3, #16
 80033d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033de:	d15c      	bne.n	800349a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80033e0:	7ffb      	ldrb	r3, [r7, #31]
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d827      	bhi.n	8003436 <UART_SetConfig+0x276>
 80033e6:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <UART_SetConfig+0x22c>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	08003411 	.word	0x08003411
 80033f0:	08003419 	.word	0x08003419
 80033f4:	08003421 	.word	0x08003421
 80033f8:	08003437 	.word	0x08003437
 80033fc:	08003427 	.word	0x08003427
 8003400:	08003437 	.word	0x08003437
 8003404:	08003437 	.word	0x08003437
 8003408:	08003437 	.word	0x08003437
 800340c:	0800342f 	.word	0x0800342f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003410:	f7ff fb54 	bl	8002abc <HAL_RCC_GetPCLK1Freq>
 8003414:	61b8      	str	r0, [r7, #24]
        break;
 8003416:	e013      	b.n	8003440 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003418:	f7ff fb72 	bl	8002b00 <HAL_RCC_GetPCLK2Freq>
 800341c:	61b8      	str	r0, [r7, #24]
        break;
 800341e:	e00f      	b.n	8003440 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003420:	4b34      	ldr	r3, [pc, #208]	; (80034f4 <UART_SetConfig+0x334>)
 8003422:	61bb      	str	r3, [r7, #24]
        break;
 8003424:	e00c      	b.n	8003440 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003426:	f7ff fad3 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 800342a:	61b8      	str	r0, [r7, #24]
        break;
 800342c:	e008      	b.n	8003440 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800342e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003432:	61bb      	str	r3, [r7, #24]
        break;
 8003434:	e004      	b.n	8003440 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	77bb      	strb	r3, [r7, #30]
        break;
 800343e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8084 	beq.w	8003550 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	005a      	lsls	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	441a      	add	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	fbb2 f3f3 	udiv	r3, r2, r3
 800345c:	b29b      	uxth	r3, r3
 800345e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	2b0f      	cmp	r3, #15
 8003464:	d916      	bls.n	8003494 <UART_SetConfig+0x2d4>
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d212      	bcs.n	8003494 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	b29b      	uxth	r3, r3
 8003472:	f023 030f 	bic.w	r3, r3, #15
 8003476:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	085b      	lsrs	r3, r3, #1
 800347c:	b29b      	uxth	r3, r3
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	b29a      	uxth	r2, r3
 8003484:	89fb      	ldrh	r3, [r7, #14]
 8003486:	4313      	orrs	r3, r2
 8003488:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	89fa      	ldrh	r2, [r7, #14]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	e05d      	b.n	8003550 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	77bb      	strb	r3, [r7, #30]
 8003498:	e05a      	b.n	8003550 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800349a:	7ffb      	ldrb	r3, [r7, #31]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d836      	bhi.n	800350e <UART_SetConfig+0x34e>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <UART_SetConfig+0x2e8>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034cd 	.word	0x080034cd
 80034ac:	080034d5 	.word	0x080034d5
 80034b0:	080034f9 	.word	0x080034f9
 80034b4:	0800350f 	.word	0x0800350f
 80034b8:	080034ff 	.word	0x080034ff
 80034bc:	0800350f 	.word	0x0800350f
 80034c0:	0800350f 	.word	0x0800350f
 80034c4:	0800350f 	.word	0x0800350f
 80034c8:	08003507 	.word	0x08003507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034cc:	f7ff faf6 	bl	8002abc <HAL_RCC_GetPCLK1Freq>
 80034d0:	61b8      	str	r0, [r7, #24]
        break;
 80034d2:	e021      	b.n	8003518 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d4:	f7ff fb14 	bl	8002b00 <HAL_RCC_GetPCLK2Freq>
 80034d8:	61b8      	str	r0, [r7, #24]
        break;
 80034da:	e01d      	b.n	8003518 <UART_SetConfig+0x358>
 80034dc:	40013800 	.word	0x40013800
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40004400 	.word	0x40004400
 80034e8:	40004800 	.word	0x40004800
 80034ec:	40004c00 	.word	0x40004c00
 80034f0:	40005000 	.word	0x40005000
 80034f4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <UART_SetConfig+0x3a8>)
 80034fa:	61bb      	str	r3, [r7, #24]
        break;
 80034fc:	e00c      	b.n	8003518 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034fe:	f7ff fa67 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8003502:	61b8      	str	r0, [r7, #24]
        break;
 8003504:	e008      	b.n	8003518 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350a:	61bb      	str	r3, [r7, #24]
        break;
 800350c:	e004      	b.n	8003518 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	77bb      	strb	r3, [r7, #30]
        break;
 8003516:	bf00      	nop
    }

    if (pclk != 0U)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d018      	beq.n	8003550 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	085a      	lsrs	r2, r3, #1
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	441a      	add	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	b29b      	uxth	r3, r3
 8003532:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b0f      	cmp	r3, #15
 8003538:	d908      	bls.n	800354c <UART_SetConfig+0x38c>
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d204      	bcs.n	800354c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	e001      	b.n	8003550 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800355c:	7fbb      	ldrb	r3, [r7, #30]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	007a1200 	.word	0x007a1200

0800356c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01a      	beq.n	8003682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366a:	d10a      	bne.n	8003682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
  }
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036c0:	f7fd f9fc 	bl	8000abc <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d10e      	bne.n	80036f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f82d 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e023      	b.n	800373a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d10e      	bne.n	800371e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f817 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e00d      	b.n	800373a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b09c      	sub	sp, #112	; 0x70
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003752:	e0a5      	b.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	f000 80a1 	beq.w	80038a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375e:	f7fd f9ad 	bl	8000abc <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <UART_WaitOnFlagUntilTimeout+0x32>
 800376e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003770:	2b00      	cmp	r3, #0
 8003772:	d13e      	bne.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377c:	e853 3f00 	ldrex	r3, [r3]
 8003780:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003784:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003788:	667b      	str	r3, [r7, #100]	; 0x64
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003794:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003798:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e6      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3308      	adds	r3, #8
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	663b      	str	r3, [r7, #96]	; 0x60
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3308      	adds	r3, #8
 80037c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80037c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e5      	bne.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e067      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d04f      	beq.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380e:	d147      	bne.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003818:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800382e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
 800383a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800383e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e6      	bne.n	800381a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3308      	adds	r3, #8
 8003852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	613b      	str	r3, [r7, #16]
   return(result);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	66bb      	str	r3, [r7, #104]	; 0x68
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3308      	adds	r3, #8
 800386a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800386c:	623a      	str	r2, [r7, #32]
 800386e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	69f9      	ldr	r1, [r7, #28]
 8003872:	6a3a      	ldr	r2, [r7, #32]
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	61bb      	str	r3, [r7, #24]
   return(result);
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e5      	bne.n	800384c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e010      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4013      	ands	r3, r2
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	f43f af4a 	beq.w	8003754 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3770      	adds	r7, #112	; 0x70
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038d2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	4013      	ands	r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003900:	b084      	sub	sp, #16
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	f107 0014 	add.w	r0, r7, #20
 800390e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	b004      	add	sp, #16
 8003940:	4770      	bx	lr
	...

08003944 <__libc_init_array>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	4d0d      	ldr	r5, [pc, #52]	; (800397c <__libc_init_array+0x38>)
 8003948:	4c0d      	ldr	r4, [pc, #52]	; (8003980 <__libc_init_array+0x3c>)
 800394a:	1b64      	subs	r4, r4, r5
 800394c:	10a4      	asrs	r4, r4, #2
 800394e:	2600      	movs	r6, #0
 8003950:	42a6      	cmp	r6, r4
 8003952:	d109      	bne.n	8003968 <__libc_init_array+0x24>
 8003954:	4d0b      	ldr	r5, [pc, #44]	; (8003984 <__libc_init_array+0x40>)
 8003956:	4c0c      	ldr	r4, [pc, #48]	; (8003988 <__libc_init_array+0x44>)
 8003958:	f000 f820 	bl	800399c <_init>
 800395c:	1b64      	subs	r4, r4, r5
 800395e:	10a4      	asrs	r4, r4, #2
 8003960:	2600      	movs	r6, #0
 8003962:	42a6      	cmp	r6, r4
 8003964:	d105      	bne.n	8003972 <__libc_init_array+0x2e>
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	f855 3b04 	ldr.w	r3, [r5], #4
 800396c:	4798      	blx	r3
 800396e:	3601      	adds	r6, #1
 8003970:	e7ee      	b.n	8003950 <__libc_init_array+0xc>
 8003972:	f855 3b04 	ldr.w	r3, [r5], #4
 8003976:	4798      	blx	r3
 8003978:	3601      	adds	r6, #1
 800397a:	e7f2      	b.n	8003962 <__libc_init_array+0x1e>
 800397c:	08003a1c 	.word	0x08003a1c
 8003980:	08003a1c 	.word	0x08003a1c
 8003984:	08003a1c 	.word	0x08003a1c
 8003988:	08003a20 	.word	0x08003a20

0800398c <memset>:
 800398c:	4402      	add	r2, r0
 800398e:	4603      	mov	r3, r0
 8003990:	4293      	cmp	r3, r2
 8003992:	d100      	bne.n	8003996 <memset+0xa>
 8003994:	4770      	bx	lr
 8003996:	f803 1b01 	strb.w	r1, [r3], #1
 800399a:	e7f9      	b.n	8003990 <memset+0x4>

0800399c <_init>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	bf00      	nop
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr

080039a8 <_fini>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr

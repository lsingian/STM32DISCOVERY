
tmp102_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004030  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004320  08004320  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004320  08004320  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004320  08004320  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000048c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000498  20000498  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f1b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027f7  00000000  00000000  00031f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00034750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb0  00000000  00000000  00035518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de71  00000000  00000000  000361c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001381a  00000000  00000000  00054039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afcce  00000000  00000000  00067853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00117521  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003858  00000000  00000000  00117574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041a0 	.word	0x080041a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080041a0 	.word	0x080041a0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b08a      	sub	sp, #40	; 0x28
 80001dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001de:	f107 0314 	add.w	r3, r7, #20
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001ee:	4b37      	ldr	r3, [pc, #220]	; (80002cc <MX_GPIO_Init+0xf4>)
 80001f0:	695b      	ldr	r3, [r3, #20]
 80001f2:	4a36      	ldr	r2, [pc, #216]	; (80002cc <MX_GPIO_Init+0xf4>)
 80001f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001f8:	6153      	str	r3, [r2, #20]
 80001fa:	4b34      	ldr	r3, [pc, #208]	; (80002cc <MX_GPIO_Init+0xf4>)
 80001fc:	695b      	ldr	r3, [r3, #20]
 80001fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000202:	613b      	str	r3, [r7, #16]
 8000204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000206:	4b31      	ldr	r3, [pc, #196]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	4a30      	ldr	r2, [pc, #192]	; (80002cc <MX_GPIO_Init+0xf4>)
 800020c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000210:	6153      	str	r3, [r2, #20]
 8000212:	4b2e      	ldr	r3, [pc, #184]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	4a2a      	ldr	r2, [pc, #168]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000228:	6153      	str	r3, [r2, #20]
 800022a:	4b28      	ldr	r3, [pc, #160]	; (80002cc <MX_GPIO_Init+0xf4>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000232:	60bb      	str	r3, [r7, #8]
 8000234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	4b25      	ldr	r3, [pc, #148]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	4a24      	ldr	r2, [pc, #144]	; (80002cc <MX_GPIO_Init+0xf4>)
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	6153      	str	r3, [r2, #20]
 8000242:	4b22      	ldr	r3, [pc, #136]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800024a:	607b      	str	r3, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800024e:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	4a1e      	ldr	r2, [pc, #120]	; (80002cc <MX_GPIO_Init+0xf4>)
 8000254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000258:	6153      	str	r3, [r2, #20]
 800025a:	4b1c      	ldr	r3, [pc, #112]	; (80002cc <MX_GPIO_Init+0xf4>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000262:	603b      	str	r3, [r7, #0]
 8000264:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000266:	2200      	movs	r2, #0
 8000268:	f64f 7108 	movw	r1, #65288	; 0xff08
 800026c:	4818      	ldr	r0, [pc, #96]	; (80002d0 <MX_GPIO_Init+0xf8>)
 800026e:	f000 fef7 	bl	8001060 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000272:	2337      	movs	r3, #55	; 0x37
 8000274:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000276:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800027a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	4619      	mov	r1, r3
 8000286:	4812      	ldr	r0, [pc, #72]	; (80002d0 <MX_GPIO_Init+0xf8>)
 8000288:	f000 fd70 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800028c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000290:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000292:	2301      	movs	r3, #1
 8000294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029a:	2300      	movs	r3, #0
 800029c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	4619      	mov	r1, r3
 80002a4:	480a      	ldr	r0, [pc, #40]	; (80002d0 <MX_GPIO_Init+0xf8>)
 80002a6:	f000 fd61 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002aa:	2301      	movs	r3, #1
 80002ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002b6:	f107 0314 	add.w	r3, r7, #20
 80002ba:	4619      	mov	r1, r3
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c0:	f000 fd54 	bl	8000d6c <HAL_GPIO_Init>

}
 80002c4:	bf00      	nop
 80002c6:	3728      	adds	r7, #40	; 0x28
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40021000 	.word	0x40021000
 80002d0:	48001000 	.word	0x48001000

080002d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <MX_I2C1_Init+0x74>)
 80002da:	4a1c      	ldr	r2, [pc, #112]	; (800034c <MX_I2C1_Init+0x78>)
 80002dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002de:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <MX_I2C1_Init+0x74>)
 80002e0:	4a1b      	ldr	r2, [pc, #108]	; (8000350 <MX_I2C1_Init+0x7c>)
 80002e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_I2C1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ea:	4b17      	ldr	r3, [pc, #92]	; (8000348 <MX_I2C1_Init+0x74>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <MX_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002f6:	4b14      	ldr	r3, [pc, #80]	; (8000348 <MX_I2C1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_I2C1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_I2C1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800030e:	480e      	ldr	r0, [pc, #56]	; (8000348 <MX_I2C1_Init+0x74>)
 8000310:	f000 febe 	bl	8001090 <HAL_I2C_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800031a:	f000 f9d7 	bl	80006cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800031e:	2100      	movs	r1, #0
 8000320:	4809      	ldr	r0, [pc, #36]	; (8000348 <MX_I2C1_Init+0x74>)
 8000322:	f001 fc27 	bl	8001b74 <HAL_I2CEx_ConfigAnalogFilter>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800032c:	f000 f9ce 	bl	80006cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000330:	2100      	movs	r1, #0
 8000332:	4805      	ldr	r0, [pc, #20]	; (8000348 <MX_I2C1_Init+0x74>)
 8000334:	f001 fc69 	bl	8001c0a <HAL_I2CEx_ConfigDigitalFilter>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800033e:	f000 f9c5 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000028 	.word	0x20000028
 800034c:	40005400 	.word	0x40005400
 8000350:	2000090e 	.word	0x2000090e

08000354 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MX_I2C2_Init+0x74>)
 800035a:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <MX_I2C2_Init+0x78>)
 800035c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000360:	4a1b      	ldr	r2, [pc, #108]	; (80003d0 <MX_I2C2_Init+0x7c>)
 8000362:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <MX_I2C2_Init+0x74>)
 800036c:	2201      	movs	r2, #1
 800036e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000378:	2200      	movs	r2, #0
 800037a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_I2C2_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_I2C2_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800038e:	480e      	ldr	r0, [pc, #56]	; (80003c8 <MX_I2C2_Init+0x74>)
 8000390:	f000 fe7e 	bl	8001090 <HAL_I2C_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800039a:	f000 f997 	bl	80006cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800039e:	2100      	movs	r1, #0
 80003a0:	4809      	ldr	r0, [pc, #36]	; (80003c8 <MX_I2C2_Init+0x74>)
 80003a2:	f001 fbe7 	bl	8001b74 <HAL_I2CEx_ConfigAnalogFilter>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003ac:	f000 f98e 	bl	80006cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003b0:	2100      	movs	r1, #0
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <MX_I2C2_Init+0x74>)
 80003b4:	f001 fc29 	bl	8001c0a <HAL_I2CEx_ConfigDigitalFilter>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003be:	f000 f985 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000074 	.word	0x20000074
 80003cc:	40005800 	.word	0x40005800
 80003d0:	2000090e 	.word	0x2000090e

080003d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08c      	sub	sp, #48	; 0x30
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003dc:	f107 031c 	add.w	r3, r7, #28
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a2f      	ldr	r2, [pc, #188]	; (80004b0 <HAL_I2C_MspInit+0xdc>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d128      	bne.n	8000448 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f6:	4b2f      	ldr	r3, [pc, #188]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a2e      	ldr	r2, [pc, #184]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 80003fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800040a:	61bb      	str	r3, [r7, #24]
 800040c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800040e:	23c0      	movs	r3, #192	; 0xc0
 8000410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000412:	2312      	movs	r3, #18
 8000414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000416:	2301      	movs	r3, #1
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800041a:	2303      	movs	r3, #3
 800041c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800041e:	2304      	movs	r3, #4
 8000420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	4619      	mov	r1, r3
 8000428:	4823      	ldr	r0, [pc, #140]	; (80004b8 <HAL_I2C_MspInit+0xe4>)
 800042a:	f000 fc9f 	bl	8000d6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a20      	ldr	r2, [pc, #128]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000434:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000446:	e02e      	b.n	80004a6 <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C2)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <HAL_I2C_MspInit+0xe8>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d129      	bne.n	80004a6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800046a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800046e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000470:	2312      	movs	r3, #18
 8000472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000478:	2303      	movs	r3, #3
 800047a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800047c:	2304      	movs	r3, #4
 800047e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	f107 031c 	add.w	r3, r7, #28
 8000484:	4619      	mov	r1, r3
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f000 fc6f 	bl	8000d6c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 8000494:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_I2C_MspInit+0xe0>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
}
 80004a6:	bf00      	nop
 80004a8:	3730      	adds	r7, #48	; 0x30
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40005400 	.word	0x40005400
 80004b4:	40021000 	.word	0x40021000
 80004b8:	48000400 	.word	0x48000400
 80004bc:	40005800 	.word	0x40005800

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fb06 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f828 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f7ff fe84 	bl	80001d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f7ff ff00 	bl	80002d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004d4:	f000 f91a 	bl	800070c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80004d8:	f000 fa6c 	bl	80009b4 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 80004dc:	f7ff ff3a 	bl	8000354 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f9f4 	bl	80008cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LogMessage("Initializing I2C...\r\n");
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <main+0x48>)
 80004e6:	f000 f8db 	bl	80006a0 <LogMessage>
  HAL_I2C_MspInit(&hi2c2);	// initializes the GPIO I2C pins (SDA and SCL), initializes I2C clock
 80004ea:	4808      	ldr	r0, [pc, #32]	; (800050c <main+0x4c>)
 80004ec:	f7ff ff72 	bl	80003d4 <HAL_I2C_MspInit>
  LogMessage("I2C initialization complete\r\n");
 80004f0:	4807      	ldr	r0, [pc, #28]	; (8000510 <main+0x50>)
 80004f2:	f000 f8d5 	bl	80006a0 <LogMessage>

  LogMessage("Initializing TMP102 sensor...\r\n");
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x54>)
 80004f8:	f000 f8d2 	bl	80006a0 <LogMessage>
  Tmp102Init();
 80004fc:	f000 f874 	bl	80005e8 <Tmp102Init>
  LogMessage("TMP102 sensor initialization complete\r\n");
 8000500:	4805      	ldr	r0, [pc, #20]	; (8000518 <main+0x58>)
 8000502:	f000 f8cd 	bl	80006a0 <LogMessage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000506:	e7fe      	b.n	8000506 <main+0x46>
 8000508:	080041b8 	.word	0x080041b8
 800050c:	20000074 	.word	0x20000074
 8000510:	080041d0 	.word	0x080041d0
 8000514:	080041f0 	.word	0x080041f0
 8000518:	08004210 	.word	0x08004210

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b09e      	sub	sp, #120	; 0x78
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000526:	2228      	movs	r2, #40	; 0x28
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fe30 	bl	8004190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	223c      	movs	r2, #60	; 0x3c
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fe22 	bl	8004190 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800054c:	2303      	movs	r3, #3
 800054e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000550:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000554:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055e:	2310      	movs	r3, #16
 8000560:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800056c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000570:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fc72 	bl	8001e60 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000582:	f000 f8a3 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2302      	movs	r3, #2
 800058c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005a0:	2101      	movs	r1, #1
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fc9a 	bl	8002edc <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 f88d 	bl	80006cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <SystemClock_Config+0xc8>)
 80005b4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 febc 	bl	8003348 <HAL_RCCEx_PeriphCLKConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005d6:	f000 f879 	bl	80006cc <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3778      	adds	r7, #120	; 0x78
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	00020061 	.word	0x00020061

080005e8 <Tmp102Init>:

/* USER CODE BEGIN 4 */
void Tmp102Init()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af02      	add	r7, sp, #8

	  uint32_t trials = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
	  uint32_t timeout = 1000; // milliseconds
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	613b      	str	r3, [r7, #16]
	  // TODO figure out why changing the tmp102 address to other available addresses doesn't work.
	  // TODO figure out why we had to left-shift the address by 1
	  if(HAL_I2C_IsDeviceReady(&hi2c2, tmp102Address, trials, timeout) != HAL_OK)
 80005f8:	2190      	movs	r1, #144	; 0x90
 80005fa:	693b      	ldr	r3, [r7, #16]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	4824      	ldr	r0, [pc, #144]	; (8000690 <Tmp102Init+0xa8>)
 8000600:	f000 ffc0 	bl	8001584 <HAL_I2C_IsDeviceReady>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <Tmp102Init+0x28>
	  {
		  Error_Handler();
 800060a:	f000 f85f 	bl	80006cc <Error_Handler>
 800060e:	e002      	b.n	8000616 <Tmp102Init+0x2e>
	  }
	  else
	  {
		   LogMessage("TMP102 sensor ACK received\r\n");
 8000610:	4820      	ldr	r0, [pc, #128]	; (8000694 <Tmp102Init+0xac>)
 8000612:	f000 f845 	bl	80006a0 <LogMessage>
	  }

	  // Check if TMP102 is in the default configuration ("Section 7.5.3 Configuration Register" of TMP102 Datasheet)
	  const uint16_t defaultConfigMSB = 0x60;
 8000616:	2360      	movs	r3, #96	; 0x60
 8000618:	81fb      	strh	r3, [r7, #14]
	  const uint16_t defaultConfigLSB = 0xA0;
 800061a:	23a0      	movs	r3, #160	; 0xa0
 800061c:	81bb      	strh	r3, [r7, #12]
//	  const uint32_t defaultConfigVal = (uint32_t) defaultConfigMSB + (uint32_t) defaultConfigLSB;

	  // TODO Study I2C_TransferConfig method
	  uint8_t readBuffer[2] = {'\0'};
 800061e:	2300      	movs	r3, #0
 8000620:	813b      	strh	r3, [r7, #8]
	  uint16_t registerPtr = 0x01; // tmp102's pointer register value of 0x01 indicates access to the configuration register
 8000622:	2301      	movs	r3, #1
 8000624:	80fb      	strh	r3, [r7, #6]

	  // set the register pointer's value to the register wanted to be read
	  if(HAL_I2C_Master_Transmit(&hi2c2, tmp102Address, &registerPtr, sizeof(uint8_t), timeout) != HAL_OK)
 8000626:	2190      	movs	r1, #144	; 0x90
 8000628:	1dba      	adds	r2, r7, #6
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	4817      	ldr	r0, [pc, #92]	; (8000690 <Tmp102Init+0xa8>)
 8000632:	f000 fdbd 	bl	80011b0 <HAL_I2C_Master_Transmit>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <Tmp102Init+0x5a>
	  {
		  Error_Handler();
 800063c:	f000 f846 	bl	80006cc <Error_Handler>
 8000640:	e002      	b.n	8000648 <Tmp102Init+0x60>
	  }
	  else
	  {
		  LogMessage("TMP102 Register Pointer write success\r\n");
 8000642:	4815      	ldr	r0, [pc, #84]	; (8000698 <Tmp102Init+0xb0>)
 8000644:	f000 f82c 	bl	80006a0 <LogMessage>
	  }

	  // receive the 2 x 8bit (2 bytes) data into the readBuffer
	  if(HAL_I2C_Master_Receive(&hi2c2, tmp102Address, readBuffer, sizeof(uint16_t), timeout) != HAL_OK)
 8000648:	2190      	movs	r1, #144	; 0x90
 800064a:	f107 0208 	add.w	r2, r7, #8
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2302      	movs	r3, #2
 8000654:	480e      	ldr	r0, [pc, #56]	; (8000690 <Tmp102Init+0xa8>)
 8000656:	f000 fe9f 	bl	8001398 <HAL_I2C_Master_Receive>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <Tmp102Init+0x7e>
	  {
		  Error_Handler();
 8000660:	f000 f834 	bl	80006cc <Error_Handler>
//		  }
//	  }



}
 8000664:	e00f      	b.n	8000686 <Tmp102Init+0x9e>
		  if(readBuffer[0] == defaultConfigMSB && readBuffer[1] == defaultConfigLSB)
 8000666:	7a3b      	ldrb	r3, [r7, #8]
 8000668:	b29b      	uxth	r3, r3
 800066a:	89fa      	ldrh	r2, [r7, #14]
 800066c:	429a      	cmp	r2, r3
 800066e:	d108      	bne.n	8000682 <Tmp102Init+0x9a>
 8000670:	7a7b      	ldrb	r3, [r7, #9]
 8000672:	b29b      	uxth	r3, r3
 8000674:	89ba      	ldrh	r2, [r7, #12]
 8000676:	429a      	cmp	r2, r3
 8000678:	d103      	bne.n	8000682 <Tmp102Init+0x9a>
			  LogMessage("TMP102 Configuration Register in default configuration\r\n");
 800067a:	4808      	ldr	r0, [pc, #32]	; (800069c <Tmp102Init+0xb4>)
 800067c:	f000 f810 	bl	80006a0 <LogMessage>
}
 8000680:	e001      	b.n	8000686 <Tmp102Init+0x9e>
			  Error_Handler();
 8000682:	f000 f823 	bl	80006cc <Error_Handler>
}
 8000686:	bf00      	nop
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000074 	.word	0x20000074
 8000694:	08004238 	.word	0x08004238
 8000698:	08004258 	.word	0x08004258
 800069c:	08004280 	.word	0x08004280

080006a0 <LogMessage>:
/*
 *  Displays contents of msgStr to console
 *  NOTE: Uses USART1
 */
void LogMessage(int8_t* msgStr)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	  const int timeoutMs = 100;
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart1, msgStr, strlen(msgStr), timeoutMs);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff fd8b 	bl	80001c8 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <LogMessage+0x28>)
 80006bc:	f003 f8ed 	bl	800389a <HAL_UART_Transmit>
};
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000124 	.word	0x20000124

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b08c      	sub	sp, #48	; 0x30
 80006d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d2:	b672      	cpsid	i
}
 80006d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  char errMsg[] = "Error encountered. Terminate the program\r\n";
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <Error_Handler+0x38>)
 80006d8:	1d3c      	adds	r4, r7, #4
 80006da:	461d      	mov	r5, r3
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e8:	c403      	stmia	r4!, {r0, r1}
 80006ea:	8022      	strh	r2, [r4, #0]
 80006ec:	3402      	adds	r4, #2
 80006ee:	0c13      	lsrs	r3, r2, #16
 80006f0:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, errMsg, sizeof(errMsg), HAL_MAX_DELAY);
 80006f2:	1d39      	adds	r1, r7, #4
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	222b      	movs	r2, #43	; 0x2b
 80006fa:	4803      	ldr	r0, [pc, #12]	; (8000708 <Error_Handler+0x3c>)
 80006fc:	f003 f8cd 	bl	800389a <HAL_UART_Transmit>

  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x34>
 8000702:	bf00      	nop
 8000704:	080042bc 	.word	0x080042bc
 8000708:	20000124 	.word	0x20000124

0800070c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_SPI1_Init+0x74>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_SPI1_Init+0x78>)
 8000714:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_SPI1_Init+0x74>)
 8000718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800071c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_SPI1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI1_Init+0x74>)
 8000726:	f44f 7240 	mov.w	r2, #768	; 0x300
 800072a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_SPI1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI1_Init+0x74>)
 800073a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI1_Init+0x74>)
 8000742:	2208      	movs	r2, #8
 8000744:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI1_Init+0x74>)
 800075a:	2207      	movs	r2, #7
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_SPI1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI1_Init+0x74>)
 8000766:	2208      	movs	r2, #8
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_SPI1_Init+0x74>)
 800076c:	f002 ff9c 	bl	80036a8 <HAL_SPI_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000776:	f7ff ffa9 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000c0 	.word	0x200000c0
 8000784:	40013000 	.word	0x40013000

08000788 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <HAL_SPI_MspInit+0x7c>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d128      	bne.n	80007fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <HAL_SPI_MspInit+0x80>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a16      	ldr	r2, [pc, #88]	; (8000808 <HAL_SPI_MspInit+0x80>)
 80007b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <HAL_SPI_MspInit+0x80>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <HAL_SPI_MspInit+0x80>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <HAL_SPI_MspInit+0x80>)
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <HAL_SPI_MspInit+0x80>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80007da:	23e0      	movs	r3, #224	; 0xe0
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ea:	2305      	movs	r3, #5
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f000 fab8 	bl	8000d6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40013000 	.word	0x40013000
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x44>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_MspInit+0x44>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x44>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x44>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x44>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x44>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000842:	2007      	movs	r0, #7
 8000844:	f000 fa5e 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f95e 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <SystemInit+0x20>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <SystemInit+0x20>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <MX_USART1_UART_Init+0x5c>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART1_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART1_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART1_UART_Init+0x58>)
 8000910:	f002 ff75 	bl	80037fe <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800091a:	f7ff fed7 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000124 	.word	0x20000124
 8000928:	40013800 	.word	0x40013800

0800092c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_UART_MspInit+0x7c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d127      	bne.n	800099e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_UART_MspInit+0x80>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <HAL_UART_MspInit+0x80>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_UART_MspInit+0x80>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0x80>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_UART_MspInit+0x80>)
 800096c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_MspInit+0x80>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800097e:	2330      	movs	r3, #48	; 0x30
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800098e:	2307      	movs	r3, #7
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <HAL_UART_MspInit+0x84>)
 800099a:	f000 f9e7 	bl	8000d6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40013800 	.word	0x40013800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48000800 	.word	0x48000800

080009b4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_USB_PCD_Init+0x3c>)
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <MX_USB_PCD_Init+0x40>)
 80009bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USB_PCD_Init+0x3c>)
 80009c0:	2208      	movs	r2, #8
 80009c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_USB_PCD_Init+0x3c>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USB_PCD_Init+0x3c>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_USB_PCD_Init+0x3c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USB_PCD_Init+0x3c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_USB_PCD_Init+0x3c>)
 80009de:	f001 f960 	bl	8001ca2 <HAL_PCD_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80009e8:	f7ff fe70 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200001a8 	.word	0x200001a8
 80009f4:	40005c00 	.word	0x40005c00

080009f8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <HAL_PCD_MspInit+0x80>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d129      	bne.n	8000a6e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_PCD_MspInit+0x84>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <HAL_PCD_MspInit+0x84>)
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	6153      	str	r3, [r2, #20]
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_PCD_MspInit+0x84>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a44:	230e      	movs	r3, #14
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f000 f98b 	bl	8000d6c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_PCD_MspInit+0x84>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_PCD_MspInit+0x84>)
 8000a5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_PCD_MspInit+0x84>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3728      	adds	r7, #40	; 0x28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40005c00 	.word	0x40005c00
 8000a7c:	40021000 	.word	0x40021000

08000a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490e      	ldr	r1, [pc, #56]	; (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0b      	ldr	r4, [pc, #44]	; (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aaa:	f7ff fefd 	bl	80008a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f003 fb4b 	bl	8004148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab2:	f7ff fd05 	bl	80004c0 <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ab8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac4:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 8000ac8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000acc:	20000498 	.word	0x20000498

08000ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_2_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_Init+0x28>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_Init+0x28>)
 8000ade:	f043 0310 	orr.w	r3, r3, #16
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f90d 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 f808 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff fe8c 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40022000 	.word	0x40022000

08000b00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x54>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_InitTick+0x58>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f917 	bl	8000d52 <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00e      	b.n	8000b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d80a      	bhi.n	8000b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f000 f8ed 	bl	8000d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <HAL_InitTick+0x5c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000494 	.word	0x20000494

08000b88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000494 	.word	0x20000494

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	; (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd0:	d301      	bcc.n	8000cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00f      	b.n	8000cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <SysTick_Config+0x40>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cde:	210f      	movs	r1, #15
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f7ff ff8e 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <SysTick_Config+0x40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SysTick_Config+0x40>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff47 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2c:	f7ff ff5c 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff ff8e 	bl	8000c58 <NVIC_EncodePriority>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff5d 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffb0 	bl	8000cc0 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7a:	e154      	b.n	8001026 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2101      	movs	r1, #1
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8146 	beq.w	8001020 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d005      	beq.n	8000dac <HAL_GPIO_Init+0x40>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d130      	bne.n	8000e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de2:	2201      	movs	r2, #1
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	091b      	lsrs	r3, r3, #4
 8000df8:	f003 0201 	and.w	r2, r3, #1
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d017      	beq.n	8000e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2203      	movs	r2, #3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d123      	bne.n	8000e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	220f      	movs	r2, #15
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	691a      	ldr	r2, [r3, #16]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	08da      	lsrs	r2, r3, #3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3208      	adds	r2, #8
 8000e98:	6939      	ldr	r1, [r7, #16]
 8000e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0203 	and.w	r2, r3, #3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 80a0 	beq.w	8001020 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee0:	4b58      	ldr	r3, [pc, #352]	; (8001044 <HAL_GPIO_Init+0x2d8>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a57      	ldr	r2, [pc, #348]	; (8001044 <HAL_GPIO_Init+0x2d8>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b55      	ldr	r3, [pc, #340]	; (8001044 <HAL_GPIO_Init+0x2d8>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef8:	4a53      	ldr	r2, [pc, #332]	; (8001048 <HAL_GPIO_Init+0x2dc>)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f22:	d019      	beq.n	8000f58 <HAL_GPIO_Init+0x1ec>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a49      	ldr	r2, [pc, #292]	; (800104c <HAL_GPIO_Init+0x2e0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d013      	beq.n	8000f54 <HAL_GPIO_Init+0x1e8>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a48      	ldr	r2, [pc, #288]	; (8001050 <HAL_GPIO_Init+0x2e4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d00d      	beq.n	8000f50 <HAL_GPIO_Init+0x1e4>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a47      	ldr	r2, [pc, #284]	; (8001054 <HAL_GPIO_Init+0x2e8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d007      	beq.n	8000f4c <HAL_GPIO_Init+0x1e0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a46      	ldr	r2, [pc, #280]	; (8001058 <HAL_GPIO_Init+0x2ec>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d101      	bne.n	8000f48 <HAL_GPIO_Init+0x1dc>
 8000f44:	2304      	movs	r3, #4
 8000f46:	e008      	b.n	8000f5a <HAL_GPIO_Init+0x1ee>
 8000f48:	2305      	movs	r3, #5
 8000f4a:	e006      	b.n	8000f5a <HAL_GPIO_Init+0x1ee>
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e004      	b.n	8000f5a <HAL_GPIO_Init+0x1ee>
 8000f50:	2302      	movs	r3, #2
 8000f52:	e002      	b.n	8000f5a <HAL_GPIO_Init+0x1ee>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <HAL_GPIO_Init+0x1ee>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	f002 0203 	and.w	r2, r2, #3
 8000f60:	0092      	lsls	r2, r2, #2
 8000f62:	4093      	lsls	r3, r2
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f6a:	4937      	ldr	r1, [pc, #220]	; (8001048 <HAL_GPIO_Init+0x2dc>)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	3302      	adds	r3, #2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f78:	4b38      	ldr	r3, [pc, #224]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f9c:	4a2f      	ldr	r2, [pc, #188]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fc6:	4a25      	ldr	r2, [pc, #148]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ff0:	4a1a      	ldr	r2, [pc, #104]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800101a:	4a10      	ldr	r2, [pc, #64]	; (800105c <HAL_GPIO_Init+0x2f0>)
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	f47f aea3 	bne.w	8000d7c <HAL_GPIO_Init+0x10>
  }
}
 8001036:	bf00      	nop
 8001038:	bf00      	nop
 800103a:	371c      	adds	r7, #28
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	40021000 	.word	0x40021000
 8001048:	40010000 	.word	0x40010000
 800104c:	48000400 	.word	0x48000400
 8001050:	48000800 	.word	0x48000800
 8001054:	48000c00 	.word	0x48000c00
 8001058:	48001000 	.word	0x48001000
 800105c:	40010400 	.word	0x40010400

08001060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800107c:	e002      	b.n	8001084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e081      	b.n	80011a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d106      	bne.n	80010bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff f98c 	bl	80003d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2224      	movs	r2, #36	; 0x24
 80010c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d107      	bne.n	800110a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	e006      	b.n	8001118 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001116:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d104      	bne.n	800112a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001128:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800114c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69d9      	ldr	r1, [r3, #28]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2220      	movs	r2, #32
 8001192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	461a      	mov	r2, r3
 80011bc:	460b      	mov	r3, r1
 80011be:	817b      	strh	r3, [r7, #10]
 80011c0:	4613      	mov	r3, r2
 80011c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b20      	cmp	r3, #32
 80011ce:	f040 80da 	bne.w	8001386 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_I2C_Master_Transmit+0x30>
 80011dc:	2302      	movs	r3, #2
 80011de:	e0d3      	b.n	8001388 <HAL_I2C_Master_Transmit+0x1d8>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011e8:	f7ff fcce 	bl	8000b88 <HAL_GetTick>
 80011ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2319      	movs	r3, #25
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 faed 	bl	80017da <I2C_WaitOnFlagUntilTimeout>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e0be      	b.n	8001388 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2221      	movs	r2, #33	; 0x21
 800120e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2210      	movs	r2, #16
 8001216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	893a      	ldrh	r2, [r7, #8]
 800122a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2200      	movs	r2, #0
 8001230:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001236:	b29b      	uxth	r3, r3
 8001238:	2bff      	cmp	r3, #255	; 0xff
 800123a:	d90e      	bls.n	800125a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	22ff      	movs	r2, #255	; 0xff
 8001240:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001246:	b2da      	uxtb	r2, r3
 8001248:	8979      	ldrh	r1, [r7, #10]
 800124a:	4b51      	ldr	r3, [pc, #324]	; (8001390 <HAL_I2C_Master_Transmit+0x1e0>)
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 fc60 	bl	8001b18 <I2C_TransferConfig>
 8001258:	e06c      	b.n	8001334 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800125e:	b29a      	uxth	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001268:	b2da      	uxtb	r2, r3
 800126a:	8979      	ldrh	r1, [r7, #10]
 800126c:	4b48      	ldr	r3, [pc, #288]	; (8001390 <HAL_I2C_Master_Transmit+0x1e0>)
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fc4f 	bl	8001b18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800127a:	e05b      	b.n	8001334 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	6a39      	ldr	r1, [r7, #32]
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f000 faea 	bl	800185a <I2C_WaitOnTXISFlagUntilTimeout>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e07b      	b.n	8001388 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	781a      	ldrb	r2, [r3, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	3b01      	subs	r3, #1
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d034      	beq.n	8001334 <HAL_I2C_Master_Transmit+0x184>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d130      	bne.n	8001334 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	2200      	movs	r2, #0
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 fa7c 	bl	80017da <I2C_WaitOnFlagUntilTimeout>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e04d      	b.n	8001388 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	2bff      	cmp	r3, #255	; 0xff
 80012f4:	d90e      	bls.n	8001314 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001300:	b2da      	uxtb	r2, r3
 8001302:	8979      	ldrh	r1, [r7, #10]
 8001304:	2300      	movs	r3, #0
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f000 fc03 	bl	8001b18 <I2C_TransferConfig>
 8001312:	e00f      	b.n	8001334 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001318:	b29a      	uxth	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001322:	b2da      	uxtb	r2, r3
 8001324:	8979      	ldrh	r1, [r7, #10]
 8001326:	2300      	movs	r3, #0
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f000 fbf2 	bl	8001b18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001338:	b29b      	uxth	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d19e      	bne.n	800127c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	6a39      	ldr	r1, [r7, #32]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 fac9 	bl	80018da <I2C_WaitOnSTOPFlagUntilTimeout>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e01a      	b.n	8001388 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2220      	movs	r2, #32
 8001358:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6859      	ldr	r1, [r3, #4]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_I2C_Master_Transmit+0x1e4>)
 8001366:	400b      	ands	r3, r1
 8001368:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2220      	movs	r2, #32
 800136e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001386:	2302      	movs	r3, #2
  }
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	80002000 	.word	0x80002000
 8001394:	fe00e800 	.word	0xfe00e800

08001398 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af02      	add	r7, sp, #8
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	461a      	mov	r2, r3
 80013a4:	460b      	mov	r3, r1
 80013a6:	817b      	strh	r3, [r7, #10]
 80013a8:	4613      	mov	r3, r2
 80013aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b20      	cmp	r3, #32
 80013b6:	f040 80db 	bne.w	8001570 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <HAL_I2C_Master_Receive+0x30>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e0d4      	b.n	8001572 <HAL_I2C_Master_Receive+0x1da>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013d0:	f7ff fbda 	bl	8000b88 <HAL_GetTick>
 80013d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2319      	movs	r3, #25
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 f9f9 	bl	80017da <I2C_WaitOnFlagUntilTimeout>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0bf      	b.n	8001572 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2222      	movs	r2, #34	; 0x22
 80013f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2210      	movs	r2, #16
 80013fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	893a      	ldrh	r2, [r7, #8]
 8001412:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141e:	b29b      	uxth	r3, r3
 8001420:	2bff      	cmp	r3, #255	; 0xff
 8001422:	d90e      	bls.n	8001442 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	22ff      	movs	r2, #255	; 0xff
 8001428:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142e:	b2da      	uxtb	r2, r3
 8001430:	8979      	ldrh	r1, [r7, #10]
 8001432:	4b52      	ldr	r3, [pc, #328]	; (800157c <HAL_I2C_Master_Receive+0x1e4>)
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f000 fb6c 	bl	8001b18 <I2C_TransferConfig>
 8001440:	e06d      	b.n	800151e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001446:	b29a      	uxth	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001450:	b2da      	uxtb	r2, r3
 8001452:	8979      	ldrh	r1, [r7, #10]
 8001454:	4b49      	ldr	r3, [pc, #292]	; (800157c <HAL_I2C_Master_Receive+0x1e4>)
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f000 fb5b 	bl	8001b18 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001462:	e05c      	b.n	800151e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	6a39      	ldr	r1, [r7, #32]
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 fa73 	bl	8001954 <I2C_WaitOnRXNEFlagUntilTimeout>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e07c      	b.n	8001572 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001494:	3b01      	subs	r3, #1
 8001496:	b29a      	uxth	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d034      	beq.n	800151e <HAL_I2C_Master_Receive+0x186>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d130      	bne.n	800151e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	2200      	movs	r2, #0
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 f987 	bl	80017da <I2C_WaitOnFlagUntilTimeout>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e04d      	b.n	8001572 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014da:	b29b      	uxth	r3, r3
 80014dc:	2bff      	cmp	r3, #255	; 0xff
 80014de:	d90e      	bls.n	80014fe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	22ff      	movs	r2, #255	; 0xff
 80014e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	8979      	ldrh	r1, [r7, #10]
 80014ee:	2300      	movs	r3, #0
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 fb0e 	bl	8001b18 <I2C_TransferConfig>
 80014fc:	e00f      	b.n	800151e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001502:	b29a      	uxth	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150c:	b2da      	uxtb	r2, r3
 800150e:	8979      	ldrh	r1, [r7, #10]
 8001510:	2300      	movs	r3, #0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 fafd 	bl	8001b18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001522:	b29b      	uxth	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d19d      	bne.n	8001464 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	6a39      	ldr	r1, [r7, #32]
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f9d4 	bl	80018da <I2C_WaitOnSTOPFlagUntilTimeout>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e01a      	b.n	8001572 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2220      	movs	r2, #32
 8001542:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6859      	ldr	r1, [r3, #4]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_I2C_Master_Receive+0x1e8>)
 8001550:	400b      	ands	r3, r1
 8001552:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2220      	movs	r2, #32
 8001558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	e000      	b.n	8001572 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001570:	2302      	movs	r3, #2
  }
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	80002400 	.word	0x80002400
 8001580:	fe00e800 	.word	0xfe00e800

08001584 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af02      	add	r7, sp, #8
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	460b      	mov	r3, r1
 8001592:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b20      	cmp	r3, #32
 80015a2:	f040 80f1 	bne.w	8001788 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015b4:	d101      	bne.n	80015ba <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80015b6:	2302      	movs	r3, #2
 80015b8:	e0e7      	b.n	800178a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_I2C_IsDeviceReady+0x44>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e0e0      	b.n	800178a <HAL_I2C_IsDeviceReady+0x206>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2224      	movs	r2, #36	; 0x24
 80015d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2200      	movs	r2, #0
 80015dc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d107      	bne.n	80015f6 <HAL_I2C_IsDeviceReady+0x72>
 80015e6:	897b      	ldrh	r3, [r7, #10]
 80015e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015f4:	e004      	b.n	8001600 <HAL_I2C_IsDeviceReady+0x7c>
 80015f6:	897b      	ldrh	r3, [r7, #10]
 80015f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015fc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001606:	f7ff fabf 	bl	8000b88 <HAL_GetTick>
 800160a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	2b20      	cmp	r3, #32
 8001618:	bf0c      	ite	eq
 800161a:	2301      	moveq	r3, #1
 800161c:	2300      	movne	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	2b10      	cmp	r3, #16
 800162e:	bf0c      	ite	eq
 8001630:	2301      	moveq	r3, #1
 8001632:	2300      	movne	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001638:	e034      	b.n	80016a4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d01a      	beq.n	8001678 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001642:	f7ff faa1 	bl	8000b88 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d302      	bcc.n	8001658 <HAL_I2C_IsDeviceReady+0xd4>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10f      	bne.n	8001678 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2220      	movs	r2, #32
 800165c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	f043 0220 	orr.w	r2, r3, #32
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e088      	b.n	800178a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	2b20      	cmp	r3, #32
 8001684:	bf0c      	ite	eq
 8001686:	2301      	moveq	r3, #1
 8001688:	2300      	movne	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b10      	cmp	r3, #16
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80016a4:	7ffb      	ldrb	r3, [r7, #31]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <HAL_I2C_IsDeviceReady+0x12c>
 80016aa:	7fbb      	ldrb	r3, [r7, #30]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0c4      	beq.n	800163a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d01a      	beq.n	80016f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2200      	movs	r2, #0
 80016c6:	2120      	movs	r1, #32
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 f886 	bl	80017da <I2C_WaitOnFlagUntilTimeout>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e058      	b.n	800178a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2220      	movs	r2, #32
 80016de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2220      	movs	r2, #32
 80016e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e04a      	b.n	800178a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	2200      	movs	r2, #0
 80016fc:	2120      	movs	r1, #32
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f86b 	bl	80017da <I2C_WaitOnFlagUntilTimeout>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e03d      	b.n	800178a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2210      	movs	r2, #16
 8001714:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2220      	movs	r2, #32
 800171c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	429a      	cmp	r2, r3
 8001724:	d118      	bne.n	8001758 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001734:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2200      	movs	r2, #0
 800173e:	2120      	movs	r1, #32
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 f84a 	bl	80017da <I2C_WaitOnFlagUntilTimeout>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e01c      	b.n	800178a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2220      	movs	r2, #32
 8001756:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	f63f af3b 	bhi.w	80015de <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2220      	movs	r2, #32
 800176c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	f043 0220 	orr.w	r2, r3, #32
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001788:	2302      	movs	r3, #2
  }
}
 800178a:	4618      	mov	r0, r3
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d103      	bne.n	80017b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d007      	beq.n	80017ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0201 	orr.w	r2, r2, #1
 80017cc:	619a      	str	r2, [r3, #24]
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	4613      	mov	r3, r2
 80017e8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017ea:	e022      	b.n	8001832 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f2:	d01e      	beq.n	8001832 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017f4:	f7ff f9c8 	bl	8000b88 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d302      	bcc.n	800180a <I2C_WaitOnFlagUntilTimeout+0x30>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d113      	bne.n	8001832 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	f043 0220 	orr.w	r2, r3, #32
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2220      	movs	r2, #32
 800181a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699a      	ldr	r2, [r3, #24]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4013      	ands	r3, r2
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	429a      	cmp	r2, r3
 8001840:	bf0c      	ite	eq
 8001842:	2301      	moveq	r3, #1
 8001844:	2300      	movne	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	429a      	cmp	r2, r3
 800184e:	d0cd      	beq.n	80017ec <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001866:	e02c      	b.n	80018c2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	68b9      	ldr	r1, [r7, #8]
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 f8dd 	bl	8001a2c <I2C_IsAcknowledgeFailed>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e02a      	b.n	80018d2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001882:	d01e      	beq.n	80018c2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001884:	f7ff f980 	bl	8000b88 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	429a      	cmp	r2, r3
 8001892:	d302      	bcc.n	800189a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d113      	bne.n	80018c2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f043 0220 	orr.w	r2, r3, #32
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e007      	b.n	80018d2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d1cb      	bne.n	8001868 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018e6:	e028      	b.n	800193a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f89d 	bl	8001a2c <I2C_IsAcknowledgeFailed>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e026      	b.n	800194a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fc:	f7ff f944 	bl	8000b88 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	429a      	cmp	r2, r3
 800190a:	d302      	bcc.n	8001912 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d113      	bne.n	800193a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f043 0220 	orr.w	r2, r3, #32
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2220      	movs	r2, #32
 8001922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e007      	b.n	800194a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b20      	cmp	r3, #32
 8001946:	d1cf      	bne.n	80018e8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001960:	e055      	b.n	8001a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 f860 	bl	8001a2c <I2C_IsAcknowledgeFailed>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e053      	b.n	8001a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b20      	cmp	r3, #32
 8001982:	d129      	bne.n	80019d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b04      	cmp	r3, #4
 8001990:	d105      	bne.n	800199e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e03f      	b.n	8001a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2220      	movs	r2, #32
 80019a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80019b2:	400b      	ands	r3, r1
 80019b4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2220      	movs	r2, #32
 80019c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e022      	b.n	8001a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d8:	f7ff f8d6 	bl	8000b88 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d302      	bcc.n	80019ee <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10f      	bne.n	8001a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f043 0220 	orr.w	r2, r3, #32
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2220      	movs	r2, #32
 80019fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e007      	b.n	8001a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d1a2      	bne.n	8001962 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	fe00e800 	.word	0xfe00e800

08001a2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d161      	bne.n	8001b0a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a54:	d02b      	beq.n	8001aae <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a64:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a66:	e022      	b.n	8001aae <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6e:	d01e      	beq.n	8001aae <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a70:	f7ff f88a 	bl	8000b88 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d302      	bcc.n	8001a86 <I2C_IsAcknowledgeFailed+0x5a>
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d113      	bne.n	8001aae <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f043 0220 	orr.w	r2, r3, #32
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e02e      	b.n	8001b0c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	2b20      	cmp	r3, #32
 8001aba:	d1d5      	bne.n	8001a68 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f7ff fe60 	bl	8001792 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <I2C_IsAcknowledgeFailed+0xe8>)
 8001ade:	400b      	ands	r3, r1
 8001ae0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f043 0204 	orr.w	r2, r3, #4
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	fe00e800 	.word	0xfe00e800

08001b18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	817b      	strh	r3, [r7, #10]
 8001b26:	4613      	mov	r3, r2
 8001b28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	0d5b      	lsrs	r3, r3, #21
 8001b34:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <I2C_TransferConfig+0x58>)
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	ea02 0103 	and.w	r1, r2, r3
 8001b42:	897b      	ldrh	r3, [r7, #10]
 8001b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b48:	7a7b      	ldrb	r3, [r7, #9]
 8001b4a:	041b      	lsls	r3, r3, #16
 8001b4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	03ff63ff 	.word	0x03ff63ff

08001b74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d138      	bne.n	8001bfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e032      	b.n	8001bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2224      	movs	r2, #36	; 0x24
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6819      	ldr	r1, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e000      	b.n	8001bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
  }
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d139      	bne.n	8001c94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e033      	b.n	8001c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2224      	movs	r2, #36	; 0x24
 8001c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0201 	bic.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e000      	b.n	8001c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
  }
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca4:	b08b      	sub	sp, #44	; 0x2c
 8001ca6:	af06      	add	r7, sp, #24
 8001ca8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0d0      	b.n	8001e56 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d106      	bne.n	8001cce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7fe fe95 	bl	80009f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 f9f7 	bl	80040ce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	e04c      	b.n	8001d80 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	b298      	uxth	r0, r3
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	3336      	adds	r3, #54	; 0x36
 8001d24:	4602      	mov	r2, r0
 8001d26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	3303      	adds	r3, #3
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3338      	adds	r3, #56	; 0x38
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	333c      	adds	r3, #60	; 0x3c
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	440b      	add	r3, r1
 8001d74:	3340      	adds	r3, #64	; 0x40
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d3ad      	bcc.n	8001ce6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	e044      	b.n	8001e1a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	3301      	adds	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d3b5      	bcc.n	8001d90 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	687e      	ldr	r6, [r7, #4]
 8001e2c:	466d      	mov	r5, sp
 8001e2e:	f106 0410 	add.w	r4, r6, #16
 8001e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	602b      	str	r3, [r5, #0]
 8001e3a:	1d33      	adds	r3, r6, #4
 8001e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3e:	6838      	ldr	r0, [r7, #0]
 8001e40:	f002 f960 	bl	8004104 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e70:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f001 b823 	b.w	8002ecc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 817d 	beq.w	8002196 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e9c:	4bbc      	ldr	r3, [pc, #752]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d00c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea8:	4bb9      	ldr	r3, [pc, #740]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d15c      	bne.n	8001f6e <HAL_RCC_OscConfig+0x10e>
 8001eb4:	4bb6      	ldr	r3, [pc, #728]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec0:	d155      	bne.n	8001f6e <HAL_RCC_OscConfig+0x10e>
 8001ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ed6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x94>
 8001eee:	4ba8      	ldr	r3, [pc, #672]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	e015      	b.n	8001f20 <HAL_RCC_OscConfig+0xc0>
 8001ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f10:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f1c:	4b9c      	ldr	r3, [pc, #624]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f24:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f28:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f2c:	fa92 f2a2 	rbit	r2, r2
 8001f30:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f34:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 811f 	beq.w	8002194 <HAL_RCC_OscConfig+0x334>
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 8116 	bne.w	8002194 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f000 bfaf 	b.w	8002ecc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x12e>
 8001f80:	4b83      	ldr	r3, [pc, #524]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a82      	ldr	r2, [pc, #520]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e036      	b.n	8001ffc <HAL_RCC_OscConfig+0x19c>
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x158>
 8001f9e:	4b7c      	ldr	r3, [pc, #496]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a7b      	ldr	r2, [pc, #492]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b79      	ldr	r3, [pc, #484]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a78      	ldr	r2, [pc, #480]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e021      	b.n	8001ffc <HAL_RCC_OscConfig+0x19c>
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x184>
 8001fca:	4b71      	ldr	r3, [pc, #452]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a70      	ldr	r2, [pc, #448]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b6e      	ldr	r3, [pc, #440]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6d      	ldr	r2, [pc, #436]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0x19c>
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a69      	ldr	r2, [pc, #420]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b67      	ldr	r3, [pc, #412]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a66      	ldr	r2, [pc, #408]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ffc:	4b64      	ldr	r3, [pc, #400]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f023 020f 	bic.w	r2, r3, #15
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	495f      	ldr	r1, [pc, #380]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8002012:	4313      	orrs	r3, r2
 8002014:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d059      	beq.n	80020da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7fe fdaf 	bl	8000b88 <HAL_GetTick>
 800202a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002030:	f7fe fdaa 	bl	8000b88 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b64      	cmp	r3, #100	; 0x64
 800203e:	d902      	bls.n	8002046 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	f000 bf43 	b.w	8002ecc <HAL_RCC_OscConfig+0x106c>
 8002046:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800204a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800205a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d102      	bne.n	8002078 <HAL_RCC_OscConfig+0x218>
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	e015      	b.n	80020a4 <HAL_RCC_OscConfig+0x244>
 8002078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800207c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800208c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002090:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002094:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80020a0:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80020ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80020b0:	fa92 f2a2 	rbit	r2, r2
 80020b4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80020b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80020bc:	fab2 f282 	clz	r2, r2
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	f042 0220 	orr.w	r2, r2, #32
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	f002 021f 	and.w	r2, r2, #31
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f202 	lsl.w	r2, r1, r2
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ab      	beq.n	8002030 <HAL_RCC_OscConfig+0x1d0>
 80020d8:	e05d      	b.n	8002196 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7fe fd55 	bl	8000b88 <HAL_GetTick>
 80020de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e4:	f7fe fd50 	bl	8000b88 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b64      	cmp	r3, #100	; 0x64
 80020f2:	d902      	bls.n	80020fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	f000 bee9 	b.w	8002ecc <HAL_RCC_OscConfig+0x106c>
 80020fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800210e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <HAL_RCC_OscConfig+0x2cc>
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	e015      	b.n	8002158 <HAL_RCC_OscConfig+0x2f8>
 800212c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002130:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002144:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002148:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_RCC_OscConfig+0x330>)
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800215c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002160:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002164:	fa92 f2a2 	rbit	r2, r2
 8002168:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800216c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002170:	fab2 f282 	clz	r2, r2
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	f042 0220 	orr.w	r2, r2, #32
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	f002 021f 	and.w	r2, r2, #31
 8002180:	2101      	movs	r1, #1
 8002182:	fa01 f202 	lsl.w	r2, r1, r2
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ab      	bne.n	80020e4 <HAL_RCC_OscConfig+0x284>
 800218c:	e003      	b.n	8002196 <HAL_RCC_OscConfig+0x336>
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 817d 	beq.w	80024a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021ac:	4ba6      	ldr	r3, [pc, #664]	; (8002448 <HAL_RCC_OscConfig+0x5e8>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00b      	beq.n	80021d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021b8:	4ba3      	ldr	r3, [pc, #652]	; (8002448 <HAL_RCC_OscConfig+0x5e8>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d172      	bne.n	80022aa <HAL_RCC_OscConfig+0x44a>
 80021c4:	4ba0      	ldr	r3, [pc, #640]	; (8002448 <HAL_RCC_OscConfig+0x5e8>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d16c      	bne.n	80022aa <HAL_RCC_OscConfig+0x44a>
 80021d0:	2302      	movs	r3, #2
 80021d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80021e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d102      	bne.n	8002200 <HAL_RCC_OscConfig+0x3a0>
 80021fa:	4b93      	ldr	r3, [pc, #588]	; (8002448 <HAL_RCC_OscConfig+0x5e8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	e013      	b.n	8002228 <HAL_RCC_OscConfig+0x3c8>
 8002200:	2302      	movs	r3, #2
 8002202:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002212:	2302      	movs	r3, #2
 8002214:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002218:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002224:	4b88      	ldr	r3, [pc, #544]	; (8002448 <HAL_RCC_OscConfig+0x5e8>)
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	2202      	movs	r2, #2
 800222a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800222e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002232:	fa92 f2a2 	rbit	r2, r2
 8002236:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800223a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800223e:	fab2 f282 	clz	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f042 0220 	orr.w	r2, r2, #32
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f002 021f 	and.w	r2, r2, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCC_OscConfig+0x410>
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d002      	beq.n	8002270 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	f000 be2e 	b.w	8002ecc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	4b75      	ldr	r3, [pc, #468]	; (8002448 <HAL_RCC_OscConfig+0x5e8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	21f8      	movs	r1, #248	; 0xf8
 8002286:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800228e:	fa91 f1a1 	rbit	r1, r1
 8002292:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002296:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800229a:	fab1 f181 	clz	r1, r1
 800229e:	b2c9      	uxtb	r1, r1
 80022a0:	408b      	lsls	r3, r1
 80022a2:	4969      	ldr	r1, [pc, #420]	; (8002448 <HAL_RCC_OscConfig+0x5e8>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a8:	e0fd      	b.n	80024a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8088 	beq.w	80023cc <HAL_RCC_OscConfig+0x56c>
 80022bc:	2301      	movs	r3, #1
 80022be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80022ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	461a      	mov	r2, r3
 80022e4:	2301      	movs	r3, #1
 80022e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fc4e 	bl	8000b88 <HAL_GetTick>
 80022ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f2:	f7fe fc49 	bl	8000b88 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d902      	bls.n	8002308 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	f000 bde2 	b.w	8002ecc <HAL_RCC_OscConfig+0x106c>
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800231a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d102      	bne.n	8002338 <HAL_RCC_OscConfig+0x4d8>
 8002332:	4b45      	ldr	r3, [pc, #276]	; (8002448 <HAL_RCC_OscConfig+0x5e8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	e013      	b.n	8002360 <HAL_RCC_OscConfig+0x500>
 8002338:	2302      	movs	r3, #2
 800233a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800234a:	2302      	movs	r3, #2
 800234c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002350:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800235c:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <HAL_RCC_OscConfig+0x5e8>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2202      	movs	r2, #2
 8002362:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002366:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800236a:	fa92 f2a2 	rbit	r2, r2
 800236e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002372:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002376:	fab2 f282 	clz	r2, r2
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	f042 0220 	orr.w	r2, r2, #32
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	f002 021f 	and.w	r2, r2, #31
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f202 	lsl.w	r2, r1, r2
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0af      	beq.n	80022f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <HAL_RCC_OscConfig+0x5e8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	21f8      	movs	r1, #248	; 0xf8
 80023a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80023b0:	fa91 f1a1 	rbit	r1, r1
 80023b4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80023b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80023bc:	fab1 f181 	clz	r1, r1
 80023c0:	b2c9      	uxtb	r1, r1
 80023c2:	408b      	lsls	r3, r1
 80023c4:	4920      	ldr	r1, [pc, #128]	; (8002448 <HAL_RCC_OscConfig+0x5e8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
 80023ca:	e06c      	b.n	80024a6 <HAL_RCC_OscConfig+0x646>
 80023cc:	2301      	movs	r3, #1
 80023ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80023de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	461a      	mov	r2, r3
 80023f4:	2300      	movs	r3, #0
 80023f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7fe fbc6 	bl	8000b88 <HAL_GetTick>
 80023fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002402:	f7fe fbc1 	bl	8000b88 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d902      	bls.n	8002418 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	f000 bd5a 	b.w	8002ecc <HAL_RCC_OscConfig+0x106c>
 8002418:	2302      	movs	r3, #2
 800241a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800242a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d104      	bne.n	800244c <HAL_RCC_OscConfig+0x5ec>
 8002442:	4b01      	ldr	r3, [pc, #4]	; (8002448 <HAL_RCC_OscConfig+0x5e8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	e015      	b.n	8002474 <HAL_RCC_OscConfig+0x614>
 8002448:	40021000 	.word	0x40021000
 800244c:	2302      	movs	r3, #2
 800244e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800245e:	2302      	movs	r3, #2
 8002460:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002464:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002470:	4bc8      	ldr	r3, [pc, #800]	; (8002794 <HAL_RCC_OscConfig+0x934>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	2202      	movs	r2, #2
 8002476:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800247a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800247e:	fa92 f2a2 	rbit	r2, r2
 8002482:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002486:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800248a:	fab2 f282 	clz	r2, r2
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f042 0220 	orr.w	r2, r2, #32
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f002 021f 	and.w	r2, r2, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1ad      	bne.n	8002402 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8110 	beq.w	80026dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d079      	beq.n	80025c0 <HAL_RCC_OscConfig+0x760>
 80024cc:	2301      	movs	r3, #1
 80024ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80024de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	4bab      	ldr	r3, [pc, #684]	; (8002798 <HAL_RCC_OscConfig+0x938>)
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	461a      	mov	r2, r3
 80024f2:	2301      	movs	r3, #1
 80024f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fb47 	bl	8000b88 <HAL_GetTick>
 80024fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe fb42 	bl	8000b88 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d902      	bls.n	8002516 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	f000 bcdb 	b.w	8002ecc <HAL_RCC_OscConfig+0x106c>
 8002516:	2302      	movs	r3, #2
 8002518:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002530:	2202      	movs	r2, #2
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f2a3 	rbit	r2, r3
 8002542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002554:	2202      	movs	r2, #2
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800256e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002570:	4b88      	ldr	r3, [pc, #544]	; (8002794 <HAL_RCC_OscConfig+0x934>)
 8002572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002578:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800257c:	2102      	movs	r1, #2
 800257e:	6019      	str	r1, [r3, #0]
 8002580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002584:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	fa93 f1a3 	rbit	r1, r3
 800258e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002592:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002596:	6019      	str	r1, [r3, #0]
  return result;
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0a0      	beq.n	8002500 <HAL_RCC_OscConfig+0x6a0>
 80025be:	e08d      	b.n	80026dc <HAL_RCC_OscConfig+0x87c>
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	fa93 f2a3 	rbit	r2, r3
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025e2:	601a      	str	r2, [r3, #0]
  return result;
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b68      	ldr	r3, [pc, #416]	; (8002798 <HAL_RCC_OscConfig+0x938>)
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	461a      	mov	r2, r3
 80025fe:	2300      	movs	r3, #0
 8002600:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7fe fac1 	bl	8000b88 <HAL_GetTick>
 8002606:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260c:	f7fe fabc 	bl	8000b88 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d902      	bls.n	8002622 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	f000 bc55 	b.w	8002ecc <HAL_RCC_OscConfig+0x106c>
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800262a:	2202      	movs	r2, #2
 800262c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f2a3 	rbit	r2, r3
 800263c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002640:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800264e:	2202      	movs	r2, #2
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f2a3 	rbit	r2, r3
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002672:	2202      	movs	r2, #2
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f2a3 	rbit	r2, r3
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800268c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268e:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_OscConfig+0x934>)
 8002690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800269a:	2102      	movs	r1, #2
 800269c:	6019      	str	r1, [r3, #0]
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f1a3 	rbit	r1, r3
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026b4:	6019      	str	r1, [r3, #0]
  return result;
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	2101      	movs	r1, #1
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d197      	bne.n	800260c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 81a1 	beq.w	8002a34 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f8:	4b26      	ldr	r3, [pc, #152]	; (8002794 <HAL_RCC_OscConfig+0x934>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d116      	bne.n	8002732 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002704:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_RCC_OscConfig+0x934>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	4a22      	ldr	r2, [pc, #136]	; (8002794 <HAL_RCC_OscConfig+0x934>)
 800270a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270e:	61d3      	str	r3, [r2, #28]
 8002710:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_RCC_OscConfig+0x934>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800272a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800272c:	2301      	movs	r3, #1
 800272e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_RCC_OscConfig+0x93c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11a      	bne.n	8002774 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <HAL_RCC_OscConfig+0x93c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a16      	ldr	r2, [pc, #88]	; (800279c <HAL_RCC_OscConfig+0x93c>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7fe fa1d 	bl	8000b88 <HAL_GetTick>
 800274e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002752:	e009      	b.n	8002768 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7fe fa18 	bl	8000b88 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b64      	cmp	r3, #100	; 0x64
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e3b1      	b.n	8002ecc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_RCC_OscConfig+0x93c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ef      	beq.n	8002754 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d10d      	bne.n	80027a0 <HAL_RCC_OscConfig+0x940>
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_RCC_OscConfig+0x934>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4a02      	ldr	r2, [pc, #8]	; (8002794 <HAL_RCC_OscConfig+0x934>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6213      	str	r3, [r2, #32]
 8002790:	e03c      	b.n	800280c <HAL_RCC_OscConfig+0x9ac>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	10908120 	.word	0x10908120
 800279c:	40007000 	.word	0x40007000
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10c      	bne.n	80027ca <HAL_RCC_OscConfig+0x96a>
 80027b0:	4bc1      	ldr	r3, [pc, #772]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4ac0      	ldr	r2, [pc, #768]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6213      	str	r3, [r2, #32]
 80027bc:	4bbe      	ldr	r3, [pc, #760]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4abd      	ldr	r2, [pc, #756]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80027c2:	f023 0304 	bic.w	r3, r3, #4
 80027c6:	6213      	str	r3, [r2, #32]
 80027c8:	e020      	b.n	800280c <HAL_RCC_OscConfig+0x9ac>
 80027ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x994>
 80027da:	4bb7      	ldr	r3, [pc, #732]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4ab6      	ldr	r2, [pc, #728]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	6213      	str	r3, [r2, #32]
 80027e6:	4bb4      	ldr	r3, [pc, #720]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4ab3      	ldr	r2, [pc, #716]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6213      	str	r3, [r2, #32]
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0x9ac>
 80027f4:	4bb0      	ldr	r3, [pc, #704]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4aaf      	ldr	r2, [pc, #700]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	4bad      	ldr	r3, [pc, #692]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	4aac      	ldr	r2, [pc, #688]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 8002806:	f023 0304 	bic.w	r3, r3, #4
 800280a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8081 	beq.w	8002920 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7fe f9b3 	bl	8000b88 <HAL_GetTick>
 8002822:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe f9ae 	bl	8000b88 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e345      	b.n	8002ecc <HAL_RCC_OscConfig+0x106c>
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002848:	2202      	movs	r2, #2
 800284a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800286c:	2202      	movs	r2, #2
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f2a3 	rbit	r2, r3
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002886:	601a      	str	r2, [r3, #0]
  return result;
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002890:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d102      	bne.n	80028ac <HAL_RCC_OscConfig+0xa4c>
 80028a6:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	e013      	b.n	80028d4 <HAL_RCC_OscConfig+0xa74>
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028b4:	2202      	movs	r2, #2
 80028b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	fa93 f2a3 	rbit	r2, r3
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	4b79      	ldr	r3, [pc, #484]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80028dc:	2102      	movs	r1, #2
 80028de:	6011      	str	r1, [r2, #0]
 80028e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	fa92 f1a2 	rbit	r1, r2
 80028ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80028f6:	6011      	str	r1, [r2, #0]
  return result;
 80028f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028fc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	fab2 f282 	clz	r2, r2
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	f002 021f 	and.w	r2, r2, #31
 8002912:	2101      	movs	r1, #1
 8002914:	fa01 f202 	lsl.w	r2, r1, r2
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d084      	beq.n	8002828 <HAL_RCC_OscConfig+0x9c8>
 800291e:	e07f      	b.n	8002a20 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002920:	f7fe f932 	bl	8000b88 <HAL_GetTick>
 8002924:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	e00b      	b.n	8002942 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe f92d 	bl	8000b88 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e2c4      	b.n	8002ecc <HAL_RCC_OscConfig+0x106c>
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800294a:	2202      	movs	r2, #2
 800294c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	fa93 f2a3 	rbit	r2, r3
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800296e:	2202      	movs	r2, #2
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	fa93 f2a3 	rbit	r2, r3
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002988:	601a      	str	r2, [r3, #0]
  return result;
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002992:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f043 0302 	orr.w	r3, r3, #2
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_OscConfig+0xb4e>
 80029a8:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	e013      	b.n	80029d6 <HAL_RCC_OscConfig+0xb76>
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029b6:	2202      	movs	r2, #2
 80029b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	fa93 f2a3 	rbit	r2, r3
 80029c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80029de:	2102      	movs	r1, #2
 80029e0:	6011      	str	r1, [r2, #0]
 80029e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	fa92 f1a2 	rbit	r1, r2
 80029f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80029f8:	6011      	str	r1, [r2, #0]
  return result;
 80029fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029fe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	fab2 f282 	clz	r2, r2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f002 021f 	and.w	r2, r2, #31
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d184      	bne.n	800292a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a20:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d105      	bne.n	8002a34 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a28:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	4a22      	ldr	r2, [pc, #136]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 8002a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8242 	beq.w	8002eca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <HAL_RCC_OscConfig+0xc58>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	f000 8213 	beq.w	8002e7a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	f040 8162 	bne.w	8002d2a <HAL_RCC_OscConfig+0xeca>
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	fa93 f2a3 	rbit	r2, r3
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a8a:	601a      	str	r2, [r3, #0]
  return result;
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe f86c 	bl	8000b88 <HAL_GetTick>
 8002ab0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab4:	e00c      	b.n	8002ad0 <HAL_RCC_OscConfig+0xc70>
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe f864 	bl	8000b88 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1fd      	b.n	8002ecc <HAL_RCC_OscConfig+0x106c>
 8002ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	fa93 f2a3 	rbit	r2, r3
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002af4:	601a      	str	r2, [r3, #0]
  return result;
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002afe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d102      	bne.n	8002b1a <HAL_RCC_OscConfig+0xcba>
 8002b14:	4bb0      	ldr	r3, [pc, #704]	; (8002dd8 <HAL_RCC_OscConfig+0xf78>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	e027      	b.n	8002b6a <HAL_RCC_OscConfig+0xd0a>
 8002b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b44:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b52:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	fa93 f2a3 	rbit	r2, r3
 8002b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	4b9c      	ldr	r3, [pc, #624]	; (8002dd8 <HAL_RCC_OscConfig+0xf78>)
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b6e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b76:	6011      	str	r1, [r2, #0]
 8002b78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b7c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	fa92 f1a2 	rbit	r1, r2
 8002b86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b8a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b8e:	6011      	str	r1, [r2, #0]
  return result;
 8002b90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b94:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	fab2 f282 	clz	r2, r2
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f042 0220 	orr.w	r2, r2, #32
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f002 021f 	and.w	r2, r2, #31
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d182      	bne.n	8002abc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb6:	4b88      	ldr	r3, [pc, #544]	; (8002dd8 <HAL_RCC_OscConfig+0xf78>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	430b      	orrs	r3, r1
 8002bd8:	497f      	ldr	r1, [pc, #508]	; (8002dd8 <HAL_RCC_OscConfig+0xf78>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002be6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	fa93 f2a3 	rbit	r2, r3
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c02:	601a      	str	r2, [r3, #0]
  return result;
 8002c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c08:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c0c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2301      	movs	r3, #1
 8002c22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fd ffb0 	bl	8000b88 <HAL_GetTick>
 8002c28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c2c:	e009      	b.n	8002c42 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2e:	f7fd ffab 	bl	8000b88 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e144      	b.n	8002ecc <HAL_RCC_OscConfig+0x106c>
 8002c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c46:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c54:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	fa93 f2a3 	rbit	r2, r3
 8002c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c62:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c66:	601a      	str	r2, [r3, #0]
  return result;
 8002c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d102      	bne.n	8002c8c <HAL_RCC_OscConfig+0xe2c>
 8002c86:	4b54      	ldr	r3, [pc, #336]	; (8002dd8 <HAL_RCC_OscConfig+0xf78>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	e027      	b.n	8002cdc <HAL_RCC_OscConfig+0xe7c>
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	fa93 f2a3 	rbit	r2, r3
 8002ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002cba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fa93 f2a3 	rbit	r2, r3
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <HAL_RCC_OscConfig+0xf78>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ce0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ce4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ce8:	6011      	str	r1, [r2, #0]
 8002cea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	fa92 f1a2 	rbit	r1, r2
 8002cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cfc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d00:	6011      	str	r1, [r2, #0]
  return result;
 8002d02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d06:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f042 0220 	orr.w	r2, r2, #32
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f002 021f 	and.w	r2, r2, #31
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d082      	beq.n	8002c2e <HAL_RCC_OscConfig+0xdce>
 8002d28:	e0cf      	b.n	8002eca <HAL_RCC_OscConfig+0x106a>
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	fa93 f2a3 	rbit	r2, r3
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d4e:	601a      	str	r2, [r3, #0]
  return result;
 8002d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d54:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d58:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fd ff0a 	bl	8000b88 <HAL_GetTick>
 8002d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d78:	e009      	b.n	8002d8e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7fd ff05 	bl	8000b88 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e09e      	b.n	8002ecc <HAL_RCC_OscConfig+0x106c>
 8002d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d92:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	fa93 f2a3 	rbit	r2, r3
 8002daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002db2:	601a      	str	r2, [r3, #0]
  return result;
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002dbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d104      	bne.n	8002ddc <HAL_RCC_OscConfig+0xf7c>
 8002dd2:	4b01      	ldr	r3, [pc, #4]	; (8002dd8 <HAL_RCC_OscConfig+0xf78>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	e029      	b.n	8002e2c <HAL_RCC_OscConfig+0xfcc>
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f2a3 	rbit	r2, r3
 8002df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e06:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	fa93 f2a3 	rbit	r2, r3
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_RCC_OscConfig+0x1078>)
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e30:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e38:	6011      	str	r1, [r2, #0]
 8002e3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e3e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	fa92 f1a2 	rbit	r1, r2
 8002e48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e4c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e50:	6011      	str	r1, [r2, #0]
  return result;
 8002e52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e56:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	fab2 f282 	clz	r2, r2
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f042 0220 	orr.w	r2, r2, #32
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	f002 021f 	and.w	r2, r2, #31
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d180      	bne.n	8002d7a <HAL_RCC_OscConfig+0xf1a>
 8002e78:	e027      	b.n	8002eca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e01e      	b.n	8002ecc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HAL_RCC_OscConfig+0x1078>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e9a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d10b      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002eae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002eb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000

08002edc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b09e      	sub	sp, #120	; 0x78
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e162      	b.n	80031ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b90      	ldr	r3, [pc, #576]	; (8003138 <HAL_RCC_ClockConfig+0x25c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d910      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b8d      	ldr	r3, [pc, #564]	; (8003138 <HAL_RCC_ClockConfig+0x25c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0207 	bic.w	r2, r3, #7
 8002f0a:	498b      	ldr	r1, [pc, #556]	; (8003138 <HAL_RCC_ClockConfig+0x25c>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b89      	ldr	r3, [pc, #548]	; (8003138 <HAL_RCC_ClockConfig+0x25c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e14a      	b.n	80031ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b82      	ldr	r3, [pc, #520]	; (800313c <HAL_RCC_ClockConfig+0x260>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	497f      	ldr	r1, [pc, #508]	; (800313c <HAL_RCC_ClockConfig+0x260>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80dc 	beq.w	8003108 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d13c      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xf6>
 8002f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d102      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xa6>
 8002f7c:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_RCC_ClockConfig+0x260>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	e00f      	b.n	8002fa2 <HAL_RCC_ClockConfig+0xc6>
 8002f82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	667b      	str	r3, [r7, #100]	; 0x64
 8002f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f94:	663b      	str	r3, [r7, #96]	; 0x60
 8002f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f9e:	4b67      	ldr	r3, [pc, #412]	; (800313c <HAL_RCC_ClockConfig+0x260>)
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fa6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002faa:	fa92 f2a2 	rbit	r2, r2
 8002fae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002fb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fb2:	fab2 f282 	clz	r2, r2
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	f042 0220 	orr.w	r2, r2, #32
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	f002 021f 	and.w	r2, r2, #31
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d17b      	bne.n	80030c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0f3      	b.n	80031ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d13c      	bne.n	8003054 <HAL_RCC_ClockConfig+0x178>
 8002fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d102      	bne.n	8003004 <HAL_RCC_ClockConfig+0x128>
 8002ffe:	4b4f      	ldr	r3, [pc, #316]	; (800313c <HAL_RCC_ClockConfig+0x260>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	e00f      	b.n	8003024 <HAL_RCC_ClockConfig+0x148>
 8003004:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003008:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
 8003012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003016:	643b      	str	r3, [r7, #64]	; 0x40
 8003018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003020:	4b46      	ldr	r3, [pc, #280]	; (800313c <HAL_RCC_ClockConfig+0x260>)
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003028:	63ba      	str	r2, [r7, #56]	; 0x38
 800302a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800302c:	fa92 f2a2 	rbit	r2, r2
 8003030:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003034:	fab2 f282 	clz	r2, r2
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	f042 0220 	orr.w	r2, r2, #32
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f002 021f 	and.w	r2, r2, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f202 	lsl.w	r2, r1, r2
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d13a      	bne.n	80030c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0b2      	b.n	80031ba <HAL_RCC_ClockConfig+0x2de>
 8003054:	2302      	movs	r3, #2
 8003056:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d102      	bne.n	800307c <HAL_RCC_ClockConfig+0x1a0>
 8003076:	4b31      	ldr	r3, [pc, #196]	; (800313c <HAL_RCC_ClockConfig+0x260>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	e00d      	b.n	8003098 <HAL_RCC_ClockConfig+0x1bc>
 800307c:	2302      	movs	r3, #2
 800307e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
 8003088:	2302      	movs	r3, #2
 800308a:	623b      	str	r3, [r7, #32]
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	4b29      	ldr	r3, [pc, #164]	; (800313c <HAL_RCC_ClockConfig+0x260>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2202      	movs	r2, #2
 800309a:	61ba      	str	r2, [r7, #24]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	fa92 f2a2 	rbit	r2, r2
 80030a2:	617a      	str	r2, [r7, #20]
  return result;
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	fab2 f282 	clz	r2, r2
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	f042 0220 	orr.w	r2, r2, #32
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	f002 021f 	and.w	r2, r2, #31
 80030b6:	2101      	movs	r1, #1
 80030b8:	fa01 f202 	lsl.w	r2, r1, r2
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e079      	b.n	80031ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <HAL_RCC_ClockConfig+0x260>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	491a      	ldr	r1, [pc, #104]	; (800313c <HAL_RCC_ClockConfig+0x260>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fd fd56 	bl	8000b88 <HAL_GetTick>
 80030dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7fd fd52 	bl	8000b88 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e061      	b.n	80031ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_RCC_ClockConfig+0x260>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_ClockConfig+0x25c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d214      	bcs.n	8003140 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <HAL_RCC_ClockConfig+0x25c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 0207 	bic.w	r2, r3, #7
 800311e:	4906      	ldr	r1, [pc, #24]	; (8003138 <HAL_RCC_ClockConfig+0x25c>)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <HAL_RCC_ClockConfig+0x25c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e040      	b.n	80031ba <HAL_RCC_ClockConfig+0x2de>
 8003138:	40022000 	.word	0x40022000
 800313c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800314c:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <HAL_RCC_ClockConfig+0x2e8>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	491a      	ldr	r1, [pc, #104]	; (80031c4 <HAL_RCC_ClockConfig+0x2e8>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <HAL_RCC_ClockConfig+0x2e8>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4912      	ldr	r1, [pc, #72]	; (80031c4 <HAL_RCC_ClockConfig+0x2e8>)
 800317a:	4313      	orrs	r3, r2
 800317c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800317e:	f000 f829 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003182:	4601      	mov	r1, r0
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <HAL_RCC_ClockConfig+0x2e8>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800318c:	22f0      	movs	r2, #240	; 0xf0
 800318e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	fa92 f2a2 	rbit	r2, r2
 8003196:	60fa      	str	r2, [r7, #12]
  return result;
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	fab2 f282 	clz	r2, r2
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	40d3      	lsrs	r3, r2
 80031a2:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <HAL_RCC_ClockConfig+0x2ec>)
 80031a4:	5cd3      	ldrb	r3, [r2, r3]
 80031a6:	fa21 f303 	lsr.w	r3, r1, r3
 80031aa:	4a08      	ldr	r2, [pc, #32]	; (80031cc <HAL_RCC_ClockConfig+0x2f0>)
 80031ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_RCC_ClockConfig+0x2f4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fca4 	bl	8000b00 <HAL_InitTick>
  
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3778      	adds	r7, #120	; 0x78
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	080042e8 	.word	0x080042e8
 80031cc:	20000000 	.word	0x20000000
 80031d0:	20000004 	.word	0x20000004

080031d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b08b      	sub	sp, #44	; 0x2c
 80031d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d002      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x30>
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d003      	beq.n	800320a <HAL_RCC_GetSysClockFreq+0x36>
 8003202:	e03c      	b.n	800327e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003204:	4b24      	ldr	r3, [pc, #144]	; (8003298 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003206:	623b      	str	r3, [r7, #32]
      break;
 8003208:	e03c      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003210:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003214:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	fa92 f2a2 	rbit	r2, r2
 800321c:	607a      	str	r2, [r7, #4]
  return result;
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	fab2 f282 	clz	r2, r2
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	40d3      	lsrs	r3, r2
 8003228:	4a1c      	ldr	r2, [pc, #112]	; (800329c <HAL_RCC_GetSysClockFreq+0xc8>)
 800322a:	5cd3      	ldrb	r3, [r2, r3]
 800322c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800322e:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	220f      	movs	r2, #15
 8003238:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	fa92 f2a2 	rbit	r2, r2
 8003240:	60fa      	str	r2, [r7, #12]
  return result;
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	fab2 f282 	clz	r2, r2
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	40d3      	lsrs	r3, r2
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800325c:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <HAL_RCC_GetSysClockFreq+0xc4>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	fbb2 f2f3 	udiv	r2, r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	e004      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003272:	fb02 f303 	mul.w	r3, r2, r3
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	623b      	str	r3, [r7, #32]
      break;
 800327c:	e002      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003280:	623b      	str	r3, [r7, #32]
      break;
 8003282:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003284:	6a3b      	ldr	r3, [r7, #32]
}
 8003286:	4618      	mov	r0, r3
 8003288:	372c      	adds	r7, #44	; 0x2c
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	007a1200 	.word	0x007a1200
 800329c:	08004300 	.word	0x08004300
 80032a0:	08004310 	.word	0x08004310
 80032a4:	003d0900 	.word	0x003d0900

080032a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000000 	.word	0x20000000

080032c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032c6:	f7ff ffef 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032ca:	4601      	mov	r1, r0
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	fa92 f2a2 	rbit	r2, r2
 80032e0:	603a      	str	r2, [r7, #0]
  return result;
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	fab2 f282 	clz	r2, r2
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	40d3      	lsrs	r3, r2
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x40>)
 80032ee:	5cd3      	ldrb	r3, [r2, r3]
 80032f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	080042f8 	.word	0x080042f8

08003304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800330a:	f7ff ffcd 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 800330e:	4601      	mov	r1, r0
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003318:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800331c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	fa92 f2a2 	rbit	r2, r2
 8003324:	603a      	str	r2, [r7, #0]
  return result;
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	fab2 f282 	clz	r2, r2
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	40d3      	lsrs	r3, r2
 8003330:	4a04      	ldr	r2, [pc, #16]	; (8003344 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	080042f8 	.word	0x080042f8

08003348 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b092      	sub	sp, #72	; 0x48
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80d4 	beq.w	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336c:	4b4e      	ldr	r3, [pc, #312]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10e      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003378:	4b4b      	ldr	r3, [pc, #300]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	4a4a      	ldr	r2, [pc, #296]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003382:	61d3      	str	r3, [r2, #28]
 8003384:	4b48      	ldr	r3, [pc, #288]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b45      	ldr	r3, [pc, #276]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d118      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a2:	4b42      	ldr	r3, [pc, #264]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a41      	ldr	r2, [pc, #260]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ae:	f7fd fbeb 	bl	8000b88 <HAL_GetTick>
 80033b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e008      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7fd fbe7 	bl	8000b88 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d901      	bls.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e169      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	4b38      	ldr	r3, [pc, #224]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033d4:	4b34      	ldr	r3, [pc, #208]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8084 	beq.w	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d07c      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033f4:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	461a      	mov	r2, r3
 800341e:	2301      	movs	r3, #1
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	461a      	mov	r2, r3
 8003442:	2300      	movs	r3, #0
 8003444:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003446:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800344c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d04b      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7fd fb97 	bl	8000b88 <HAL_GetTick>
 800345a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fd fb93 	bl	8000b88 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	; 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e113      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003474:	2302      	movs	r3, #2
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
 8003480:	2302      	movs	r3, #2
 8003482:	623b      	str	r3, [r7, #32]
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	61fb      	str	r3, [r7, #28]
  return result;
 800348c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d108      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034a2:	4b01      	ldr	r3, [pc, #4]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	e00d      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40007000 	.word	0x40007000
 80034b0:	10908100 	.word	0x10908100
 80034b4:	2302      	movs	r3, #2
 80034b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	4b78      	ldr	r3, [pc, #480]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2202      	movs	r2, #2
 80034c6:	613a      	str	r2, [r7, #16]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	fa92 f2a2 	rbit	r2, r2
 80034ce:	60fa      	str	r2, [r7, #12]
  return result;
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	fab2 f282 	clz	r2, r2
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	f002 021f 	and.w	r2, r2, #31
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f202 	lsl.w	r2, r1, r2
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0b7      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034ee:	4b6d      	ldr	r3, [pc, #436]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	496a      	ldr	r1, [pc, #424]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003500:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003504:	2b01      	cmp	r3, #1
 8003506:	d105      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003508:	4b66      	ldr	r3, [pc, #408]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	4a65      	ldr	r2, [pc, #404]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800350e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003512:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003520:	4b60      	ldr	r3, [pc, #384]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f023 0203 	bic.w	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	495d      	ldr	r1, [pc, #372]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800352e:	4313      	orrs	r3, r2
 8003530:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d008      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800353e:	4b59      	ldr	r3, [pc, #356]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4956      	ldr	r1, [pc, #344]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800354c:	4313      	orrs	r3, r2
 800354e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800355c:	4b51      	ldr	r3, [pc, #324]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	494e      	ldr	r1, [pc, #312]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800356a:	4313      	orrs	r3, r2
 800356c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800357a:	4b4a      	ldr	r3, [pc, #296]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f023 0210 	bic.w	r2, r3, #16
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	4947      	ldr	r1, [pc, #284]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003598:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	493f      	ldr	r1, [pc, #252]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b6:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f023 0220 	bic.w	r2, r3, #32
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4938      	ldr	r1, [pc, #224]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035d4:	4b33      	ldr	r3, [pc, #204]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	4930      	ldr	r1, [pc, #192]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035f2:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	4929      	ldr	r1, [pc, #164]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003600:	4313      	orrs	r3, r2
 8003602:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003610:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	4921      	ldr	r1, [pc, #132]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800361e:	4313      	orrs	r3, r2
 8003620:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	491a      	ldr	r1, [pc, #104]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800363c:	4313      	orrs	r3, r2
 800363e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800364c:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	4912      	ldr	r1, [pc, #72]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800365a:	4313      	orrs	r3, r2
 800365c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800366a:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	490b      	ldr	r1, [pc, #44]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003678:	4313      	orrs	r3, r2
 800367a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	4903      	ldr	r1, [pc, #12]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003696:	4313      	orrs	r3, r2
 8003698:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3748      	adds	r7, #72	; 0x48
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000

080036a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e09d      	b.n	80037f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d108      	bne.n	80036d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ca:	d009      	beq.n	80036e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	61da      	str	r2, [r3, #28]
 80036d2:	e005      	b.n	80036e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd f844 	bl	8000788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003716:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003720:	d902      	bls.n	8003728 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e002      	b.n	800372e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800372c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003736:	d007      	beq.n	8003748 <HAL_SPI_Init+0xa0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003740:	d002      	beq.n	8003748 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	ea42 0103 	orr.w	r1, r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	0c1b      	lsrs	r3, r3, #16
 80037a4:	f003 0204 	and.w	r2, r3, #4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037c4:	ea42 0103 	orr.w	r1, r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e040      	b.n	8003892 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7fd f883 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2224      	movs	r2, #36	; 0x24
 800382a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f8c1 	bl	80039c4 <UART_SetConfig>
 8003842:	4603      	mov	r3, r0
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e022      	b.n	8003892 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fa8b 	bl	8003d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003868:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003878:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fb12 	bl	8003eb4 <UART_CheckIdleState>
 8003890:	4603      	mov	r3, r0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b08a      	sub	sp, #40	; 0x28
 800389e:	af02      	add	r7, sp, #8
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	f040 8082 	bne.w	80039b8 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_UART_Transmit+0x26>
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e07a      	b.n	80039ba <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Transmit+0x38>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e073      	b.n	80039ba <HAL_UART_Transmit+0x120>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2221      	movs	r2, #33	; 0x21
 80038e6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e8:	f7fd f94e 	bl	8000b88 <HAL_GetTick>
 80038ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	88fa      	ldrh	r2, [r7, #6]
 80038f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	88fa      	ldrh	r2, [r7, #6]
 80038fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003906:	d108      	bne.n	800391a <HAL_UART_Transmit+0x80>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003910:	2300      	movs	r3, #0
 8003912:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	e003      	b.n	8003922 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800392a:	e02d      	b.n	8003988 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2200      	movs	r2, #0
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fb05 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e039      	b.n	80039ba <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	881a      	ldrh	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003958:	b292      	uxth	r2, r2
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	3302      	adds	r3, #2
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	e008      	b.n	8003976 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	b292      	uxth	r2, r2
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	3301      	adds	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1cb      	bne.n	800392c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2200      	movs	r2, #0
 800399c:	2140      	movs	r1, #64	; 0x40
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fad1 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e005      	b.n	80039ba <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	e000      	b.n	80039ba <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
  }
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039f2:	f023 030c 	bic.w	r3, r3, #12
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	6979      	ldr	r1, [r7, #20]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4aa8      	ldr	r2, [pc, #672]	; (8003ce0 <UART_SetConfig+0x31c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d120      	bne.n	8003a86 <UART_SetConfig+0xc2>
 8003a44:	4ba7      	ldr	r3, [pc, #668]	; (8003ce4 <UART_SetConfig+0x320>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d817      	bhi.n	8003a80 <UART_SetConfig+0xbc>
 8003a50:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <UART_SetConfig+0x94>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a75 	.word	0x08003a75
 8003a60:	08003a7b 	.word	0x08003a7b
 8003a64:	08003a6f 	.word	0x08003a6f
 8003a68:	2301      	movs	r3, #1
 8003a6a:	77fb      	strb	r3, [r7, #31]
 8003a6c:	e0b5      	b.n	8003bda <UART_SetConfig+0x216>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	77fb      	strb	r3, [r7, #31]
 8003a72:	e0b2      	b.n	8003bda <UART_SetConfig+0x216>
 8003a74:	2304      	movs	r3, #4
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e0af      	b.n	8003bda <UART_SetConfig+0x216>
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	77fb      	strb	r3, [r7, #31]
 8003a7e:	e0ac      	b.n	8003bda <UART_SetConfig+0x216>
 8003a80:	2310      	movs	r3, #16
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e0a9      	b.n	8003bda <UART_SetConfig+0x216>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a97      	ldr	r2, [pc, #604]	; (8003ce8 <UART_SetConfig+0x324>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d124      	bne.n	8003ada <UART_SetConfig+0x116>
 8003a90:	4b94      	ldr	r3, [pc, #592]	; (8003ce4 <UART_SetConfig+0x320>)
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a9c:	d011      	beq.n	8003ac2 <UART_SetConfig+0xfe>
 8003a9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aa2:	d817      	bhi.n	8003ad4 <UART_SetConfig+0x110>
 8003aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aa8:	d011      	beq.n	8003ace <UART_SetConfig+0x10a>
 8003aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aae:	d811      	bhi.n	8003ad4 <UART_SetConfig+0x110>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <UART_SetConfig+0xf8>
 8003ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab8:	d006      	beq.n	8003ac8 <UART_SetConfig+0x104>
 8003aba:	e00b      	b.n	8003ad4 <UART_SetConfig+0x110>
 8003abc:	2300      	movs	r3, #0
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e08b      	b.n	8003bda <UART_SetConfig+0x216>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e088      	b.n	8003bda <UART_SetConfig+0x216>
 8003ac8:	2304      	movs	r3, #4
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e085      	b.n	8003bda <UART_SetConfig+0x216>
 8003ace:	2308      	movs	r3, #8
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e082      	b.n	8003bda <UART_SetConfig+0x216>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e07f      	b.n	8003bda <UART_SetConfig+0x216>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a83      	ldr	r2, [pc, #524]	; (8003cec <UART_SetConfig+0x328>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d124      	bne.n	8003b2e <UART_SetConfig+0x16a>
 8003ae4:	4b7f      	ldr	r3, [pc, #508]	; (8003ce4 <UART_SetConfig+0x320>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003aec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003af0:	d011      	beq.n	8003b16 <UART_SetConfig+0x152>
 8003af2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003af6:	d817      	bhi.n	8003b28 <UART_SetConfig+0x164>
 8003af8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003afc:	d011      	beq.n	8003b22 <UART_SetConfig+0x15e>
 8003afe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b02:	d811      	bhi.n	8003b28 <UART_SetConfig+0x164>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <UART_SetConfig+0x14c>
 8003b08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b0c:	d006      	beq.n	8003b1c <UART_SetConfig+0x158>
 8003b0e:	e00b      	b.n	8003b28 <UART_SetConfig+0x164>
 8003b10:	2300      	movs	r3, #0
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e061      	b.n	8003bda <UART_SetConfig+0x216>
 8003b16:	2302      	movs	r3, #2
 8003b18:	77fb      	strb	r3, [r7, #31]
 8003b1a:	e05e      	b.n	8003bda <UART_SetConfig+0x216>
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e05b      	b.n	8003bda <UART_SetConfig+0x216>
 8003b22:	2308      	movs	r3, #8
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e058      	b.n	8003bda <UART_SetConfig+0x216>
 8003b28:	2310      	movs	r3, #16
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e055      	b.n	8003bda <UART_SetConfig+0x216>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a6f      	ldr	r2, [pc, #444]	; (8003cf0 <UART_SetConfig+0x32c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d124      	bne.n	8003b82 <UART_SetConfig+0x1be>
 8003b38:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <UART_SetConfig+0x320>)
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003b40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b44:	d011      	beq.n	8003b6a <UART_SetConfig+0x1a6>
 8003b46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b4a:	d817      	bhi.n	8003b7c <UART_SetConfig+0x1b8>
 8003b4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b50:	d011      	beq.n	8003b76 <UART_SetConfig+0x1b2>
 8003b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b56:	d811      	bhi.n	8003b7c <UART_SetConfig+0x1b8>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <UART_SetConfig+0x1a0>
 8003b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b60:	d006      	beq.n	8003b70 <UART_SetConfig+0x1ac>
 8003b62:	e00b      	b.n	8003b7c <UART_SetConfig+0x1b8>
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e037      	b.n	8003bda <UART_SetConfig+0x216>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e034      	b.n	8003bda <UART_SetConfig+0x216>
 8003b70:	2304      	movs	r3, #4
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e031      	b.n	8003bda <UART_SetConfig+0x216>
 8003b76:	2308      	movs	r3, #8
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	e02e      	b.n	8003bda <UART_SetConfig+0x216>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e02b      	b.n	8003bda <UART_SetConfig+0x216>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5b      	ldr	r2, [pc, #364]	; (8003cf4 <UART_SetConfig+0x330>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d124      	bne.n	8003bd6 <UART_SetConfig+0x212>
 8003b8c:	4b55      	ldr	r3, [pc, #340]	; (8003ce4 <UART_SetConfig+0x320>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003b94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b98:	d011      	beq.n	8003bbe <UART_SetConfig+0x1fa>
 8003b9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b9e:	d817      	bhi.n	8003bd0 <UART_SetConfig+0x20c>
 8003ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ba4:	d011      	beq.n	8003bca <UART_SetConfig+0x206>
 8003ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003baa:	d811      	bhi.n	8003bd0 <UART_SetConfig+0x20c>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <UART_SetConfig+0x1f4>
 8003bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb4:	d006      	beq.n	8003bc4 <UART_SetConfig+0x200>
 8003bb6:	e00b      	b.n	8003bd0 <UART_SetConfig+0x20c>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e00d      	b.n	8003bda <UART_SetConfig+0x216>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e00a      	b.n	8003bda <UART_SetConfig+0x216>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e007      	b.n	8003bda <UART_SetConfig+0x216>
 8003bca:	2308      	movs	r3, #8
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e004      	b.n	8003bda <UART_SetConfig+0x216>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e001      	b.n	8003bda <UART_SetConfig+0x216>
 8003bd6:	2310      	movs	r3, #16
 8003bd8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be2:	d15c      	bne.n	8003c9e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003be4:	7ffb      	ldrb	r3, [r7, #31]
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d827      	bhi.n	8003c3a <UART_SetConfig+0x276>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <UART_SetConfig+0x22c>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c1d 	.word	0x08003c1d
 8003bf8:	08003c25 	.word	0x08003c25
 8003bfc:	08003c3b 	.word	0x08003c3b
 8003c00:	08003c2b 	.word	0x08003c2b
 8003c04:	08003c3b 	.word	0x08003c3b
 8003c08:	08003c3b 	.word	0x08003c3b
 8003c0c:	08003c3b 	.word	0x08003c3b
 8003c10:	08003c33 	.word	0x08003c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7ff fb54 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 8003c18:	61b8      	str	r0, [r7, #24]
        break;
 8003c1a:	e013      	b.n	8003c44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c1c:	f7ff fb72 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 8003c20:	61b8      	str	r0, [r7, #24]
        break;
 8003c22:	e00f      	b.n	8003c44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c24:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <UART_SetConfig+0x334>)
 8003c26:	61bb      	str	r3, [r7, #24]
        break;
 8003c28:	e00c      	b.n	8003c44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2a:	f7ff fad3 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003c2e:	61b8      	str	r0, [r7, #24]
        break;
 8003c30:	e008      	b.n	8003c44 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c36:	61bb      	str	r3, [r7, #24]
        break;
 8003c38:	e004      	b.n	8003c44 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	77bb      	strb	r3, [r7, #30]
        break;
 8003c42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8084 	beq.w	8003d54 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	005a      	lsls	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	441a      	add	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	d916      	bls.n	8003c98 <UART_SetConfig+0x2d4>
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c70:	d212      	bcs.n	8003c98 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	f023 030f 	bic.w	r3, r3, #15
 8003c7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	085b      	lsrs	r3, r3, #1
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	89fb      	ldrh	r3, [r7, #14]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	89fa      	ldrh	r2, [r7, #14]
 8003c94:	60da      	str	r2, [r3, #12]
 8003c96:	e05d      	b.n	8003d54 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	77bb      	strb	r3, [r7, #30]
 8003c9c:	e05a      	b.n	8003d54 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d836      	bhi.n	8003d12 <UART_SetConfig+0x34e>
 8003ca4:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <UART_SetConfig+0x2e8>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003cfd 	.word	0x08003cfd
 8003cb8:	08003d13 	.word	0x08003d13
 8003cbc:	08003d03 	.word	0x08003d03
 8003cc0:	08003d13 	.word	0x08003d13
 8003cc4:	08003d13 	.word	0x08003d13
 8003cc8:	08003d13 	.word	0x08003d13
 8003ccc:	08003d0b 	.word	0x08003d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7ff faf6 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 8003cd4:	61b8      	str	r0, [r7, #24]
        break;
 8003cd6:	e021      	b.n	8003d1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd8:	f7ff fb14 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 8003cdc:	61b8      	str	r0, [r7, #24]
        break;
 8003cde:	e01d      	b.n	8003d1c <UART_SetConfig+0x358>
 8003ce0:	40013800 	.word	0x40013800
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40004400 	.word	0x40004400
 8003cec:	40004800 	.word	0x40004800
 8003cf0:	40004c00 	.word	0x40004c00
 8003cf4:	40005000 	.word	0x40005000
 8003cf8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <UART_SetConfig+0x3a8>)
 8003cfe:	61bb      	str	r3, [r7, #24]
        break;
 8003d00:	e00c      	b.n	8003d1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d02:	f7ff fa67 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003d06:	61b8      	str	r0, [r7, #24]
        break;
 8003d08:	e008      	b.n	8003d1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d0e:	61bb      	str	r3, [r7, #24]
        break;
 8003d10:	e004      	b.n	8003d1c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	77bb      	strb	r3, [r7, #30]
        break;
 8003d1a:	bf00      	nop
    }

    if (pclk != 0U)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d018      	beq.n	8003d54 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	085a      	lsrs	r2, r3, #1
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	441a      	add	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	d908      	bls.n	8003d50 <UART_SetConfig+0x38c>
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d44:	d204      	bcs.n	8003d50 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	60da      	str	r2, [r3, #12]
 8003d4e:	e001      	b.n	8003d54 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d60:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	007a1200 	.word	0x007a1200

08003d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01a      	beq.n	8003e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e6e:	d10a      	bne.n	8003e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ec4:	f7fc fe60 	bl	8000b88 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d10e      	bne.n	8003ef6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f82d 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e023      	b.n	8003f3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d10e      	bne.n	8003f22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f817 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e00d      	b.n	8003f3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b09c      	sub	sp, #112	; 0x70
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f56:	e0a5      	b.n	80040a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5e:	f000 80a1 	beq.w	80040a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f62:	f7fc fe11 	bl	8000b88 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d13e      	bne.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e6      	bne.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fca:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e5      	bne.n	8003faa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e067      	b.n	80040c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d04f      	beq.n	80040a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800400e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004012:	d147      	bne.n	80040a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800401c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004032:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403c:	637b      	str	r3, [r7, #52]	; 0x34
 800403e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e6      	bne.n	800401e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3308      	adds	r3, #8
 8004056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	613b      	str	r3, [r7, #16]
   return(result);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	66bb      	str	r3, [r7, #104]	; 0x68
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3308      	adds	r3, #8
 800406e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004070:	623a      	str	r2, [r7, #32]
 8004072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	69f9      	ldr	r1, [r7, #28]
 8004076:	6a3a      	ldr	r2, [r7, #32]
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	61bb      	str	r3, [r7, #24]
   return(result);
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e010      	b.n	80040c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4013      	ands	r3, r2
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	429a      	cmp	r2, r3
 80040c0:	f43f af4a 	beq.w	8003f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3770      	adds	r7, #112	; 0x70
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040d6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	4013      	ands	r3, r2
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004104:	b084      	sub	sp, #16
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	f107 0014 	add.w	r0, r7, #20
 8004112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	b004      	add	sp, #16
 8004144:	4770      	bx	lr
	...

08004148 <__libc_init_array>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	4d0d      	ldr	r5, [pc, #52]	; (8004180 <__libc_init_array+0x38>)
 800414c:	4c0d      	ldr	r4, [pc, #52]	; (8004184 <__libc_init_array+0x3c>)
 800414e:	1b64      	subs	r4, r4, r5
 8004150:	10a4      	asrs	r4, r4, #2
 8004152:	2600      	movs	r6, #0
 8004154:	42a6      	cmp	r6, r4
 8004156:	d109      	bne.n	800416c <__libc_init_array+0x24>
 8004158:	4d0b      	ldr	r5, [pc, #44]	; (8004188 <__libc_init_array+0x40>)
 800415a:	4c0c      	ldr	r4, [pc, #48]	; (800418c <__libc_init_array+0x44>)
 800415c:	f000 f820 	bl	80041a0 <_init>
 8004160:	1b64      	subs	r4, r4, r5
 8004162:	10a4      	asrs	r4, r4, #2
 8004164:	2600      	movs	r6, #0
 8004166:	42a6      	cmp	r6, r4
 8004168:	d105      	bne.n	8004176 <__libc_init_array+0x2e>
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004170:	4798      	blx	r3
 8004172:	3601      	adds	r6, #1
 8004174:	e7ee      	b.n	8004154 <__libc_init_array+0xc>
 8004176:	f855 3b04 	ldr.w	r3, [r5], #4
 800417a:	4798      	blx	r3
 800417c:	3601      	adds	r6, #1
 800417e:	e7f2      	b.n	8004166 <__libc_init_array+0x1e>
 8004180:	08004320 	.word	0x08004320
 8004184:	08004320 	.word	0x08004320
 8004188:	08004320 	.word	0x08004320
 800418c:	08004324 	.word	0x08004324

08004190 <memset>:
 8004190:	4402      	add	r2, r0
 8004192:	4603      	mov	r3, r0
 8004194:	4293      	cmp	r3, r2
 8004196:	d100      	bne.n	800419a <memset+0xa>
 8004198:	4770      	bx	lr
 800419a:	f803 1b01 	strb.w	r1, [r3], #1
 800419e:	e7f9      	b.n	8004194 <memset+0x4>

080041a0 <_init>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr

080041ac <_fini>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	bf00      	nop
 80041b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b2:	bc08      	pop	{r3}
 80041b4:	469e      	mov	lr, r3
 80041b6:	4770      	bx	lr


tmp102_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003af8  08003af8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003af8  08003af8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003af8  08003af8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004f0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004fc  200004fc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f2b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fb  00000000  00000000  00031f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00034768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb0  00000000  00000000  00035530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de77  00000000  00000000  000361e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000137d5  00000000  00000000  00054057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afcbb  00000000  00000000  0006782c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001174e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003878  00000000  00000000  00117538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a24 	.word	0x08003a24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003a24 	.word	0x08003a24

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001de:	4b37      	ldr	r3, [pc, #220]	; (80002bc <MX_GPIO_Init+0xf4>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a36      	ldr	r2, [pc, #216]	; (80002bc <MX_GPIO_Init+0xf4>)
 80001e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b34      	ldr	r3, [pc, #208]	; (80002bc <MX_GPIO_Init+0xf4>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f6:	4b31      	ldr	r3, [pc, #196]	; (80002bc <MX_GPIO_Init+0xf4>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a30      	ldr	r2, [pc, #192]	; (80002bc <MX_GPIO_Init+0xf4>)
 80001fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b2e      	ldr	r3, [pc, #184]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800020e:	4b2b      	ldr	r3, [pc, #172]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a2a      	ldr	r2, [pc, #168]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b28      	ldr	r3, [pc, #160]	; (80002bc <MX_GPIO_Init+0xf4>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4b25      	ldr	r3, [pc, #148]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a24      	ldr	r2, [pc, #144]	; (80002bc <MX_GPIO_Init+0xf4>)
 800022c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b22      	ldr	r3, [pc, #136]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <MX_GPIO_Init+0xf4>)
 8000244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <MX_GPIO_Init+0xf4>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000256:	2200      	movs	r2, #0
 8000258:	f64f 7108 	movw	r1, #65288	; 0xff08
 800025c:	4818      	ldr	r0, [pc, #96]	; (80002c0 <MX_GPIO_Init+0xf8>)
 800025e:	f000 fed5 	bl	800100c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000262:	2337      	movs	r3, #55	; 0x37
 8000264:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000266:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800026a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026c:	2300      	movs	r3, #0
 800026e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	4619      	mov	r1, r3
 8000276:	4812      	ldr	r0, [pc, #72]	; (80002c0 <MX_GPIO_Init+0xf8>)
 8000278:	f000 fd4e 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800027c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000280:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000282:	2301      	movs	r3, #1
 8000284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800028a:	2300      	movs	r3, #0
 800028c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800028e:	f107 0314 	add.w	r3, r7, #20
 8000292:	4619      	mov	r1, r3
 8000294:	480a      	ldr	r0, [pc, #40]	; (80002c0 <MX_GPIO_Init+0xf8>)
 8000296:	f000 fd3f 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800029a:	2301      	movs	r3, #1
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800029e:	2300      	movs	r3, #0
 80002a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	4619      	mov	r1, r3
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f000 fd32 	bl	8000d18 <HAL_GPIO_Init>

}
 80002b4:	bf00      	nop
 80002b6:	3728      	adds	r7, #40	; 0x28
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40021000 	.word	0x40021000
 80002c0:	48001000 	.word	0x48001000

080002c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c8:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <MX_I2C1_Init+0x74>)
 80002ca:	4a1c      	ldr	r2, [pc, #112]	; (800033c <MX_I2C1_Init+0x78>)
 80002cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002ce:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <MX_I2C1_Init+0x74>)
 80002d0:	4a1b      	ldr	r2, [pc, #108]	; (8000340 <MX_I2C1_Init+0x7c>)
 80002d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <MX_I2C1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <MX_I2C1_Init+0x74>)
 80002dc:	2201      	movs	r2, #1
 80002de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <MX_I2C1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_I2C1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002fe:	480e      	ldr	r0, [pc, #56]	; (8000338 <MX_I2C1_Init+0x74>)
 8000300:	f000 fe9c 	bl	800103c <HAL_I2C_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800030a:	f000 f9b5 	bl	8000678 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800030e:	2100      	movs	r1, #0
 8000310:	4809      	ldr	r0, [pc, #36]	; (8000338 <MX_I2C1_Init+0x74>)
 8000312:	f001 f869 	bl	80013e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800031c:	f000 f9ac 	bl	8000678 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000320:	2100      	movs	r1, #0
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_I2C1_Init+0x74>)
 8000324:	f001 f8ab 	bl	800147e <HAL_I2CEx_ConfigDigitalFilter>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800032e:	f000 f9a3 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000028 	.word	0x20000028
 800033c:	40005400 	.word	0x40005400
 8000340:	2000090e 	.word	0x2000090e

08000344 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000348:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_I2C2_Init+0x74>)
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <MX_I2C2_Init+0x78>)
 800034c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <MX_I2C2_Init+0x7c>)
 8000352:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000354:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <MX_I2C2_Init+0x74>)
 800035c:	2201      	movs	r2, #1
 800035e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_I2C2_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_I2C2_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800037e:	480e      	ldr	r0, [pc, #56]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000380:	f000 fe5c 	bl	800103c <HAL_I2C_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800038a:	f000 f975 	bl	8000678 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038e:	2100      	movs	r1, #0
 8000390:	4809      	ldr	r0, [pc, #36]	; (80003b8 <MX_I2C2_Init+0x74>)
 8000392:	f001 f829 	bl	80013e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800039c:	f000 f96c 	bl	8000678 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003a0:	2100      	movs	r1, #0
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_I2C2_Init+0x74>)
 80003a4:	f001 f86b 	bl	800147e <HAL_I2CEx_ConfigDigitalFilter>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f963 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000074 	.word	0x20000074
 80003bc:	40005800 	.word	0x40005800
 80003c0:	2000090e 	.word	0x2000090e

080003c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08c      	sub	sp, #48	; 0x30
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003cc:	f107 031c 	add.w	r3, r7, #28
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]
 80003d8:	60da      	str	r2, [r3, #12]
 80003da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a2f      	ldr	r2, [pc, #188]	; (80004a0 <HAL_I2C_MspInit+0xdc>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d128      	bne.n	8000438 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e6:	4b2f      	ldr	r3, [pc, #188]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a2e      	ldr	r2, [pc, #184]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 80003ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b2c      	ldr	r3, [pc, #176]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003fa:	61bb      	str	r3, [r7, #24]
 80003fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80003fe:	23c0      	movs	r3, #192	; 0xc0
 8000400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000402:	2312      	movs	r3, #18
 8000404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000406:	2301      	movs	r3, #1
 8000408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800040a:	2303      	movs	r3, #3
 800040c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800040e:	2304      	movs	r3, #4
 8000410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000412:	f107 031c 	add.w	r3, r7, #28
 8000416:	4619      	mov	r1, r3
 8000418:	4823      	ldr	r0, [pc, #140]	; (80004a8 <HAL_I2C_MspInit+0xe4>)
 800041a:	f000 fc7d 	bl	8000d18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	4a20      	ldr	r2, [pc, #128]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000428:	61d3      	str	r3, [r2, #28]
 800042a:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000436:	e02e      	b.n	8000496 <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C2)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a1b      	ldr	r2, [pc, #108]	; (80004ac <HAL_I2C_MspInit+0xe8>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d129      	bne.n	8000496 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a17      	ldr	r2, [pc, #92]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800045a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800045e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000460:	2312      	movs	r3, #18
 8000462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000468:	2303      	movs	r3, #3
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800046c:	2304      	movs	r3, #4
 800046e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	f107 031c 	add.w	r3, r7, #28
 8000474:	4619      	mov	r1, r3
 8000476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047a:	f000 fc4d 	bl	8000d18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 8000484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <HAL_I2C_MspInit+0xe0>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
}
 8000496:	bf00      	nop
 8000498:	3730      	adds	r7, #48	; 0x30
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40005400 	.word	0x40005400
 80004a4:	40021000 	.word	0x40021000
 80004a8:	48000400 	.word	0x48000400
 80004ac:	40005800 	.word	0x40005800

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fae4 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f824 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f7ff fe84 	bl	80001c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c0:	f7ff ff00 	bl	80002c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004c4:	f000 f8f8 	bl	80006b8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80004c8:	f000 fa4a 	bl	8000960 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 80004cc:	f7ff ff3a 	bl	8000344 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80004d0:	f000 f9d2 	bl	8000878 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_MspInit(&hi2c2);	// initializes the GPIO I2C pins (SDA and SCL), initializes I2C clock
 80004d4:	4807      	ldr	r0, [pc, #28]	; (80004f4 <main+0x44>)
 80004d6:	f7ff ff75 	bl	80003c4 <HAL_I2C_MspInit>
  LogMessage(&MSG, sizeof(MSG), "Initialized UART and I2C\r\n");
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <main+0x48>)
 80004dc:	2164      	movs	r1, #100	; 0x64
 80004de:	4807      	ldr	r0, [pc, #28]	; (80004fc <main+0x4c>)
 80004e0:	f000 f8ac 	bl	800063c <LogMessage>


  Tmp102Init();
 80004e4:	f000 f874 	bl	80005d0 <Tmp102Init>
  LogMessage(&MSG, sizeof(MSG), "Initialized TMP102 sensor\r\n");
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <main+0x50>)
 80004ea:	2164      	movs	r1, #100	; 0x64
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <main+0x4c>)
 80004ee:	f000 f8a5 	bl	800063c <LogMessage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <main+0x42>
 80004f4:	20000074 	.word	0x20000074
 80004f8:	08003a3c 	.word	0x08003a3c
 80004fc:	200000c0 	.word	0x200000c0
 8000500:	08003a58 	.word	0x08003a58

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b09e      	sub	sp, #120	; 0x78
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f003 fa76 	bl	8003a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	223c      	movs	r2, #60	; 0x3c
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 fa68 	bl	8003a04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000534:	2303      	movs	r3, #3
 8000536:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000538:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800053c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	2301      	movs	r3, #1
 8000544:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000546:	2310      	movs	r3, #16
 8000548:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000552:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000554:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000558:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800055e:	4618      	mov	r0, r3
 8000560:	f001 f8b8 	bl	80016d4 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800056a:	f000 f885 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000584:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000588:	2101      	movs	r1, #1
 800058a:	4618      	mov	r0, r3
 800058c:	f002 f8e0 	bl	8002750 <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000596:	f000 f86f 	bl	8000678 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <SystemClock_Config+0xc8>)
 800059c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80005a6:	2300      	movs	r3, #0
 80005a8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fb02 	bl	8002bbc <HAL_RCCEx_PeriphCLKConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005be:	f000 f85b 	bl	8000678 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3778      	adds	r7, #120	; 0x78
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	00020061 	.word	0x00020061

080005d0 <Tmp102Init>:

/* USER CODE BEGIN 4 */
void Tmp102Init()
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0

	  uint32_t trials = 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
	  uint32_t timeout = 1000; // milliseconds
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	603b      	str	r3, [r7, #0]
	  // TODO figure out why changing the tmp102 address to other available addresses doesn't work.
	  // TODO figure out why we had to left-shift the address by 1
	  if(HAL_I2C_IsDeviceReady(&hi2c2, tmp102Address, trials, timeout) != HAL_OK)
 80005e0:	2190      	movs	r1, #144	; 0x90
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4811      	ldr	r0, [pc, #68]	; (800062c <Tmp102Init+0x5c>)
 80005e8:	f000 fdb7 	bl	800115a <HAL_I2C_IsDeviceReady>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <Tmp102Init+0x28>
	  {
		  Error_Handler();
 80005f2:	f000 f841 	bl	8000678 <Error_Handler>
	  {
		   strcpy(MSG,"TMP102 sensor ACK received\r\n");
		   HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
		   memset(MSG, 0, 100);
	  }
}
 80005f6:	e014      	b.n	8000622 <Tmp102Init+0x52>
		   strcpy(MSG,"TMP102 sensor ACK received\r\n");
 80005f8:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <Tmp102Init+0x60>)
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <Tmp102Init+0x64>)
 80005fc:	4614      	mov	r4, r2
 80005fe:	461d      	mov	r5, r3
 8000600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000604:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000608:	c407      	stmia	r4!, {r0, r1, r2}
 800060a:	7023      	strb	r3, [r4, #0]
		   HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	2264      	movs	r2, #100	; 0x64
 8000610:	4907      	ldr	r1, [pc, #28]	; (8000630 <Tmp102Init+0x60>)
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <Tmp102Init+0x68>)
 8000614:	f002 fd7b 	bl	800310e <HAL_UART_Transmit>
		   memset(MSG, 0, 100);
 8000618:	2264      	movs	r2, #100	; 0x64
 800061a:	2100      	movs	r1, #0
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <Tmp102Init+0x60>)
 800061e:	f003 f9f1 	bl	8003a04 <memset>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bdb0      	pop	{r4, r5, r7, pc}
 800062a:	bf00      	nop
 800062c:	20000074 	.word	0x20000074
 8000630:	200000c0 	.word	0x200000c0
 8000634:	08003a74 	.word	0x08003a74
 8000638:	20000188 	.word	0x20000188

0800063c <LogMessage>:

/*
 * Copies the string in msgStr into dest, displays dest to console, then clears contents of MsgStr
 */
void LogMessage(int8_t* dest, size_t destSize, int8_t* msgStr)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
	  const int timeoutMs = 100;
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	617b      	str	r3, [r7, #20]

	  strcpy(dest, msgStr);
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	68f8      	ldr	r0, [r7, #12]
 8000650:	f003 f9e0 	bl	8003a14 <strcpy>
	  HAL_UART_Transmit(&huart1, dest, destSize, timeoutMs);
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	b29a      	uxth	r2, r3
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	68f9      	ldr	r1, [r7, #12]
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <LogMessage+0x38>)
 800065e:	f002 fd56 	bl	800310e <HAL_UART_Transmit>
	  memset(dest, 0, destSize);
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	2100      	movs	r1, #0
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f003 f9cc 	bl	8003a04 <memset>
};
 800066c:	bf00      	nop
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000188 	.word	0x20000188

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b08c      	sub	sp, #48	; 0x30
 800067c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067e:	b672      	cpsid	i
}
 8000680:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  char errMsg[] = "Error encountered. Terminate the program\r\n";
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <Error_Handler+0x38>)
 8000684:	1d3c      	adds	r4, r7, #4
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	c403      	stmia	r4!, {r0, r1}
 8000696:	8022      	strh	r2, [r4, #0]
 8000698:	3402      	adds	r4, #2
 800069a:	0c13      	lsrs	r3, r2, #16
 800069c:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, errMsg, sizeof(errMsg), HAL_MAX_DELAY);
 800069e:	1d39      	adds	r1, r7, #4
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	222b      	movs	r2, #43	; 0x2b
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <Error_Handler+0x3c>)
 80006a8:	f002 fd31 	bl	800310e <HAL_UART_Transmit>

  while (1)
 80006ac:	e7fe      	b.n	80006ac <Error_Handler+0x34>
 80006ae:	bf00      	nop
 80006b0:	08003a94 	.word	0x08003a94
 80006b4:	20000188 	.word	0x20000188

080006b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_SPI1_Init+0x74>)
 80006be:	4a1c      	ldr	r2, [pc, #112]	; (8000730 <MX_SPI1_Init+0x78>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_SPI1_Init+0x74>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_SPI1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_SPI1_Init+0x74>)
 80006d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_SPI1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_SPI1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_SPI1_Init+0x74>)
 80006e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_SPI1_Init+0x74>)
 80006ee:	2208      	movs	r2, #8
 80006f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_SPI1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_SPI1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_SPI1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_SPI1_Init+0x74>)
 8000706:	2207      	movs	r2, #7
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_SPI1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_SPI1_Init+0x74>)
 8000712:	2208      	movs	r2, #8
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_SPI1_Init+0x74>)
 8000718:	f002 fc00 	bl	8002f1c <HAL_SPI_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000722:	f7ff ffa9 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000124 	.word	0x20000124
 8000730:	40013000 	.word	0x40013000

08000734 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <HAL_SPI_MspInit+0x7c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d128      	bne.n	80007a8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <HAL_SPI_MspInit+0x80>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <HAL_SPI_MspInit+0x80>)
 800075c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000760:	6193      	str	r3, [r2, #24]
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <HAL_SPI_MspInit+0x80>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_SPI_MspInit+0x80>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <HAL_SPI_MspInit+0x80>)
 8000774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000778:	6153      	str	r3, [r2, #20]
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <HAL_SPI_MspInit+0x80>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000786:	23e0      	movs	r3, #224	; 0xe0
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000796:	2305      	movs	r3, #5
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a4:	f000 fab8 	bl	8000d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40013000 	.word	0x40013000
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x44>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_MspInit+0x44>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_MspInit+0x44>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x44>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x44>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x44>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ee:	2007      	movs	r0, #7
 80007f0:	f000 fa5e 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler+0x4>

08000812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler+0x4>

0800081e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084c:	f000 f95e 	bl	8000b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_USART1_UART_Init+0x58>)
 800087e:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_USART1_UART_Init+0x5c>)
 8000880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_USART1_UART_Init+0x58>)
 8000884:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_USART1_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART1_UART_Init+0x58>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART1_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART1_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART1_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART1_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART1_UART_Init+0x58>)
 80008bc:	f002 fbd9 	bl	8003072 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008c6:	f7ff fed7 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000188 	.word	0x20000188
 80008d4:	40013800 	.word	0x40013800

080008d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a17      	ldr	r2, [pc, #92]	; (8000954 <HAL_UART_MspInit+0x7c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d127      	bne.n	800094a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_UART_MspInit+0x80>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <HAL_UART_MspInit+0x80>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6193      	str	r3, [r2, #24]
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_UART_MspInit+0x80>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_UART_MspInit+0x80>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a10      	ldr	r2, [pc, #64]	; (8000958 <HAL_UART_MspInit+0x80>)
 8000918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_UART_MspInit+0x80>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800092a:	2330      	movs	r3, #48	; 0x30
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800093a:	2307      	movs	r3, #7
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <HAL_UART_MspInit+0x84>)
 8000946:	f000 f9e7 	bl	8000d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40013800 	.word	0x40013800
 8000958:	40021000 	.word	0x40021000
 800095c:	48000800 	.word	0x48000800

08000960 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_USB_PCD_Init+0x3c>)
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <MX_USB_PCD_Init+0x40>)
 8000968:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USB_PCD_Init+0x3c>)
 800096c:	2208      	movs	r2, #8
 800096e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_USB_PCD_Init+0x3c>)
 8000972:	2202      	movs	r2, #2
 8000974:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USB_PCD_Init+0x3c>)
 8000978:	2202      	movs	r2, #2
 800097a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_USB_PCD_Init+0x3c>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USB_PCD_Init+0x3c>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_USB_PCD_Init+0x3c>)
 800098a:	f000 fdc4 	bl	8001516 <HAL_PCD_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000994:	f7ff fe70 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000020c 	.word	0x2000020c
 80009a0:	40005c00 	.word	0x40005c00

080009a4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <HAL_PCD_MspInit+0x80>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d129      	bne.n	8000a1a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_PCD_MspInit+0x84>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <HAL_PCD_MspInit+0x84>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	6153      	str	r3, [r2, #20]
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_PCD_MspInit+0x84>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80009de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80009f0:	230e      	movs	r3, #14
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f000 f98b 	bl	8000d18 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_PCD_MspInit+0x84>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_PCD_MspInit+0x84>)
 8000a08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_PCD_MspInit+0x84>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40005c00 	.word	0x40005c00
 8000a28:	40021000 	.word	0x40021000

08000a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a56:	f7ff fefd 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f002 ffaf 	bl	80039bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5e:	f7ff fd27 	bl	80004b0 <main>

08000a62 <LoopForever>:

LoopForever:
    b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a64:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a70:	08003b00 	.word	0x08003b00
  ldr r2, =_sbss
 8000a74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a78:	200004fc 	.word	0x200004fc

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_Init+0x28>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_Init+0x28>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f90d 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f808 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff fe8c 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40022000 	.word	0x40022000

08000aac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x54>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x58>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f917 	bl	8000cfe <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00e      	b.n	8000af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d80a      	bhi.n	8000af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f000 f8ed 	bl	8000cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <HAL_InitTick+0x5c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	200004f8 	.word	0x200004f8

08000b34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200004f8 	.word	0x200004f8

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff8e 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff47 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff5c 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff8e 	bl	8000c04 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5d 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffb0 	bl	8000c6c <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e154      	b.n	8000fd2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8146 	beq.w	8000fcc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d005      	beq.n	8000d58 <HAL_GPIO_Init+0x40>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 0201 	and.w	r2, r3, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d017      	beq.n	8000df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d123      	bne.n	8000e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3208      	adds	r2, #8
 8000e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	691a      	ldr	r2, [r3, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	6939      	ldr	r1, [r7, #16]
 8000e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0203 	and.w	r2, r3, #3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80a0 	beq.w	8000fcc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8c:	4b58      	ldr	r3, [pc, #352]	; (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a57      	ldr	r2, [pc, #348]	; (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b55      	ldr	r3, [pc, #340]	; (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea4:	4a53      	ldr	r2, [pc, #332]	; (8000ff4 <HAL_GPIO_Init+0x2dc>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ece:	d019      	beq.n	8000f04 <HAL_GPIO_Init+0x1ec>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a49      	ldr	r2, [pc, #292]	; (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d013      	beq.n	8000f00 <HAL_GPIO_Init+0x1e8>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <HAL_GPIO_Init+0x2e4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00d      	beq.n	8000efc <HAL_GPIO_Init+0x1e4>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a47      	ldr	r2, [pc, #284]	; (8001000 <HAL_GPIO_Init+0x2e8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d007      	beq.n	8000ef8 <HAL_GPIO_Init+0x1e0>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a46      	ldr	r2, [pc, #280]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d101      	bne.n	8000ef4 <HAL_GPIO_Init+0x1dc>
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	e008      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e004      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e002      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000f04:	2300      	movs	r3, #0
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f16:	4937      	ldr	r1, [pc, #220]	; (8000ff4 <HAL_GPIO_Init+0x2dc>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f24:	4b38      	ldr	r3, [pc, #224]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f48:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f72:	4a25      	ldr	r2, [pc, #148]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fc6:	4a10      	ldr	r2, [pc, #64]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f47f aea3 	bne.w	8000d28 <HAL_GPIO_Init+0x10>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	48000800 	.word	0x48000800
 8001000:	48000c00 	.word	0x48000c00
 8001004:	48001000 	.word	0x48001000
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
 8001018:	4613      	mov	r3, r2
 800101a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001028:	e002      	b.n	8001030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e081      	b.n	8001152 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d106      	bne.n	8001068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff f9ae 	bl	80003c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2224      	movs	r2, #36	; 0x24
 800106c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800108c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800109c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d107      	bne.n	80010b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	e006      	b.n	80010c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d104      	bne.n	80010d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691a      	ldr	r2, [r3, #16]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69d9      	ldr	r1, [r3, #28]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2220      	movs	r2, #32
 800113e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b08a      	sub	sp, #40	; 0x28
 800115e:	af02      	add	r7, sp, #8
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	460b      	mov	r3, r1
 8001168:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b20      	cmp	r3, #32
 8001178:	f040 80f1 	bne.w	800135e <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800118a:	d101      	bne.n	8001190 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800118c:	2302      	movs	r3, #2
 800118e:	e0e7      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <HAL_I2C_IsDeviceReady+0x44>
 800119a:	2302      	movs	r3, #2
 800119c:	e0e0      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x206>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2224      	movs	r2, #36	; 0x24
 80011aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d107      	bne.n	80011cc <HAL_I2C_IsDeviceReady+0x72>
 80011bc:	897b      	ldrh	r3, [r7, #10]
 80011be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011ca:	e004      	b.n	80011d6 <HAL_I2C_IsDeviceReady+0x7c>
 80011cc:	897b      	ldrh	r3, [r7, #10]
 80011ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011d2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80011dc:	f7ff fcaa 	bl	8000b34 <HAL_GetTick>
 80011e0:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0320 	and.w	r3, r3, #32
 80011ec:	2b20      	cmp	r3, #32
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	2b10      	cmp	r3, #16
 8001204:	bf0c      	ite	eq
 8001206:	2301      	moveq	r3, #1
 8001208:	2300      	movne	r3, #0
 800120a:	b2db      	uxtb	r3, r3
 800120c:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800120e:	e034      	b.n	800127a <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001216:	d01a      	beq.n	800124e <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001218:	f7ff fc8c 	bl	8000b34 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d302      	bcc.n	800122e <HAL_I2C_IsDeviceReady+0xd4>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10f      	bne.n	800124e <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2220      	movs	r2, #32
 8001232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f043 0220 	orr.w	r2, r3, #32
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e088      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0320 	and.w	r3, r3, #32
 8001258:	2b20      	cmp	r3, #32
 800125a:	bf0c      	ite	eq
 800125c:	2301      	moveq	r3, #1
 800125e:	2300      	movne	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	2b10      	cmp	r3, #16
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <HAL_I2C_IsDeviceReady+0x12c>
 8001280:	7fbb      	ldrb	r3, [r7, #30]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0c4      	beq.n	8001210 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b10      	cmp	r3, #16
 8001292:	d01a      	beq.n	80012ca <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2200      	movs	r2, #0
 800129c:	2120      	movs	r1, #32
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 f862 	bl	8001368 <I2C_WaitOnFlagUntilTimeout>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e058      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2220      	movs	r2, #32
 80012b4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2220      	movs	r2, #32
 80012ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e04a      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2200      	movs	r2, #0
 80012d2:	2120      	movs	r1, #32
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f000 f847 	bl	8001368 <I2C_WaitOnFlagUntilTimeout>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e03d      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2210      	movs	r2, #16
 80012ea:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2220      	movs	r2, #32
 80012f2:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d118      	bne.n	800132e <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800130a:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	2120      	movs	r1, #32
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 f826 	bl	8001368 <I2C_WaitOnFlagUntilTimeout>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e01c      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2220      	movs	r2, #32
 800132c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	f63f af3b 	bhi.w	80011b4 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2220      	movs	r2, #32
 8001342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f043 0220 	orr.w	r2, r3, #32
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800135e:	2302      	movs	r3, #2
  }
}
 8001360:	4618      	mov	r0, r3
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	4613      	mov	r3, r2
 8001376:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001378:	e022      	b.n	80013c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d01e      	beq.n	80013c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001382:	f7ff fbd7 	bl	8000b34 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d302      	bcc.n	8001398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d113      	bne.n	80013c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	f043 0220 	orr.w	r2, r3, #32
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2220      	movs	r2, #32
 80013a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e00f      	b.n	80013e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699a      	ldr	r2, [r3, #24]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	4013      	ands	r3, r2
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	bf0c      	ite	eq
 80013d0:	2301      	moveq	r3, #1
 80013d2:	2300      	movne	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d0cd      	beq.n	800137a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b20      	cmp	r3, #32
 80013fc:	d138      	bne.n	8001470 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001408:	2302      	movs	r3, #2
 800140a:	e032      	b.n	8001472 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0201 	bic.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800143a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2220      	movs	r2, #32
 8001460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	e000      	b.n	8001472 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001470:	2302      	movs	r3, #2
  }
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800147e:	b480      	push	{r7}
 8001480:	b085      	sub	sp, #20
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b20      	cmp	r3, #32
 8001492:	d139      	bne.n	8001508 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800149e:	2302      	movs	r3, #2
 80014a0:	e033      	b.n	800150a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2224      	movs	r2, #36	; 0x24
 80014ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0201 	bic.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2220      	movs	r2, #32
 80014f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	e000      	b.n	800150a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001508:	2302      	movs	r3, #2
  }
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001518:	b08b      	sub	sp, #44	; 0x2c
 800151a:	af06      	add	r7, sp, #24
 800151c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0d0      	b.n	80016ca <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d106      	bne.n	8001542 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fa31 	bl	80009a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2203      	movs	r2, #3
 8001546:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f002 f9f7 	bl	8003942 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e04c      	b.n	80015f4 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	3301      	adds	r3, #1
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	b298      	uxth	r0, r3
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	3336      	adds	r3, #54	; 0x36
 8001598:	4602      	mov	r2, r0
 800159a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	3303      	adds	r3, #3
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	3338      	adds	r3, #56	; 0x38
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	333c      	adds	r3, #60	; 0x3c
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	3340      	adds	r3, #64	; 0x40
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d3ad      	bcc.n	800155a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	e044      	b.n	800168e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	440b      	add	r3, r1
 8001628:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	440b      	add	r3, r1
 800166a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	3301      	adds	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	d3b5      	bcc.n	8001604 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	687e      	ldr	r6, [r7, #4]
 80016a0:	466d      	mov	r5, sp
 80016a2:	f106 0410 	add.w	r4, r6, #16
 80016a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	602b      	str	r3, [r5, #0]
 80016ae:	1d33      	adds	r3, r6, #4
 80016b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b2:	6838      	ldr	r0, [r7, #0]
 80016b4:	f002 f960 	bl	8003978 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80016da:	af00      	add	r7, sp, #0
 80016dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f001 b823 	b.w	8002740 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 817d 	beq.w	8001a0a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001710:	4bbc      	ldr	r3, [pc, #752]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b04      	cmp	r3, #4
 800171a:	d00c      	beq.n	8001736 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800171c:	4bb9      	ldr	r3, [pc, #740]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	d15c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x10e>
 8001728:	4bb6      	ldr	r3, [pc, #728]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001734:	d155      	bne.n	80017e2 <HAL_RCC_OscConfig+0x10e>
 8001736:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800173a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800174a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174e:	fab3 f383 	clz	r3, r3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	095b      	lsrs	r3, r3, #5
 8001756:	b2db      	uxtb	r3, r3
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d102      	bne.n	8001768 <HAL_RCC_OscConfig+0x94>
 8001762:	4ba8      	ldr	r3, [pc, #672]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	e015      	b.n	8001794 <HAL_RCC_OscConfig+0xc0>
 8001768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800176c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800177c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001780:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001784:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001790:	4b9c      	ldr	r3, [pc, #624]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001798:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800179c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017a0:	fa92 f2a2 	rbit	r2, r2
 80017a4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80017a8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80017ac:	fab2 f282 	clz	r2, r2
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	f042 0220 	orr.w	r2, r2, #32
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f002 021f 	and.w	r2, r2, #31
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f202 	lsl.w	r2, r1, r2
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 811f 	beq.w	8001a08 <HAL_RCC_OscConfig+0x334>
 80017ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f040 8116 	bne.w	8001a08 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	f000 bfaf 	b.w	8002740 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x12e>
 80017f4:	4b83      	ldr	r3, [pc, #524]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a82      	ldr	r2, [pc, #520]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e036      	b.n	8001870 <HAL_RCC_OscConfig+0x19c>
 8001802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x158>
 8001812:	4b7c      	ldr	r3, [pc, #496]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7b      	ldr	r2, [pc, #492]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b79      	ldr	r3, [pc, #484]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a78      	ldr	r2, [pc, #480]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e021      	b.n	8001870 <HAL_RCC_OscConfig+0x19c>
 800182c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001830:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x184>
 800183e:	4b71      	ldr	r3, [pc, #452]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a70      	ldr	r2, [pc, #448]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b6e      	ldr	r3, [pc, #440]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a6d      	ldr	r2, [pc, #436]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0x19c>
 8001858:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a69      	ldr	r2, [pc, #420]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b67      	ldr	r3, [pc, #412]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a66      	ldr	r2, [pc, #408]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001870:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	f023 020f 	bic.w	r2, r3, #15
 8001878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	495f      	ldr	r1, [pc, #380]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001886:	4313      	orrs	r3, r2
 8001888:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d059      	beq.n	800194e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7ff f94b 	bl	8000b34 <HAL_GetTick>
 800189e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff f946 	bl	8000b34 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b64      	cmp	r3, #100	; 0x64
 80018b2:	d902      	bls.n	80018ba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	f000 bf43 	b.w	8002740 <HAL_RCC_OscConfig+0x106c>
 80018ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018be:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80018ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	fab3 f383 	clz	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	095b      	lsrs	r3, r3, #5
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d102      	bne.n	80018ec <HAL_RCC_OscConfig+0x218>
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	e015      	b.n	8001918 <HAL_RCC_OscConfig+0x244>
 80018ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001904:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001908:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800190c:	fa93 f3a3 	rbit	r3, r3
 8001910:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001914:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800191c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001920:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001924:	fa92 f2a2 	rbit	r2, r2
 8001928:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800192c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001930:	fab2 f282 	clz	r2, r2
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	f042 0220 	orr.w	r2, r2, #32
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	f002 021f 	and.w	r2, r2, #31
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f202 	lsl.w	r2, r1, r2
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ab      	beq.n	80018a4 <HAL_RCC_OscConfig+0x1d0>
 800194c:	e05d      	b.n	8001a0a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff f8f1 	bl	8000b34 <HAL_GetTick>
 8001952:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001956:	e00a      	b.n	800196e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff f8ec 	bl	8000b34 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b64      	cmp	r3, #100	; 0x64
 8001966:	d902      	bls.n	800196e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	f000 bee9 	b.w	8002740 <HAL_RCC_OscConfig+0x106c>
 800196e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001972:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001982:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	095b      	lsrs	r3, r3, #5
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d102      	bne.n	80019a0 <HAL_RCC_OscConfig+0x2cc>
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	e015      	b.n	80019cc <HAL_RCC_OscConfig+0x2f8>
 80019a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80019ac:	fa93 f3a3 	rbit	r3, r3
 80019b0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_RCC_OscConfig+0x330>)
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019d0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80019d4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019d8:	fa92 f2a2 	rbit	r2, r2
 80019dc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80019e0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80019e4:	fab2 f282 	clz	r2, r2
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	f042 0220 	orr.w	r2, r2, #32
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	f002 021f 	and.w	r2, r2, #31
 80019f4:	2101      	movs	r1, #1
 80019f6:	fa01 f202 	lsl.w	r2, r1, r2
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ab      	bne.n	8001958 <HAL_RCC_OscConfig+0x284>
 8001a00:	e003      	b.n	8001a0a <HAL_RCC_OscConfig+0x336>
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 817d 	beq.w	8001d1a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a20:	4ba6      	ldr	r3, [pc, #664]	; (8001cbc <HAL_RCC_OscConfig+0x5e8>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00b      	beq.n	8001a44 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a2c:	4ba3      	ldr	r3, [pc, #652]	; (8001cbc <HAL_RCC_OscConfig+0x5e8>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d172      	bne.n	8001b1e <HAL_RCC_OscConfig+0x44a>
 8001a38:	4ba0      	ldr	r3, [pc, #640]	; (8001cbc <HAL_RCC_OscConfig+0x5e8>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d16c      	bne.n	8001b1e <HAL_RCC_OscConfig+0x44a>
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d102      	bne.n	8001a74 <HAL_RCC_OscConfig+0x3a0>
 8001a6e:	4b93      	ldr	r3, [pc, #588]	; (8001cbc <HAL_RCC_OscConfig+0x5e8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	e013      	b.n	8001a9c <HAL_RCC_OscConfig+0x3c8>
 8001a74:	2302      	movs	r3, #2
 8001a76:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a98:	4b88      	ldr	r3, [pc, #544]	; (8001cbc <HAL_RCC_OscConfig+0x5e8>)
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001aa2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001aa6:	fa92 f2a2 	rbit	r2, r2
 8001aaa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001aae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ab2:	fab2 f282 	clz	r2, r2
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	f042 0220 	orr.w	r2, r2, #32
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	f002 021f 	and.w	r2, r2, #31
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00a      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x410>
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d002      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f000 be2e 	b.w	8002740 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae4:	4b75      	ldr	r3, [pc, #468]	; (8001cbc <HAL_RCC_OscConfig+0x5e8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	21f8      	movs	r1, #248	; 0xf8
 8001afa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b02:	fa91 f1a1 	rbit	r1, r1
 8001b06:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b0a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b0e:	fab1 f181 	clz	r1, r1
 8001b12:	b2c9      	uxtb	r1, r1
 8001b14:	408b      	lsls	r3, r1
 8001b16:	4969      	ldr	r1, [pc, #420]	; (8001cbc <HAL_RCC_OscConfig+0x5e8>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1c:	e0fd      	b.n	8001d1a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8088 	beq.w	8001c40 <HAL_RCC_OscConfig+0x56c>
 8001b30:	2301      	movs	r3, #1
 8001b32:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b42:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	461a      	mov	r2, r3
 8001b58:	2301      	movs	r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7fe ffea 	bl	8000b34 <HAL_GetTick>
 8001b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b66:	f7fe ffe5 	bl	8000b34 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d902      	bls.n	8001b7c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	f000 bde2 	b.w	8002740 <HAL_RCC_OscConfig+0x106c>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b8e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	095b      	lsrs	r3, r3, #5
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d102      	bne.n	8001bac <HAL_RCC_OscConfig+0x4d8>
 8001ba6:	4b45      	ldr	r3, [pc, #276]	; (8001cbc <HAL_RCC_OscConfig+0x5e8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	e013      	b.n	8001bd4 <HAL_RCC_OscConfig+0x500>
 8001bac:	2302      	movs	r3, #2
 8001bae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001bc4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001bd0:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <HAL_RCC_OscConfig+0x5e8>)
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001bda:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001bde:	fa92 f2a2 	rbit	r2, r2
 8001be2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001be6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001bea:	fab2 f282 	clz	r2, r2
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	f042 0220 	orr.w	r2, r2, #32
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f002 021f 	and.w	r2, r2, #31
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0af      	beq.n	8001b66 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c06:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_RCC_OscConfig+0x5e8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	21f8      	movs	r1, #248	; 0xf8
 8001c1c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c24:	fa91 f1a1 	rbit	r1, r1
 8001c28:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c2c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c30:	fab1 f181 	clz	r1, r1
 8001c34:	b2c9      	uxtb	r1, r1
 8001c36:	408b      	lsls	r3, r1
 8001c38:	4920      	ldr	r1, [pc, #128]	; (8001cbc <HAL_RCC_OscConfig+0x5e8>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
 8001c3e:	e06c      	b.n	8001d1a <HAL_RCC_OscConfig+0x646>
 8001c40:	2301      	movs	r3, #1
 8001c42:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	461a      	mov	r2, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7fe ff62 	bl	8000b34 <HAL_GetTick>
 8001c70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c76:	f7fe ff5d 	bl	8000b34 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d902      	bls.n	8001c8c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	f000 bd5a 	b.w	8002740 <HAL_RCC_OscConfig+0x106c>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d104      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5ec>
 8001cb6:	4b01      	ldr	r3, [pc, #4]	; (8001cbc <HAL_RCC_OscConfig+0x5e8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e015      	b.n	8001ce8 <HAL_RCC_OscConfig+0x614>
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001cd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ce4:	4bc8      	ldr	r3, [pc, #800]	; (8002008 <HAL_RCC_OscConfig+0x934>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001cee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001cf2:	fa92 f2a2 	rbit	r2, r2
 8001cf6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001cfa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001cfe:	fab2 f282 	clz	r2, r2
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f042 0220 	orr.w	r2, r2, #32
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f002 021f 	and.w	r2, r2, #31
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f202 	lsl.w	r2, r1, r2
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1ad      	bne.n	8001c76 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8110 	beq.w	8001f50 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d079      	beq.n	8001e34 <HAL_RCC_OscConfig+0x760>
 8001d40:	2301      	movs	r3, #1
 8001d42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4bab      	ldr	r3, [pc, #684]	; (800200c <HAL_RCC_OscConfig+0x938>)
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	461a      	mov	r2, r3
 8001d66:	2301      	movs	r3, #1
 8001d68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe fee3 	bl	8000b34 <HAL_GetTick>
 8001d6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d74:	f7fe fede 	bl	8000b34 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d902      	bls.n	8001d8a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	f000 bcdb 	b.w	8002740 <HAL_RCC_OscConfig+0x106c>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001da4:	2202      	movs	r2, #2
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001dc8:	2202      	movs	r2, #2
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001de2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de4:	4b88      	ldr	r3, [pc, #544]	; (8002008 <HAL_RCC_OscConfig+0x934>)
 8001de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001df0:	2102      	movs	r1, #2
 8001df2:	6019      	str	r1, [r3, #0]
 8001df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f1a3 	rbit	r1, r3
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e0a:	6019      	str	r1, [r3, #0]
  return result;
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0a0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x6a0>
 8001e32:	e08d      	b.n	8001f50 <HAL_RCC_OscConfig+0x87c>
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fa93 f2a3 	rbit	r2, r3
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e56:	601a      	str	r2, [r3, #0]
  return result;
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e60:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b68      	ldr	r3, [pc, #416]	; (800200c <HAL_RCC_OscConfig+0x938>)
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	461a      	mov	r2, r3
 8001e72:	2300      	movs	r3, #0
 8001e74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7fe fe5d 	bl	8000b34 <HAL_GetTick>
 8001e7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e80:	f7fe fe58 	bl	8000b34 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d902      	bls.n	8001e96 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	f000 bc55 	b.w	8002740 <HAL_RCC_OscConfig+0x106c>
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	fa93 f2a3 	rbit	r2, r3
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f2a3 	rbit	r2, r3
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f02:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_RCC_OscConfig+0x934>)
 8001f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f0e:	2102      	movs	r1, #2
 8001f10:	6019      	str	r1, [r3, #0]
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	fa93 f1a3 	rbit	r1, r3
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f28:	6019      	str	r1, [r3, #0]
  return result;
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d197      	bne.n	8001e80 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 81a1 	beq.w	80022a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6c:	4b26      	ldr	r3, [pc, #152]	; (8002008 <HAL_RCC_OscConfig+0x934>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d116      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f78:	4b23      	ldr	r3, [pc, #140]	; (8002008 <HAL_RCC_OscConfig+0x934>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	4a22      	ldr	r2, [pc, #136]	; (8002008 <HAL_RCC_OscConfig+0x934>)
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	61d3      	str	r3, [r2, #28]
 8001f84:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_RCC_OscConfig+0x934>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f9e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_RCC_OscConfig+0x93c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11a      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_RCC_OscConfig+0x93c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a16      	ldr	r2, [pc, #88]	; (8002010 <HAL_RCC_OscConfig+0x93c>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbe:	f7fe fdb9 	bl	8000b34 <HAL_GetTick>
 8001fc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc6:	e009      	b.n	8001fdc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc8:	f7fe fdb4 	bl	8000b34 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b64      	cmp	r3, #100	; 0x64
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e3b1      	b.n	8002740 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_RCC_OscConfig+0x93c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ef      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10d      	bne.n	8002014 <HAL_RCC_OscConfig+0x940>
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <HAL_RCC_OscConfig+0x934>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a02      	ldr	r2, [pc, #8]	; (8002008 <HAL_RCC_OscConfig+0x934>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	e03c      	b.n	8002080 <HAL_RCC_OscConfig+0x9ac>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	10908120 	.word	0x10908120
 8002010:	40007000 	.word	0x40007000
 8002014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002018:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10c      	bne.n	800203e <HAL_RCC_OscConfig+0x96a>
 8002024:	4bc1      	ldr	r3, [pc, #772]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4ac0      	ldr	r2, [pc, #768]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	6213      	str	r3, [r2, #32]
 8002030:	4bbe      	ldr	r3, [pc, #760]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4abd      	ldr	r2, [pc, #756]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 8002036:	f023 0304 	bic.w	r3, r3, #4
 800203a:	6213      	str	r3, [r2, #32]
 800203c:	e020      	b.n	8002080 <HAL_RCC_OscConfig+0x9ac>
 800203e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b05      	cmp	r3, #5
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x994>
 800204e:	4bb7      	ldr	r3, [pc, #732]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4ab6      	ldr	r2, [pc, #728]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6213      	str	r3, [r2, #32]
 800205a:	4bb4      	ldr	r3, [pc, #720]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4ab3      	ldr	r2, [pc, #716]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	e00b      	b.n	8002080 <HAL_RCC_OscConfig+0x9ac>
 8002068:	4bb0      	ldr	r3, [pc, #704]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4aaf      	ldr	r2, [pc, #700]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 800206e:	f023 0301 	bic.w	r3, r3, #1
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	4bad      	ldr	r3, [pc, #692]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4aac      	ldr	r2, [pc, #688]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 800207a:	f023 0304 	bic.w	r3, r3, #4
 800207e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002084:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8081 	beq.w	8002194 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002092:	f7fe fd4f 	bl	8000b34 <HAL_GetTick>
 8002096:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f7fe fd4a 	bl	8000b34 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e345      	b.n	8002740 <HAL_RCC_OscConfig+0x106c>
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020bc:	2202      	movs	r2, #2
 80020be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	fa93 f2a3 	rbit	r2, r3
 80020ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80020e0:	2202      	movs	r2, #2
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	fa93 f2a3 	rbit	r2, r3
 80020f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020fa:	601a      	str	r2, [r3, #0]
  return result;
 80020fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002100:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002104:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d102      	bne.n	8002120 <HAL_RCC_OscConfig+0xa4c>
 800211a:	4b84      	ldr	r3, [pc, #528]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	e013      	b.n	8002148 <HAL_RCC_OscConfig+0xa74>
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002128:	2202      	movs	r2, #2
 800212a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	4b79      	ldr	r3, [pc, #484]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800214c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002150:	2102      	movs	r1, #2
 8002152:	6011      	str	r1, [r2, #0]
 8002154:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002158:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	fa92 f1a2 	rbit	r1, r2
 8002162:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002166:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800216a:	6011      	str	r1, [r2, #0]
  return result;
 800216c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002170:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	fab2 f282 	clz	r2, r2
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	f002 021f 	and.w	r2, r2, #31
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f202 	lsl.w	r2, r1, r2
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d084      	beq.n	800209c <HAL_RCC_OscConfig+0x9c8>
 8002192:	e07f      	b.n	8002294 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002194:	f7fe fcce 	bl	8000b34 <HAL_GetTick>
 8002198:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	e00b      	b.n	80021b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7fe fcc9 	bl	8000b34 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e2c4      	b.n	8002740 <HAL_RCC_OscConfig+0x106c>
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80021be:	2202      	movs	r2, #2
 80021c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f2a3 	rbit	r2, r3
 80021d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021e2:	2202      	movs	r2, #2
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	fa93 f2a3 	rbit	r2, r3
 80021f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021fc:	601a      	str	r2, [r3, #0]
  return result;
 80021fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002202:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002206:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d102      	bne.n	8002222 <HAL_RCC_OscConfig+0xb4e>
 800221c:	4b43      	ldr	r3, [pc, #268]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	e013      	b.n	800224a <HAL_RCC_OscConfig+0xb76>
 8002222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002226:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800222a:	2202      	movs	r2, #2
 800222c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	fa93 f2a3 	rbit	r2, r3
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	4b39      	ldr	r3, [pc, #228]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800224e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002252:	2102      	movs	r1, #2
 8002254:	6011      	str	r1, [r2, #0]
 8002256:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800225a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	fa92 f1a2 	rbit	r1, r2
 8002264:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002268:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800226c:	6011      	str	r1, [r2, #0]
  return result;
 800226e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002272:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	fab2 f282 	clz	r2, r2
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f002 021f 	and.w	r2, r2, #31
 8002288:	2101      	movs	r1, #1
 800228a:	fa01 f202 	lsl.w	r2, r1, r2
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d184      	bne.n	800219e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002294:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002298:	2b01      	cmp	r3, #1
 800229a:	d105      	bne.n	80022a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	4a22      	ldr	r2, [pc, #136]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 80022a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8242 	beq.w	800273e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <HAL_RCC_OscConfig+0xc58>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	f000 8213 	beq.w	80026ee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	f040 8162 	bne.w	800259e <HAL_RCC_OscConfig+0xeca>
 80022da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022de:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80022e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	fa93 f2a3 	rbit	r2, r3
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022fe:	601a      	str	r2, [r3, #0]
  return result;
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002308:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002314:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	461a      	mov	r2, r3
 800231c:	2300      	movs	r3, #0
 800231e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe fc08 	bl	8000b34 <HAL_GetTick>
 8002324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002328:	e00c      	b.n	8002344 <HAL_RCC_OscConfig+0xc70>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fc00 	bl	8000b34 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e1fd      	b.n	8002740 <HAL_RCC_OscConfig+0x106c>
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800234c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fa93 f2a3 	rbit	r2, r3
 8002360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002364:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002368:	601a      	str	r2, [r3, #0]
  return result;
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002372:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d102      	bne.n	800238e <HAL_RCC_OscConfig+0xcba>
 8002388:	4bb0      	ldr	r3, [pc, #704]	; (800264c <HAL_RCC_OscConfig+0xf78>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	e027      	b.n	80023de <HAL_RCC_OscConfig+0xd0a>
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002396:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800239a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	fa93 f2a3 	rbit	r2, r3
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	4b9c      	ldr	r3, [pc, #624]	; (800264c <HAL_RCC_OscConfig+0xf78>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80023e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023ea:	6011      	str	r1, [r2, #0]
 80023ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023f0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	fa92 f1a2 	rbit	r1, r2
 80023fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002402:	6011      	str	r1, [r2, #0]
  return result;
 8002404:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002408:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	fab2 f282 	clz	r2, r2
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	f042 0220 	orr.w	r2, r2, #32
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f002 021f 	and.w	r2, r2, #31
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f202 	lsl.w	r2, r1, r2
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d182      	bne.n	8002330 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242a:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_OscConfig+0xf78>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	430b      	orrs	r3, r1
 800244c:	497f      	ldr	r1, [pc, #508]	; (800264c <HAL_RCC_OscConfig+0xf78>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
 8002452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002456:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800245a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800245e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002464:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f2a3 	rbit	r2, r3
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002476:	601a      	str	r2, [r3, #0]
  return result;
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002480:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800248c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	461a      	mov	r2, r3
 8002494:	2301      	movs	r3, #1
 8002496:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fb4c 	bl	8000b34 <HAL_GetTick>
 800249c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a0:	e009      	b.n	80024b6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a2:	f7fe fb47 	bl	8000b34 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e144      	b.n	8002740 <HAL_RCC_OscConfig+0x106c>
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	fa93 f2a3 	rbit	r2, r3
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024da:	601a      	str	r2, [r3, #0]
  return result;
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_OscConfig+0xe2c>
 80024fa:	4b54      	ldr	r3, [pc, #336]	; (800264c <HAL_RCC_OscConfig+0xf78>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	e027      	b.n	8002550 <HAL_RCC_OscConfig+0xe7c>
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800252e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f2a3 	rbit	r2, r3
 8002542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002546:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	4b3f      	ldr	r3, [pc, #252]	; (800264c <HAL_RCC_OscConfig+0xf78>)
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002554:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002558:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800255c:	6011      	str	r1, [r2, #0]
 800255e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002562:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	fa92 f1a2 	rbit	r1, r2
 800256c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002570:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002574:	6011      	str	r1, [r2, #0]
  return result;
 8002576:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800257a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	fab2 f282 	clz	r2, r2
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f042 0220 	orr.w	r2, r2, #32
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f002 021f 	and.w	r2, r2, #31
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f202 	lsl.w	r2, r1, r2
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d082      	beq.n	80024a2 <HAL_RCC_OscConfig+0xdce>
 800259c:	e0cf      	b.n	800273e <HAL_RCC_OscConfig+0x106a>
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80025a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	fa93 f2a3 	rbit	r2, r3
 80025ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025be:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025c2:	601a      	str	r2, [r3, #0]
  return result;
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	461a      	mov	r2, r3
 80025e0:	2300      	movs	r3, #0
 80025e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe faa6 	bl	8000b34 <HAL_GetTick>
 80025e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ec:	e009      	b.n	8002602 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ee:	f7fe faa1 	bl	8000b34 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e09e      	b.n	8002740 <HAL_RCC_OscConfig+0x106c>
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800260a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800260e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	fa93 f2a3 	rbit	r2, r3
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002626:	601a      	str	r2, [r3, #0]
  return result;
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002630:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d104      	bne.n	8002650 <HAL_RCC_OscConfig+0xf7c>
 8002646:	4b01      	ldr	r3, [pc, #4]	; (800264c <HAL_RCC_OscConfig+0xf78>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	e029      	b.n	80026a0 <HAL_RCC_OscConfig+0xfcc>
 800264c:	40021000 	.word	0x40021000
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002662:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	fa93 f2a3 	rbit	r2, r3
 800266c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002670:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800267e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	fa93 f2a3 	rbit	r2, r3
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_RCC_OscConfig+0x1078>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026a4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80026a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026ac:	6011      	str	r1, [r2, #0]
 80026ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	fa92 f1a2 	rbit	r1, r2
 80026bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026c0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026c4:	6011      	str	r1, [r2, #0]
  return result;
 80026c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	fab2 f282 	clz	r2, r2
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	f042 0220 	orr.w	r2, r2, #32
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	f002 021f 	and.w	r2, r2, #31
 80026e0:	2101      	movs	r1, #1
 80026e2:	fa01 f202 	lsl.w	r2, r1, r2
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d180      	bne.n	80025ee <HAL_RCC_OscConfig+0xf1a>
 80026ec:	e027      	b.n	800273e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e01e      	b.n	8002740 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_RCC_OscConfig+0x1078>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800270a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800270e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	429a      	cmp	r2, r3
 8002720:	d10b      	bne.n	800273a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002722:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800272a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002736:	429a      	cmp	r2, r3
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b09e      	sub	sp, #120	; 0x78
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e162      	b.n	8002a2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002768:	4b90      	ldr	r3, [pc, #576]	; (80029ac <HAL_RCC_ClockConfig+0x25c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d910      	bls.n	8002798 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b8d      	ldr	r3, [pc, #564]	; (80029ac <HAL_RCC_ClockConfig+0x25c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 0207 	bic.w	r2, r3, #7
 800277e:	498b      	ldr	r1, [pc, #556]	; (80029ac <HAL_RCC_ClockConfig+0x25c>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b89      	ldr	r3, [pc, #548]	; (80029ac <HAL_RCC_ClockConfig+0x25c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e14a      	b.n	8002a2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b82      	ldr	r3, [pc, #520]	; (80029b0 <HAL_RCC_ClockConfig+0x260>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	497f      	ldr	r1, [pc, #508]	; (80029b0 <HAL_RCC_ClockConfig+0x260>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80dc 	beq.w	800297c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d13c      	bne.n	8002846 <HAL_RCC_ClockConfig+0xf6>
 80027cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d102      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xa6>
 80027f0:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCC_ClockConfig+0x260>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	e00f      	b.n	8002816 <HAL_RCC_ClockConfig+0xc6>
 80027f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	667b      	str	r3, [r7, #100]	; 0x64
 8002804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002808:	663b      	str	r3, [r7, #96]	; 0x60
 800280a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002812:	4b67      	ldr	r3, [pc, #412]	; (80029b0 <HAL_RCC_ClockConfig+0x260>)
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800281a:	65ba      	str	r2, [r7, #88]	; 0x58
 800281c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800281e:	fa92 f2a2 	rbit	r2, r2
 8002822:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002824:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002826:	fab2 f282 	clz	r2, r2
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f042 0220 	orr.w	r2, r2, #32
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f002 021f 	and.w	r2, r2, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d17b      	bne.n	800293a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e0f3      	b.n	8002a2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d13c      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x178>
 800284e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002852:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800285c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <HAL_RCC_ClockConfig+0x128>
 8002872:	4b4f      	ldr	r3, [pc, #316]	; (80029b0 <HAL_RCC_ClockConfig+0x260>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	e00f      	b.n	8002898 <HAL_RCC_ClockConfig+0x148>
 8002878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	647b      	str	r3, [r7, #68]	; 0x44
 8002886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800288a:	643b      	str	r3, [r7, #64]	; 0x40
 800288c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002894:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <HAL_RCC_ClockConfig+0x260>)
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800289c:	63ba      	str	r2, [r7, #56]	; 0x38
 800289e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028a0:	fa92 f2a2 	rbit	r2, r2
 80028a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028a8:	fab2 f282 	clz	r2, r2
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f042 0220 	orr.w	r2, r2, #32
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	f002 021f 	and.w	r2, r2, #31
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f202 	lsl.w	r2, r1, r2
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d13a      	bne.n	800293a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0b2      	b.n	8002a2e <HAL_RCC_ClockConfig+0x2de>
 80028c8:	2302      	movs	r3, #2
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d102      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x1a0>
 80028ea:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <HAL_RCC_ClockConfig+0x260>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	e00d      	b.n	800290c <HAL_RCC_ClockConfig+0x1bc>
 80028f0:	2302      	movs	r3, #2
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
 80028fc:	2302      	movs	r3, #2
 80028fe:	623b      	str	r3, [r7, #32]
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <HAL_RCC_ClockConfig+0x260>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	2202      	movs	r2, #2
 800290e:	61ba      	str	r2, [r7, #24]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	fa92 f2a2 	rbit	r2, r2
 8002916:	617a      	str	r2, [r7, #20]
  return result;
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 021f 	and.w	r2, r2, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e079      	b.n	8002a2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_RCC_ClockConfig+0x260>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	491a      	ldr	r1, [pc, #104]	; (80029b0 <HAL_RCC_ClockConfig+0x260>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800294c:	f7fe f8f2 	bl	8000b34 <HAL_GetTick>
 8002950:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7fe f8ee 	bl	8000b34 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e061      	b.n	8002a2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_RCC_ClockConfig+0x260>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 020c 	and.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	429a      	cmp	r2, r3
 800297a:	d1eb      	bne.n	8002954 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCC_ClockConfig+0x25c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d214      	bcs.n	80029b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <HAL_RCC_ClockConfig+0x25c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 0207 	bic.w	r2, r3, #7
 8002992:	4906      	ldr	r1, [pc, #24]	; (80029ac <HAL_RCC_ClockConfig+0x25c>)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b04      	ldr	r3, [pc, #16]	; (80029ac <HAL_RCC_ClockConfig+0x25c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e040      	b.n	8002a2e <HAL_RCC_ClockConfig+0x2de>
 80029ac:	40022000 	.word	0x40022000
 80029b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c0:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <HAL_RCC_ClockConfig+0x2e8>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	491a      	ldr	r1, [pc, #104]	; (8002a38 <HAL_RCC_ClockConfig+0x2e8>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <HAL_RCC_ClockConfig+0x2e8>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4912      	ldr	r1, [pc, #72]	; (8002a38 <HAL_RCC_ClockConfig+0x2e8>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029f2:	f000 f829 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 80029f6:	4601      	mov	r1, r0
 80029f8:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <HAL_RCC_ClockConfig+0x2e8>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a00:	22f0      	movs	r2, #240	; 0xf0
 8002a02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	fa92 f2a2 	rbit	r2, r2
 8002a0a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	fab2 f282 	clz	r2, r2
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	40d3      	lsrs	r3, r2
 8002a16:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <HAL_RCC_ClockConfig+0x2ec>)
 8002a18:	5cd3      	ldrb	r3, [r2, r3]
 8002a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a1e:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <HAL_RCC_ClockConfig+0x2f0>)
 8002a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_RCC_ClockConfig+0x2f4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe f840 	bl	8000aac <HAL_InitTick>
  
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3778      	adds	r7, #120	; 0x78
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	08003ac0 	.word	0x08003ac0
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b08b      	sub	sp, #44	; 0x2c
 8002a4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a62:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d002      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x30>
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x36>
 8002a76:	e03c      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a78:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a7a:	623b      	str	r3, [r7, #32]
      break;
 8002a7c:	e03c      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a88:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	fa92 f2a2 	rbit	r2, r2
 8002a90:	607a      	str	r2, [r7, #4]
  return result;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	fab2 f282 	clz	r2, r2
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	40d3      	lsrs	r3, r2
 8002a9c:	4a1c      	ldr	r2, [pc, #112]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002aa2:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	220f      	movs	r2, #15
 8002aac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	fa92 f2a2 	rbit	r2, r2
 8002ab4:	60fa      	str	r2, [r7, #12]
  return result;
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	fab2 f282 	clz	r2, r2
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	40d3      	lsrs	r3, r2
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ad0:	4a0e      	ldr	r2, [pc, #56]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae0:	e004      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	623b      	str	r3, [r7, #32]
      break;
 8002af0:	e002      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002af4:	623b      	str	r3, [r7, #32]
      break;
 8002af6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af8:	6a3b      	ldr	r3, [r7, #32]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	372c      	adds	r7, #44	; 0x2c
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	007a1200 	.word	0x007a1200
 8002b10:	08003ad8 	.word	0x08003ad8
 8002b14:	08003ae8 	.word	0x08003ae8
 8002b18:	003d0900 	.word	0x003d0900

08002b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000000 	.word	0x20000000

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b3a:	f7ff ffef 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b3e:	4601      	mov	r1, r0
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	fa92 f2a2 	rbit	r2, r2
 8002b54:	603a      	str	r2, [r7, #0]
  return result;
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	fab2 f282 	clz	r2, r2
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b62:	5cd3      	ldrb	r3, [r2, r3]
 8002b64:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08003ad0 	.word	0x08003ad0

08002b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b7e:	f7ff ffcd 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b82:	4601      	mov	r1, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	fa92 f2a2 	rbit	r2, r2
 8002b98:	603a      	str	r2, [r7, #0]
  return result;
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	fab2 f282 	clz	r2, r2
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	40d3      	lsrs	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08003ad0 	.word	0x08003ad0

08002bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b092      	sub	sp, #72	; 0x48
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80d4 	beq.w	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be0:	4b4e      	ldr	r3, [pc, #312]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10e      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bec:	4b4b      	ldr	r3, [pc, #300]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	4a4a      	ldr	r2, [pc, #296]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	61d3      	str	r3, [r2, #28]
 8002bf8:	4b48      	ldr	r3, [pc, #288]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	4b45      	ldr	r3, [pc, #276]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d118      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c16:	4b42      	ldr	r3, [pc, #264]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a41      	ldr	r2, [pc, #260]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c22:	f7fd ff87 	bl	8000b34 <HAL_GetTick>
 8002c26:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	e008      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2a:	f7fd ff83 	bl	8000b34 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b64      	cmp	r3, #100	; 0x64
 8002c36:	d901      	bls.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e169      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c48:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c50:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8084 	beq.w	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d07c      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c68:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	461a      	mov	r2, r3
 8002c92:	2301      	movs	r3, #1
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cba:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cbe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d04b      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fd ff33 	bl	8000b34 <HAL_GetTick>
 8002cce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fd ff2f 	bl	8000b34 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e113      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	623b      	str	r3, [r7, #32]
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	61fb      	str	r3, [r7, #28]
  return result;
 8002d00:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d108      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d16:	4b01      	ldr	r3, [pc, #4]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	e00d      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40007000 	.word	0x40007000
 8002d24:	10908100 	.word	0x10908100
 8002d28:	2302      	movs	r3, #2
 8002d2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	4b78      	ldr	r3, [pc, #480]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	2202      	movs	r2, #2
 8002d3a:	613a      	str	r2, [r7, #16]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	fa92 f2a2 	rbit	r2, r2
 8002d42:	60fa      	str	r2, [r7, #12]
  return result;
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	fab2 f282 	clz	r2, r2
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f002 021f 	and.w	r2, r2, #31
 8002d56:	2101      	movs	r1, #1
 8002d58:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0b7      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d62:	4b6d      	ldr	r3, [pc, #436]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	496a      	ldr	r1, [pc, #424]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d105      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7c:	4b66      	ldr	r3, [pc, #408]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	4a65      	ldr	r2, [pc, #404]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d94:	4b60      	ldr	r3, [pc, #384]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f023 0203 	bic.w	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	495d      	ldr	r1, [pc, #372]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002db2:	4b59      	ldr	r3, [pc, #356]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4956      	ldr	r1, [pc, #344]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dd0:	4b51      	ldr	r3, [pc, #324]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	494e      	ldr	r1, [pc, #312]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dee:	4b4a      	ldr	r3, [pc, #296]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f023 0210 	bic.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4947      	ldr	r1, [pc, #284]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e0c:	4b42      	ldr	r3, [pc, #264]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	493f      	ldr	r1, [pc, #252]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e2a:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f023 0220 	bic.w	r2, r3, #32
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4938      	ldr	r1, [pc, #224]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e48:	4b33      	ldr	r3, [pc, #204]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	4930      	ldr	r1, [pc, #192]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	4929      	ldr	r1, [pc, #164]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e84:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	4921      	ldr	r1, [pc, #132]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	491a      	ldr	r1, [pc, #104]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ec0:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	4912      	ldr	r1, [pc, #72]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	490b      	ldr	r1, [pc, #44]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f08:	4903      	ldr	r1, [pc, #12]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3748      	adds	r7, #72	; 0x48
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000

08002f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e09d      	b.n	800306a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d108      	bne.n	8002f48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f3e:	d009      	beq.n	8002f54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]
 8002f46:	e005      	b.n	8002f54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd fbe0 	bl	8000734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f94:	d902      	bls.n	8002f9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	e002      	b.n	8002fa2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002faa:	d007      	beq.n	8002fbc <HAL_SPI_Init+0xa0>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fb4:	d002      	beq.n	8002fbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffe:	ea42 0103 	orr.w	r1, r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	0c1b      	lsrs	r3, r3, #16
 8003018:	f003 0204 	and.w	r2, r3, #4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003038:	ea42 0103 	orr.w	r1, r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003058:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e040      	b.n	8003106 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7fd fc1f 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2224      	movs	r2, #36	; 0x24
 800309e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f8c1 	bl	8003238 <UART_SetConfig>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e022      	b.n	8003106 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fa8b 	bl	80035e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fb12 	bl	8003728 <UART_CheckIdleState>
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b08a      	sub	sp, #40	; 0x28
 8003112:	af02      	add	r7, sp, #8
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003122:	2b20      	cmp	r3, #32
 8003124:	f040 8082 	bne.w	800322c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_UART_Transmit+0x26>
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e07a      	b.n	800322e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_UART_Transmit+0x38>
 8003142:	2302      	movs	r3, #2
 8003144:	e073      	b.n	800322e <HAL_UART_Transmit+0x120>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2221      	movs	r2, #33	; 0x21
 800315a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800315c:	f7fd fcea 	bl	8000b34 <HAL_GetTick>
 8003160:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317a:	d108      	bne.n	800318e <HAL_UART_Transmit+0x80>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003184:	2300      	movs	r3, #0
 8003186:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e003      	b.n	8003196 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800319e:	e02d      	b.n	80031fc <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2200      	movs	r2, #0
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fb05 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e039      	b.n	800322e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10b      	bne.n	80031d8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	881a      	ldrh	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031cc:	b292      	uxth	r2, r2
 80031ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	3302      	adds	r3, #2
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	e008      	b.n	80031ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	b292      	uxth	r2, r2
 80031e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	3301      	adds	r3, #1
 80031e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1cb      	bne.n	80031a0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2200      	movs	r2, #0
 8003210:	2140      	movs	r1, #64	; 0x40
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fad1 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e005      	b.n	800322e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003266:	f023 030c 	bic.w	r3, r3, #12
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	6979      	ldr	r1, [r7, #20]
 8003270:	430b      	orrs	r3, r1
 8003272:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4aa8      	ldr	r2, [pc, #672]	; (8003554 <UART_SetConfig+0x31c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d120      	bne.n	80032fa <UART_SetConfig+0xc2>
 80032b8:	4ba7      	ldr	r3, [pc, #668]	; (8003558 <UART_SetConfig+0x320>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d817      	bhi.n	80032f4 <UART_SetConfig+0xbc>
 80032c4:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <UART_SetConfig+0x94>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032dd 	.word	0x080032dd
 80032d0:	080032e9 	.word	0x080032e9
 80032d4:	080032ef 	.word	0x080032ef
 80032d8:	080032e3 	.word	0x080032e3
 80032dc:	2301      	movs	r3, #1
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e0b5      	b.n	800344e <UART_SetConfig+0x216>
 80032e2:	2302      	movs	r3, #2
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e0b2      	b.n	800344e <UART_SetConfig+0x216>
 80032e8:	2304      	movs	r3, #4
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e0af      	b.n	800344e <UART_SetConfig+0x216>
 80032ee:	2308      	movs	r3, #8
 80032f0:	77fb      	strb	r3, [r7, #31]
 80032f2:	e0ac      	b.n	800344e <UART_SetConfig+0x216>
 80032f4:	2310      	movs	r3, #16
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e0a9      	b.n	800344e <UART_SetConfig+0x216>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a97      	ldr	r2, [pc, #604]	; (800355c <UART_SetConfig+0x324>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d124      	bne.n	800334e <UART_SetConfig+0x116>
 8003304:	4b94      	ldr	r3, [pc, #592]	; (8003558 <UART_SetConfig+0x320>)
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800330c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003310:	d011      	beq.n	8003336 <UART_SetConfig+0xfe>
 8003312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003316:	d817      	bhi.n	8003348 <UART_SetConfig+0x110>
 8003318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800331c:	d011      	beq.n	8003342 <UART_SetConfig+0x10a>
 800331e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003322:	d811      	bhi.n	8003348 <UART_SetConfig+0x110>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <UART_SetConfig+0xf8>
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d006      	beq.n	800333c <UART_SetConfig+0x104>
 800332e:	e00b      	b.n	8003348 <UART_SetConfig+0x110>
 8003330:	2300      	movs	r3, #0
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e08b      	b.n	800344e <UART_SetConfig+0x216>
 8003336:	2302      	movs	r3, #2
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e088      	b.n	800344e <UART_SetConfig+0x216>
 800333c:	2304      	movs	r3, #4
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e085      	b.n	800344e <UART_SetConfig+0x216>
 8003342:	2308      	movs	r3, #8
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e082      	b.n	800344e <UART_SetConfig+0x216>
 8003348:	2310      	movs	r3, #16
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e07f      	b.n	800344e <UART_SetConfig+0x216>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a83      	ldr	r2, [pc, #524]	; (8003560 <UART_SetConfig+0x328>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d124      	bne.n	80033a2 <UART_SetConfig+0x16a>
 8003358:	4b7f      	ldr	r3, [pc, #508]	; (8003558 <UART_SetConfig+0x320>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003360:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003364:	d011      	beq.n	800338a <UART_SetConfig+0x152>
 8003366:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800336a:	d817      	bhi.n	800339c <UART_SetConfig+0x164>
 800336c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003370:	d011      	beq.n	8003396 <UART_SetConfig+0x15e>
 8003372:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003376:	d811      	bhi.n	800339c <UART_SetConfig+0x164>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <UART_SetConfig+0x14c>
 800337c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003380:	d006      	beq.n	8003390 <UART_SetConfig+0x158>
 8003382:	e00b      	b.n	800339c <UART_SetConfig+0x164>
 8003384:	2300      	movs	r3, #0
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e061      	b.n	800344e <UART_SetConfig+0x216>
 800338a:	2302      	movs	r3, #2
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	e05e      	b.n	800344e <UART_SetConfig+0x216>
 8003390:	2304      	movs	r3, #4
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e05b      	b.n	800344e <UART_SetConfig+0x216>
 8003396:	2308      	movs	r3, #8
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e058      	b.n	800344e <UART_SetConfig+0x216>
 800339c:	2310      	movs	r3, #16
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e055      	b.n	800344e <UART_SetConfig+0x216>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6f      	ldr	r2, [pc, #444]	; (8003564 <UART_SetConfig+0x32c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d124      	bne.n	80033f6 <UART_SetConfig+0x1be>
 80033ac:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <UART_SetConfig+0x320>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033b8:	d011      	beq.n	80033de <UART_SetConfig+0x1a6>
 80033ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033be:	d817      	bhi.n	80033f0 <UART_SetConfig+0x1b8>
 80033c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033c4:	d011      	beq.n	80033ea <UART_SetConfig+0x1b2>
 80033c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ca:	d811      	bhi.n	80033f0 <UART_SetConfig+0x1b8>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <UART_SetConfig+0x1a0>
 80033d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d4:	d006      	beq.n	80033e4 <UART_SetConfig+0x1ac>
 80033d6:	e00b      	b.n	80033f0 <UART_SetConfig+0x1b8>
 80033d8:	2300      	movs	r3, #0
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	e037      	b.n	800344e <UART_SetConfig+0x216>
 80033de:	2302      	movs	r3, #2
 80033e0:	77fb      	strb	r3, [r7, #31]
 80033e2:	e034      	b.n	800344e <UART_SetConfig+0x216>
 80033e4:	2304      	movs	r3, #4
 80033e6:	77fb      	strb	r3, [r7, #31]
 80033e8:	e031      	b.n	800344e <UART_SetConfig+0x216>
 80033ea:	2308      	movs	r3, #8
 80033ec:	77fb      	strb	r3, [r7, #31]
 80033ee:	e02e      	b.n	800344e <UART_SetConfig+0x216>
 80033f0:	2310      	movs	r3, #16
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e02b      	b.n	800344e <UART_SetConfig+0x216>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a5b      	ldr	r2, [pc, #364]	; (8003568 <UART_SetConfig+0x330>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d124      	bne.n	800344a <UART_SetConfig+0x212>
 8003400:	4b55      	ldr	r3, [pc, #340]	; (8003558 <UART_SetConfig+0x320>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003408:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800340c:	d011      	beq.n	8003432 <UART_SetConfig+0x1fa>
 800340e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003412:	d817      	bhi.n	8003444 <UART_SetConfig+0x20c>
 8003414:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003418:	d011      	beq.n	800343e <UART_SetConfig+0x206>
 800341a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800341e:	d811      	bhi.n	8003444 <UART_SetConfig+0x20c>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <UART_SetConfig+0x1f4>
 8003424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003428:	d006      	beq.n	8003438 <UART_SetConfig+0x200>
 800342a:	e00b      	b.n	8003444 <UART_SetConfig+0x20c>
 800342c:	2300      	movs	r3, #0
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e00d      	b.n	800344e <UART_SetConfig+0x216>
 8003432:	2302      	movs	r3, #2
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e00a      	b.n	800344e <UART_SetConfig+0x216>
 8003438:	2304      	movs	r3, #4
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e007      	b.n	800344e <UART_SetConfig+0x216>
 800343e:	2308      	movs	r3, #8
 8003440:	77fb      	strb	r3, [r7, #31]
 8003442:	e004      	b.n	800344e <UART_SetConfig+0x216>
 8003444:	2310      	movs	r3, #16
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e001      	b.n	800344e <UART_SetConfig+0x216>
 800344a:	2310      	movs	r3, #16
 800344c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003456:	d15c      	bne.n	8003512 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003458:	7ffb      	ldrb	r3, [r7, #31]
 800345a:	2b08      	cmp	r3, #8
 800345c:	d827      	bhi.n	80034ae <UART_SetConfig+0x276>
 800345e:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <UART_SetConfig+0x22c>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	08003489 	.word	0x08003489
 8003468:	08003491 	.word	0x08003491
 800346c:	08003499 	.word	0x08003499
 8003470:	080034af 	.word	0x080034af
 8003474:	0800349f 	.word	0x0800349f
 8003478:	080034af 	.word	0x080034af
 800347c:	080034af 	.word	0x080034af
 8003480:	080034af 	.word	0x080034af
 8003484:	080034a7 	.word	0x080034a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7ff fb54 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 800348c:	61b8      	str	r0, [r7, #24]
        break;
 800348e:	e013      	b.n	80034b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003490:	f7ff fb72 	bl	8002b78 <HAL_RCC_GetPCLK2Freq>
 8003494:	61b8      	str	r0, [r7, #24]
        break;
 8003496:	e00f      	b.n	80034b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003498:	4b34      	ldr	r3, [pc, #208]	; (800356c <UART_SetConfig+0x334>)
 800349a:	61bb      	str	r3, [r7, #24]
        break;
 800349c:	e00c      	b.n	80034b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349e:	f7ff fad3 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 80034a2:	61b8      	str	r0, [r7, #24]
        break;
 80034a4:	e008      	b.n	80034b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034aa:	61bb      	str	r3, [r7, #24]
        break;
 80034ac:	e004      	b.n	80034b8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	77bb      	strb	r3, [r7, #30]
        break;
 80034b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8084 	beq.w	80035c8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	005a      	lsls	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	085b      	lsrs	r3, r3, #1
 80034ca:	441a      	add	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b0f      	cmp	r3, #15
 80034dc:	d916      	bls.n	800350c <UART_SetConfig+0x2d4>
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e4:	d212      	bcs.n	800350c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	f023 030f 	bic.w	r3, r3, #15
 80034ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	89fb      	ldrh	r3, [r7, #14]
 80034fe:	4313      	orrs	r3, r2
 8003500:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	89fa      	ldrh	r2, [r7, #14]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	e05d      	b.n	80035c8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	77bb      	strb	r3, [r7, #30]
 8003510:	e05a      	b.n	80035c8 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003512:	7ffb      	ldrb	r3, [r7, #31]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d836      	bhi.n	8003586 <UART_SetConfig+0x34e>
 8003518:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <UART_SetConfig+0x2e8>)
 800351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351e:	bf00      	nop
 8003520:	08003545 	.word	0x08003545
 8003524:	0800354d 	.word	0x0800354d
 8003528:	08003571 	.word	0x08003571
 800352c:	08003587 	.word	0x08003587
 8003530:	08003577 	.word	0x08003577
 8003534:	08003587 	.word	0x08003587
 8003538:	08003587 	.word	0x08003587
 800353c:	08003587 	.word	0x08003587
 8003540:	0800357f 	.word	0x0800357f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003544:	f7ff faf6 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8003548:	61b8      	str	r0, [r7, #24]
        break;
 800354a:	e021      	b.n	8003590 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800354c:	f7ff fb14 	bl	8002b78 <HAL_RCC_GetPCLK2Freq>
 8003550:	61b8      	str	r0, [r7, #24]
        break;
 8003552:	e01d      	b.n	8003590 <UART_SetConfig+0x358>
 8003554:	40013800 	.word	0x40013800
 8003558:	40021000 	.word	0x40021000
 800355c:	40004400 	.word	0x40004400
 8003560:	40004800 	.word	0x40004800
 8003564:	40004c00 	.word	0x40004c00
 8003568:	40005000 	.word	0x40005000
 800356c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <UART_SetConfig+0x3a8>)
 8003572:	61bb      	str	r3, [r7, #24]
        break;
 8003574:	e00c      	b.n	8003590 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003576:	f7ff fa67 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 800357a:	61b8      	str	r0, [r7, #24]
        break;
 800357c:	e008      	b.n	8003590 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800357e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003582:	61bb      	str	r3, [r7, #24]
        break;
 8003584:	e004      	b.n	8003590 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	77bb      	strb	r3, [r7, #30]
        break;
 800358e:	bf00      	nop
    }

    if (pclk != 0U)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d018      	beq.n	80035c8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	085a      	lsrs	r2, r3, #1
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	441a      	add	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b0f      	cmp	r3, #15
 80035b0:	d908      	bls.n	80035c4 <UART_SetConfig+0x38c>
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b8:	d204      	bcs.n	80035c4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	e001      	b.n	80035c8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	007a1200 	.word	0x007a1200

080035e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01a      	beq.n	80036fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e2:	d10a      	bne.n	80036fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af02      	add	r7, sp, #8
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003738:	f7fd f9fc 	bl	8000b34 <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b08      	cmp	r3, #8
 800374a:	d10e      	bne.n	800376a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800374c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f82d 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e023      	b.n	80037b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b04      	cmp	r3, #4
 8003776:	d10e      	bne.n	8003796 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003778:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f817 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e00d      	b.n	80037b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b09c      	sub	sp, #112	; 0x70
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	4613      	mov	r3, r2
 80037c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ca:	e0a5      	b.n	8003918 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	f000 80a1 	beq.w	8003918 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	f7fd f9ad 	bl	8000b34 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d302      	bcc.n	80037ec <UART_WaitOnFlagUntilTimeout+0x32>
 80037e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d13e      	bne.n	800386a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003800:	667b      	str	r3, [r7, #100]	; 0x64
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800380a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800380c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003810:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e6      	bne.n	80037ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3308      	adds	r3, #8
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	663b      	str	r3, [r7, #96]	; 0x60
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3308      	adds	r3, #8
 800383c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800383e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003840:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003846:	e841 2300 	strex	r3, r2, [r1]
 800384a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800384c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1e5      	bne.n	800381e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e067      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d04f      	beq.n	8003918 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003886:	d147      	bne.n	8003918 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003890:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
 80038b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e6      	bne.n	8003892 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	613b      	str	r3, [r7, #16]
   return(result);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	66bb      	str	r3, [r7, #104]	; 0x68
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038e4:	623a      	str	r2, [r7, #32]
 80038e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	69f9      	ldr	r1, [r7, #28]
 80038ea:	6a3a      	ldr	r2, [r7, #32]
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e5      	bne.n	80038c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e010      	b.n	800393a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4013      	ands	r3, r2
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	429a      	cmp	r2, r3
 8003934:	f43f af4a 	beq.w	80037cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3770      	adds	r7, #112	; 0x70
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800394a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800394e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	b29b      	uxth	r3, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	b29b      	uxth	r3, r3
 8003960:	4013      	ands	r3, r2
 8003962:	b29a      	uxth	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003978:	b084      	sub	sp, #16
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	f107 0014 	add.w	r0, r7, #20
 8003986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	b004      	add	sp, #16
 80039b8:	4770      	bx	lr
	...

080039bc <__libc_init_array>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4d0d      	ldr	r5, [pc, #52]	; (80039f4 <__libc_init_array+0x38>)
 80039c0:	4c0d      	ldr	r4, [pc, #52]	; (80039f8 <__libc_init_array+0x3c>)
 80039c2:	1b64      	subs	r4, r4, r5
 80039c4:	10a4      	asrs	r4, r4, #2
 80039c6:	2600      	movs	r6, #0
 80039c8:	42a6      	cmp	r6, r4
 80039ca:	d109      	bne.n	80039e0 <__libc_init_array+0x24>
 80039cc:	4d0b      	ldr	r5, [pc, #44]	; (80039fc <__libc_init_array+0x40>)
 80039ce:	4c0c      	ldr	r4, [pc, #48]	; (8003a00 <__libc_init_array+0x44>)
 80039d0:	f000 f828 	bl	8003a24 <_init>
 80039d4:	1b64      	subs	r4, r4, r5
 80039d6:	10a4      	asrs	r4, r4, #2
 80039d8:	2600      	movs	r6, #0
 80039da:	42a6      	cmp	r6, r4
 80039dc:	d105      	bne.n	80039ea <__libc_init_array+0x2e>
 80039de:	bd70      	pop	{r4, r5, r6, pc}
 80039e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e4:	4798      	blx	r3
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7ee      	b.n	80039c8 <__libc_init_array+0xc>
 80039ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ee:	4798      	blx	r3
 80039f0:	3601      	adds	r6, #1
 80039f2:	e7f2      	b.n	80039da <__libc_init_array+0x1e>
 80039f4:	08003af8 	.word	0x08003af8
 80039f8:	08003af8 	.word	0x08003af8
 80039fc:	08003af8 	.word	0x08003af8
 8003a00:	08003afc 	.word	0x08003afc

08003a04 <memset>:
 8003a04:	4402      	add	r2, r0
 8003a06:	4603      	mov	r3, r0
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d100      	bne.n	8003a0e <memset+0xa>
 8003a0c:	4770      	bx	lr
 8003a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a12:	e7f9      	b.n	8003a08 <memset+0x4>

08003a14 <strcpy>:
 8003a14:	4603      	mov	r3, r0
 8003a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a1a:	f803 2b01 	strb.w	r2, [r3], #1
 8003a1e:	2a00      	cmp	r2, #0
 8003a20:	d1f9      	bne.n	8003a16 <strcpy+0x2>
 8003a22:	4770      	bx	lr

08003a24 <_init>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr

08003a30 <_fini>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	bf00      	nop
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr


Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029a8  080029a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029a8  080029a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029a8  080029a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029ac  080029ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e175  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000236b  00000000  00000000  0002e1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  00030520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a30  00000000  00000000  00031078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d32a  00000000  00000000  00031aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb82  00000000  00000000  0004edd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab032  00000000  00000000  0005e954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00109986  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d88  00000000  00000000  001099dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002960 	.word	0x08002960

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002960 	.word	0x08002960

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001de:	4b41      	ldr	r3, [pc, #260]	; (80002e4 <MX_GPIO_Init+0x11c>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a40      	ldr	r2, [pc, #256]	; (80002e4 <MX_GPIO_Init+0x11c>)
 80001e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b3e      	ldr	r3, [pc, #248]	; (80002e4 <MX_GPIO_Init+0x11c>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f6:	4b3b      	ldr	r3, [pc, #236]	; (80002e4 <MX_GPIO_Init+0x11c>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a3a      	ldr	r2, [pc, #232]	; (80002e4 <MX_GPIO_Init+0x11c>)
 80001fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b38      	ldr	r3, [pc, #224]	; (80002e4 <MX_GPIO_Init+0x11c>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800020e:	4b35      	ldr	r3, [pc, #212]	; (80002e4 <MX_GPIO_Init+0x11c>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a34      	ldr	r2, [pc, #208]	; (80002e4 <MX_GPIO_Init+0x11c>)
 8000214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b32      	ldr	r3, [pc, #200]	; (80002e4 <MX_GPIO_Init+0x11c>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4b2f      	ldr	r3, [pc, #188]	; (80002e4 <MX_GPIO_Init+0x11c>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a2e      	ldr	r2, [pc, #184]	; (80002e4 <MX_GPIO_Init+0x11c>)
 800022c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b2c      	ldr	r3, [pc, #176]	; (80002e4 <MX_GPIO_Init+0x11c>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	4b29      	ldr	r3, [pc, #164]	; (80002e4 <MX_GPIO_Init+0x11c>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a28      	ldr	r2, [pc, #160]	; (80002e4 <MX_GPIO_Init+0x11c>)
 8000244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b26      	ldr	r3, [pc, #152]	; (80002e4 <MX_GPIO_Init+0x11c>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000256:	2200      	movs	r2, #0
 8000258:	f64f 7108 	movw	r1, #65288	; 0xff08
 800025c:	4822      	ldr	r0, [pc, #136]	; (80002e8 <MX_GPIO_Init+0x120>)
 800025e:	f000 fdb1 	bl	8000dc4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_EXT_GPIO_Port, LED_EXT_Pin, GPIO_PIN_SET);
 8000262:	2201      	movs	r2, #1
 8000264:	2140      	movs	r1, #64	; 0x40
 8000266:	4821      	ldr	r0, [pc, #132]	; (80002ec <MX_GPIO_Init+0x124>)
 8000268:	f000 fdac 	bl	8000dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800026c:	2337      	movs	r3, #55	; 0x37
 800026e:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000270:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000276:	2300      	movs	r3, #0
 8000278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	4619      	mov	r1, r3
 8000280:	4819      	ldr	r0, [pc, #100]	; (80002e8 <MX_GPIO_Init+0x120>)
 8000282:	f000 fc25 	bl	8000ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000286:	f64f 7308 	movw	r3, #65288	; 0xff08
 800028a:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028c:	2301      	movs	r3, #1
 800028e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	4619      	mov	r1, r3
 800029e:	4812      	ldr	r0, [pc, #72]	; (80002e8 <MX_GPIO_Init+0x120>)
 80002a0:	f000 fc16 	bl	8000ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002a4:	2301      	movs	r3, #1
 80002a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ac:	2300      	movs	r3, #0
 80002ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	4619      	mov	r1, r3
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ba:	f000 fc09 	bl	8000ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_EXT_Pin;
 80002be:	2340      	movs	r3, #64	; 0x40
 80002c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	2301      	movs	r3, #1
 80002c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ca:	2300      	movs	r3, #0
 80002cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_EXT_GPIO_Port, &GPIO_InitStruct);
 80002ce:	f107 0314 	add.w	r3, r7, #20
 80002d2:	4619      	mov	r1, r3
 80002d4:	4805      	ldr	r0, [pc, #20]	; (80002ec <MX_GPIO_Init+0x124>)
 80002d6:	f000 fbfb 	bl	8000ad0 <HAL_GPIO_Init>

}
 80002da:	bf00      	nop
 80002dc:	3728      	adds	r7, #40	; 0x28
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000
 80002e8:	48001000 	.word	0x48001000
 80002ec:	48000800 	.word	0x48000800

080002f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <MX_I2C1_Init+0x74>)
 80002f6:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <MX_I2C1_Init+0x78>)
 80002f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <MX_I2C1_Init+0x74>)
 80002fc:	4a1b      	ldr	r2, [pc, #108]	; (800036c <MX_I2C1_Init+0x7c>)
 80002fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000306:	4b17      	ldr	r3, [pc, #92]	; (8000364 <MX_I2C1_Init+0x74>)
 8000308:	2201      	movs	r2, #1
 800030a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800030c:	4b15      	ldr	r3, [pc, #84]	; (8000364 <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_I2C1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_I2C1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_I2C1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800032a:	480e      	ldr	r0, [pc, #56]	; (8000364 <MX_I2C1_Init+0x74>)
 800032c:	f000 fd62 	bl	8000df4 <HAL_I2C_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000336:	f000 f8e5 	bl	8000504 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800033a:	2100      	movs	r1, #0
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <MX_I2C1_Init+0x74>)
 800033e:	f000 fde8 	bl	8000f12 <HAL_I2CEx_ConfigAnalogFilter>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000348:	f000 f8dc 	bl	8000504 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800034c:	2100      	movs	r1, #0
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_I2C1_Init+0x74>)
 8000350:	f000 fe2a 	bl	8000fa8 <HAL_I2CEx_ConfigDigitalFilter>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800035a:	f000 f8d3 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000028 	.word	0x20000028
 8000368:	40005400 	.word	0x40005400
 800036c:	2000090e 	.word	0x2000090e

08000370 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	; 0x28
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000378:	f107 0314 	add.w	r3, r7, #20
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]
 8000384:	60da      	str	r2, [r3, #12]
 8000386:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <HAL_I2C_MspInit+0x7c>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d127      	bne.n	80003e2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000392:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <HAL_I2C_MspInit+0x80>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a16      	ldr	r2, [pc, #88]	; (80003f0 <HAL_I2C_MspInit+0x80>)
 8000398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <HAL_I2C_MspInit+0x80>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003a6:	613b      	str	r3, [r7, #16]
 80003a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80003aa:	23c0      	movs	r3, #192	; 0xc0
 80003ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003ae:	2312      	movs	r3, #18
 80003b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003b6:	2303      	movs	r3, #3
 80003b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003ba:	2304      	movs	r3, #4
 80003bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	4619      	mov	r1, r3
 80003c4:	480b      	ldr	r0, [pc, #44]	; (80003f4 <HAL_I2C_MspInit+0x84>)
 80003c6:	f000 fb83 	bl	8000ad0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <HAL_I2C_MspInit+0x80>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <HAL_I2C_MspInit+0x80>)
 80003d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003d4:	61d3      	str	r3, [r2, #28]
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_I2C_MspInit+0x80>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003e2:	bf00      	nop
 80003e4:	3728      	adds	r7, #40	; 0x28
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40005400 	.word	0x40005400
 80003f0:	40021000 	.word	0x40021000
 80003f4:	48000400 	.word	0x48000400

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fc:	f000 f9f8 	bl	80007f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000400:	f000 f81e 	bl	8000440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000404:	f7ff fee0 	bl	80001c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000408:	f7ff ff72 	bl	80002f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800040c:	f000 f880 	bl	8000510 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000410:	f000 f95e 	bl	80006d0 <MX_USB_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(LED_EXT_GPIO_Port, LED_EXT_Pin, GPIO_PIN_SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2140      	movs	r1, #64	; 0x40
 8000418:	4808      	ldr	r0, [pc, #32]	; (800043c <main+0x44>)
 800041a:	f000 fcd3 	bl	8000dc4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800041e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000422:	f000 fa4b 	bl	80008bc <HAL_Delay>
	  HAL_GPIO_WritePin(LED_EXT_GPIO_Port, LED_EXT_Pin, GPIO_PIN_RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2140      	movs	r1, #64	; 0x40
 800042a:	4804      	ldr	r0, [pc, #16]	; (800043c <main+0x44>)
 800042c:	f000 fcca 	bl	8000dc4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000434:	f000 fa42 	bl	80008bc <HAL_Delay>
	  HAL_GPIO_WritePin(LED_EXT_GPIO_Port, LED_EXT_Pin, GPIO_PIN_SET);
 8000438:	e7ec      	b.n	8000414 <main+0x1c>
 800043a:	bf00      	nop
 800043c:	48000800 	.word	0x48000800

08000440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b09e      	sub	sp, #120	; 0x78
 8000444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000446:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800044a:	2228      	movs	r2, #40	; 0x28
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f002 fa7e 	bl	8002950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000454:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000464:	463b      	mov	r3, r7
 8000466:	223c      	movs	r2, #60	; 0x3c
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f002 fa70 	bl	8002950 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000470:	2303      	movs	r3, #3
 8000472:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000474:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000478:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047e:	2301      	movs	r3, #1
 8000480:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000482:	2310      	movs	r3, #16
 8000484:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000486:	2302      	movs	r3, #2
 8000488:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000490:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000494:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800049a:	4618      	mov	r0, r3
 800049c:	f000 feae 	bl	80011fc <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004a6:	f000 f82d 	bl	8000504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	230f      	movs	r3, #15
 80004ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ae:	2302      	movs	r3, #2
 80004b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004c4:	2101      	movs	r1, #1
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fda0 	bl	800200c <HAL_RCC_ClockConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004d2:	f000 f817 	bl	8000504 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <SystemClock_Config+0xc0>)
 80004d8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004da:	2300      	movs	r3, #0
 80004dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80004de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e4:	463b      	mov	r3, r7
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 ff76 	bl	80023d8 <HAL_RCCEx_PeriphCLKConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004f2:	f000 f807 	bl	8000504 <Error_Handler>
  }
}
 80004f6:	bf00      	nop
 80004f8:	3778      	adds	r7, #120	; 0x78
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	00020020 	.word	0x00020020

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_SPI1_Init+0x74>)
 8000516:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <MX_SPI1_Init+0x78>)
 8000518:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800051a:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <MX_SPI1_Init+0x74>)
 800051c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000520:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_SPI1_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <MX_SPI1_Init+0x74>)
 800052a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800052e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_SPI1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_SPI1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_SPI1_Init+0x74>)
 800053e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000542:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_SPI1_Init+0x74>)
 8000546:	2208      	movs	r2, #8
 8000548:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_SPI1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_SPI1_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_SPI1_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_SPI1_Init+0x74>)
 800055e:	2207      	movs	r2, #7
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_SPI1_Init+0x74>)
 8000564:	2200      	movs	r2, #0
 8000566:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_SPI1_Init+0x74>)
 800056a:	2208      	movs	r2, #8
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_SPI1_Init+0x74>)
 8000570:	f002 f8e2 	bl	8002738 <HAL_SPI_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800057a:	f7ff ffc3 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000074 	.word	0x20000074
 8000588:	40013000 	.word	0x40013000

0800058c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a17      	ldr	r2, [pc, #92]	; (8000608 <HAL_SPI_MspInit+0x7c>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d128      	bne.n	8000600 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_SPI_MspInit+0x80>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a16      	ldr	r2, [pc, #88]	; (800060c <HAL_SPI_MspInit+0x80>)
 80005b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <HAL_SPI_MspInit+0x80>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_SPI_MspInit+0x80>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a10      	ldr	r2, [pc, #64]	; (800060c <HAL_SPI_MspInit+0x80>)
 80005cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <HAL_SPI_MspInit+0x80>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80005de:	23e0      	movs	r3, #224	; 0xe0
 80005e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005ee:	2305      	movs	r3, #5
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f000 fa68 	bl	8000ad0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000600:	bf00      	nop
 8000602:	3728      	adds	r7, #40	; 0x28
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40013000 	.word	0x40013000
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_MspInit+0x44>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_MspInit+0x44>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_MspInit+0x44>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_MspInit+0x44>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a08      	ldr	r2, [pc, #32]	; (8000654 <HAL_MspInit+0x44>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_MspInit+0x44>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 fa0e 	bl	8000a68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800065c:	e7fe      	b.n	800065c <NMI_Handler+0x4>

0800065e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <HardFault_Handler+0x4>

08000664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <MemManage_Handler+0x4>

0800066a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <UsageFault_Handler+0x4>

08000676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a4:	f000 f8ea 	bl	800087c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <SystemInit+0x20>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <SystemInit+0x20>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <MX_USB_PCD_Init+0x40>)
 80006d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006dc:	2208      	movs	r2, #8
 80006de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006fa:	f000 fca1 	bl	8001040 <HAL_PCD_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000704:	f7ff fefe 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000d8 	.word	0x200000d8
 8000710:	40005c00 	.word	0x40005c00

08000714 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a18      	ldr	r2, [pc, #96]	; (8000794 <HAL_PCD_MspInit+0x80>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d129      	bne.n	800078a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_PCD_MspInit+0x84>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <HAL_PCD_MspInit+0x84>)
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_PCD_MspInit+0x84>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800074e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000760:	230e      	movs	r3, #14
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f000 f9af 	bl	8000ad0 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_PCD_MspInit+0x84>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_PCD_MspInit+0x84>)
 8000778:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_PCD_MspInit+0x84>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	; 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40005c00 	.word	0x40005c00
 8000798:	40021000 	.word	0x40021000

0800079c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800079c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a2:	490e      	ldr	r1, [pc, #56]	; (80007dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <LoopForever+0xe>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b8:	4c0b      	ldr	r4, [pc, #44]	; (80007e8 <LoopForever+0x16>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007c6:	f7ff ff71 	bl	80006ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ca:	f002 f89d 	bl	8002908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ce:	f7ff fe13 	bl	80003f8 <main>

080007d2 <LoopForever>:

LoopForever:
    b LoopForever
 80007d2:	e7fe      	b.n	80007d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e0:	080029b0 	.word	0x080029b0
  ldr r2, =_sbss
 80007e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e8:	200003c8 	.word	0x200003c8

080007ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC1_2_IRQHandler>
	...

080007f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <HAL_Init+0x28>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <HAL_Init+0x28>)
 80007fa:	f043 0310 	orr.w	r3, r3, #16
 80007fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000800:	2003      	movs	r0, #3
 8000802:	f000 f931 	bl	8000a68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000806:	2000      	movs	r0, #0
 8000808:	f000 f808 	bl	800081c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800080c:	f7ff ff00 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40022000 	.word	0x40022000

0800081c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_InitTick+0x54>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_InitTick+0x58>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000832:	fbb3 f3f1 	udiv	r3, r3, r1
 8000836:	fbb2 f3f3 	udiv	r3, r2, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f93b 	bl	8000ab6 <HAL_SYSTICK_Config>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e00e      	b.n	8000868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b0f      	cmp	r3, #15
 800084e:	d80a      	bhi.n	8000866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000850:	2200      	movs	r2, #0
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f000 f911 	bl	8000a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <HAL_InitTick+0x5c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	e000      	b.n	8000868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000000 	.word	0x20000000
 8000874:	20000008 	.word	0x20000008
 8000878:	20000004 	.word	0x20000004

0800087c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_IncTick+0x20>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_IncTick+0x24>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4413      	add	r3, r2
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_IncTick+0x24>)
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	20000008 	.word	0x20000008
 80008a0:	200003c4 	.word	0x200003c4

080008a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <HAL_GetTick+0x14>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	200003c4 	.word	0x200003c4

080008bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c4:	f7ff ffee 	bl	80008a4 <HAL_GetTick>
 80008c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d4:	d005      	beq.n	80008e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_Delay+0x44>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008e2:	bf00      	nop
 80008e4:	f7ff ffde 	bl	80008a4 <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8f7      	bhi.n	80008e4 <HAL_Delay+0x28>
  {
  }
}
 80008f4:	bf00      	nop
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000008 	.word	0x20000008

08000904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800092c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	60d3      	str	r3, [r2, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <__NVIC_GetPriorityGrouping+0x18>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	f003 0307 	and.w	r3, r3, #7
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db0a      	blt.n	8000992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	490c      	ldr	r1, [pc, #48]	; (80009b4 <__NVIC_SetPriority+0x4c>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	440b      	add	r3, r1
 800098c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000990:	e00a      	b.n	80009a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <__NVIC_SetPriority+0x50>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	3b04      	subs	r3, #4
 80009a0:	0112      	lsls	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	761a      	strb	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000e100 	.word	0xe000e100
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	bf28      	it	cs
 80009da:	2304      	movcs	r3, #4
 80009dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d902      	bls.n	80009ec <NVIC_EncodePriority+0x30>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	e000      	b.n	80009ee <NVIC_EncodePriority+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43da      	mvns	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	4313      	orrs	r3, r2
         );
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3724      	adds	r7, #36	; 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a34:	d301      	bcc.n	8000a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00f      	b.n	8000a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <SysTick_Config+0x40>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a42:	210f      	movs	r1, #15
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f7ff ff8e 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <SysTick_Config+0x40>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SysTick_Config+0x40>)
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	e000e010 	.word	0xe000e010

08000a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff47 	bl	8000904 <__NVIC_SetPriorityGrouping>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a90:	f7ff ff5c 	bl	800094c <__NVIC_GetPriorityGrouping>
 8000a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	6978      	ldr	r0, [r7, #20]
 8000a9c:	f7ff ff8e 	bl	80009bc <NVIC_EncodePriority>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5d 	bl	8000968 <__NVIC_SetPriority>
}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff ffb0 	bl	8000a24 <SysTick_Config>
 8000ac4:	4603      	mov	r3, r0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ade:	e154      	b.n	8000d8a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 8146 	beq.w	8000d84 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d005      	beq.n	8000b10 <HAL_GPIO_Init+0x40>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d130      	bne.n	8000b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b46:	2201      	movs	r2, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	091b      	lsrs	r3, r3, #4
 8000b5c:	f003 0201 	and.w	r2, r3, #1
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d017      	beq.n	8000bae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d123      	bne.n	8000c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	08da      	lsrs	r2, r3, #3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3208      	adds	r2, #8
 8000bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	691a      	ldr	r2, [r3, #16]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f003 0307 	and.w	r3, r3, #7
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	08da      	lsrs	r2, r3, #3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3208      	adds	r2, #8
 8000bfc:	6939      	ldr	r1, [r7, #16]
 8000bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0203 	and.w	r2, r3, #3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 80a0 	beq.w	8000d84 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c44:	4b58      	ldr	r3, [pc, #352]	; (8000da8 <HAL_GPIO_Init+0x2d8>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a57      	ldr	r2, [pc, #348]	; (8000da8 <HAL_GPIO_Init+0x2d8>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b55      	ldr	r3, [pc, #340]	; (8000da8 <HAL_GPIO_Init+0x2d8>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c5c:	4a53      	ldr	r2, [pc, #332]	; (8000dac <HAL_GPIO_Init+0x2dc>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3302      	adds	r3, #2
 8000c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	220f      	movs	r2, #15
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c86:	d019      	beq.n	8000cbc <HAL_GPIO_Init+0x1ec>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a49      	ldr	r2, [pc, #292]	; (8000db0 <HAL_GPIO_Init+0x2e0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d013      	beq.n	8000cb8 <HAL_GPIO_Init+0x1e8>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a48      	ldr	r2, [pc, #288]	; (8000db4 <HAL_GPIO_Init+0x2e4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d00d      	beq.n	8000cb4 <HAL_GPIO_Init+0x1e4>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a47      	ldr	r2, [pc, #284]	; (8000db8 <HAL_GPIO_Init+0x2e8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d007      	beq.n	8000cb0 <HAL_GPIO_Init+0x1e0>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a46      	ldr	r2, [pc, #280]	; (8000dbc <HAL_GPIO_Init+0x2ec>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d101      	bne.n	8000cac <HAL_GPIO_Init+0x1dc>
 8000ca8:	2304      	movs	r3, #4
 8000caa:	e008      	b.n	8000cbe <HAL_GPIO_Init+0x1ee>
 8000cac:	2305      	movs	r3, #5
 8000cae:	e006      	b.n	8000cbe <HAL_GPIO_Init+0x1ee>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e004      	b.n	8000cbe <HAL_GPIO_Init+0x1ee>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_Init+0x1ee>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <HAL_GPIO_Init+0x1ee>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	f002 0203 	and.w	r2, r2, #3
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	4093      	lsls	r3, r2
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cce:	4937      	ldr	r1, [pc, #220]	; (8000dac <HAL_GPIO_Init+0x2dc>)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cdc:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d00:	4a2f      	ldr	r2, [pc, #188]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d2a:	4a25      	ldr	r2, [pc, #148]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d54:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	3301      	adds	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa22 f303 	lsr.w	r3, r2, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f47f aea3 	bne.w	8000ae0 <HAL_GPIO_Init+0x10>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010000 	.word	0x40010000
 8000db0:	48000400 	.word	0x48000400
 8000db4:	48000800 	.word	0x48000800
 8000db8:	48000c00 	.word	0x48000c00
 8000dbc:	48001000 	.word	0x48001000
 8000dc0:	40010400 	.word	0x40010400

08000dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd4:	787b      	ldrb	r3, [r7, #1]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dda:	887a      	ldrh	r2, [r7, #2]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de0:	e002      	b.n	8000de8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000de2:	887a      	ldrh	r2, [r7, #2]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e081      	b.n	8000f0a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d106      	bne.n	8000e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff faa8 	bl	8000370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2224      	movs	r2, #36	; 0x24
 8000e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0201 	bic.w	r2, r2, #1
 8000e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d107      	bne.n	8000e6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	e006      	b.n	8000e7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d104      	bne.n	8000e8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ea0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69d9      	ldr	r1, [r3, #28]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a1a      	ldr	r2, [r3, #32]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0201 	orr.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b20      	cmp	r3, #32
 8000f26:	d138      	bne.n	8000f9a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d101      	bne.n	8000f36 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f32:	2302      	movs	r3, #2
 8000f34:	e032      	b.n	8000f9c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2224      	movs	r2, #36	; 0x24
 8000f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0201 	bic.w	r2, r2, #1
 8000f54:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f64:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f042 0201 	orr.w	r2, r2, #1
 8000f84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2220      	movs	r2, #32
 8000f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f9a:	2302      	movs	r3, #2
  }
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b20      	cmp	r3, #32
 8000fbc:	d139      	bne.n	8001032 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e033      	b.n	8001034 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2224      	movs	r2, #36	; 0x24
 8000fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ffa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0201 	orr.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2220      	movs	r2, #32
 8001022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001032:	2302      	movs	r3, #2
  }
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	b08b      	sub	sp, #44	; 0x2c
 8001044:	af06      	add	r7, sp, #24
 8001046:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e0d0      	b.n	80011f4 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fb54 	bl	8000714 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2203      	movs	r2, #3
 8001070:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fc08 	bl	800288e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e04c      	b.n	800111e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	440b      	add	r3, r1
 8001094:	3301      	adds	r3, #1
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	440b      	add	r3, r1
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	b298      	uxth	r0, r3
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	440b      	add	r3, r1
 80010c0:	3336      	adds	r3, #54	; 0x36
 80010c2:	4602      	mov	r2, r0
 80010c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	3303      	adds	r3, #3
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	3338      	adds	r3, #56	; 0x38
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	333c      	adds	r3, #60	; 0x3c
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	440b      	add	r3, r1
 8001112:	3340      	adds	r3, #64	; 0x40
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	d3ad      	bcc.n	8001084 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e044      	b.n	80011b8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	440b      	add	r3, r1
 8001152:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	440b      	add	r3, r1
 8001168:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	440b      	add	r3, r1
 8001194:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	440b      	add	r3, r1
 80011aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	3301      	adds	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d3b5      	bcc.n	800112e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	687e      	ldr	r6, [r7, #4]
 80011ca:	466d      	mov	r5, sp
 80011cc:	f106 0410 	add.w	r4, r6, #16
 80011d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	602b      	str	r3, [r5, #0]
 80011d8:	1d33      	adds	r3, r6, #4
 80011da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011dc:	6838      	ldr	r0, [r7, #0]
 80011de:	f001 fb71 	bl	80028c4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001202:	af00      	add	r7, sp, #0
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	f000 bef4 	b.w	8001ffe <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 816a 	beq.w	80014fa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001226:	4bb3      	ldr	r3, [pc, #716]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b04      	cmp	r3, #4
 8001230:	d00c      	beq.n	800124c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001232:	4bb0      	ldr	r3, [pc, #704]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b08      	cmp	r3, #8
 800123c:	d159      	bne.n	80012f2 <HAL_RCC_OscConfig+0xf6>
 800123e:	4bad      	ldr	r3, [pc, #692]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124a:	d152      	bne.n	80012f2 <HAL_RCC_OscConfig+0xf6>
 800124c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001250:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001258:	fa93 f3a3 	rbit	r3, r3
 800125c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001260:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	fab3 f383 	clz	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d102      	bne.n	800127e <HAL_RCC_OscConfig+0x82>
 8001278:	4b9e      	ldr	r3, [pc, #632]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	e015      	b.n	80012aa <HAL_RCC_OscConfig+0xae>
 800127e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001282:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800128a:	fa93 f3a3 	rbit	r3, r3
 800128e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001292:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001296:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800129a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80012a6:	4b93      	ldr	r3, [pc, #588]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012ae:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80012b2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80012b6:	fa92 f2a2 	rbit	r2, r2
 80012ba:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80012be:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80012c2:	fab2 f282 	clz	r2, r2
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	f042 0220 	orr.w	r2, r2, #32
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	f002 021f 	and.w	r2, r2, #31
 80012d2:	2101      	movs	r1, #1
 80012d4:	fa01 f202 	lsl.w	r2, r1, r2
 80012d8:	4013      	ands	r3, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 810c 	beq.w	80014f8 <HAL_RCC_OscConfig+0x2fc>
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 8106 	bne.w	80014f8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	f000 be86 	b.w	8001ffe <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fc:	d106      	bne.n	800130c <HAL_RCC_OscConfig+0x110>
 80012fe:	4b7d      	ldr	r3, [pc, #500]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7c      	ldr	r2, [pc, #496]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e030      	b.n	800136e <HAL_RCC_OscConfig+0x172>
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x134>
 8001316:	4b77      	ldr	r3, [pc, #476]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a76      	ldr	r2, [pc, #472]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 800131c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b74      	ldr	r3, [pc, #464]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a73      	ldr	r2, [pc, #460]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01e      	b.n	800136e <HAL_RCC_OscConfig+0x172>
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800133a:	d10c      	bne.n	8001356 <HAL_RCC_OscConfig+0x15a>
 800133c:	4b6d      	ldr	r3, [pc, #436]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a6c      	ldr	r2, [pc, #432]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001342:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b6a      	ldr	r3, [pc, #424]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a69      	ldr	r2, [pc, #420]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 800134e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	e00b      	b.n	800136e <HAL_RCC_OscConfig+0x172>
 8001356:	4b67      	ldr	r3, [pc, #412]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a66      	ldr	r2, [pc, #408]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 800135c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b64      	ldr	r3, [pc, #400]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a63      	ldr	r2, [pc, #396]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800136e:	4b61      	ldr	r3, [pc, #388]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	f023 020f 	bic.w	r2, r3, #15
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	495d      	ldr	r1, [pc, #372]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 800137e:	4313      	orrs	r3, r2
 8001380:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d059      	beq.n	8001440 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fa8a 	bl	80008a4 <HAL_GetTick>
 8001390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001394:	e00a      	b.n	80013ac <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001396:	f7ff fa85 	bl	80008a4 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d902      	bls.n	80013ac <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	f000 be29 	b.w	8001ffe <HAL_RCC_OscConfig+0xe02>
 80013ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80013c0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d102      	bne.n	80013de <HAL_RCC_OscConfig+0x1e2>
 80013d8:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	e015      	b.n	800140a <HAL_RCC_OscConfig+0x20e>
 80013de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013fa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001406:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800140e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001412:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001416:	fa92 f2a2 	rbit	r2, r2
 800141a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800141e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001422:	fab2 f282 	clz	r2, r2
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	f042 0220 	orr.w	r2, r2, #32
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	f002 021f 	and.w	r2, r2, #31
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0ab      	beq.n	8001396 <HAL_RCC_OscConfig+0x19a>
 800143e:	e05c      	b.n	80014fa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fa30 	bl	80008a4 <HAL_GetTick>
 8001444:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144a:	f7ff fa2b 	bl	80008a4 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d902      	bls.n	8001460 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	f000 bdcf 	b.w	8001ffe <HAL_RCC_OscConfig+0xe02>
 8001460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001464:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001474:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	b2db      	uxtb	r3, r3
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d102      	bne.n	8001492 <HAL_RCC_OscConfig+0x296>
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	e015      	b.n	80014be <HAL_RCC_OscConfig+0x2c2>
 8001492:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001496:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014aa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80014ae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_RCC_OscConfig+0x2f8>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014c2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80014c6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014ca:	fa92 f2a2 	rbit	r2, r2
 80014ce:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80014d2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80014d6:	fab2 f282 	clz	r2, r2
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	f042 0220 	orr.w	r2, r2, #32
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	f002 021f 	and.w	r2, r2, #31
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ab      	bne.n	800144a <HAL_RCC_OscConfig+0x24e>
 80014f2:	e002      	b.n	80014fa <HAL_RCC_OscConfig+0x2fe>
 80014f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 816f 	beq.w	80017e8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800150a:	4bd0      	ldr	r3, [pc, #832]	; (800184c <HAL_RCC_OscConfig+0x650>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001516:	4bcd      	ldr	r3, [pc, #820]	; (800184c <HAL_RCC_OscConfig+0x650>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b08      	cmp	r3, #8
 8001520:	d16c      	bne.n	80015fc <HAL_RCC_OscConfig+0x400>
 8001522:	4bca      	ldr	r3, [pc, #808]	; (800184c <HAL_RCC_OscConfig+0x650>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d166      	bne.n	80015fc <HAL_RCC_OscConfig+0x400>
 800152e:	2302      	movs	r3, #2
 8001530:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001534:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001538:	fa93 f3a3 	rbit	r3, r3
 800153c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001540:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d102      	bne.n	800155e <HAL_RCC_OscConfig+0x362>
 8001558:	4bbc      	ldr	r3, [pc, #752]	; (800184c <HAL_RCC_OscConfig+0x650>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	e013      	b.n	8001586 <HAL_RCC_OscConfig+0x38a>
 800155e:	2302      	movs	r3, #2
 8001560:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001570:	2302      	movs	r3, #2
 8001572:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001576:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800157a:	fa93 f3a3 	rbit	r3, r3
 800157e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001582:	4bb2      	ldr	r3, [pc, #712]	; (800184c <HAL_RCC_OscConfig+0x650>)
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	2202      	movs	r2, #2
 8001588:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800158c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001590:	fa92 f2a2 	rbit	r2, r2
 8001594:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001598:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800159c:	fab2 f282 	clz	r2, r2
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	f042 0220 	orr.w	r2, r2, #32
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	f002 021f 	and.w	r2, r2, #31
 80015ac:	2101      	movs	r1, #1
 80015ae:	fa01 f202 	lsl.w	r2, r1, r2
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d007      	beq.n	80015c8 <HAL_RCC_OscConfig+0x3cc>
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d002      	beq.n	80015c8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	f000 bd1b 	b.w	8001ffe <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4ba0      	ldr	r3, [pc, #640]	; (800184c <HAL_RCC_OscConfig+0x650>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	21f8      	movs	r1, #248	; 0xf8
 80015d8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80015e0:	fa91 f1a1 	rbit	r1, r1
 80015e4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80015e8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80015ec:	fab1 f181 	clz	r1, r1
 80015f0:	b2c9      	uxtb	r1, r1
 80015f2:	408b      	lsls	r3, r1
 80015f4:	4995      	ldr	r1, [pc, #596]	; (800184c <HAL_RCC_OscConfig+0x650>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	e0f5      	b.n	80017e8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8085 	beq.w	8001712 <HAL_RCC_OscConfig+0x516>
 8001608:	2301      	movs	r3, #1
 800160a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800161a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001628:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	461a      	mov	r2, r3
 8001630:	2301      	movs	r3, #1
 8001632:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff f936 	bl	80008a4 <HAL_GetTick>
 8001638:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	e00a      	b.n	8001654 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff f931 	bl	80008a4 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d902      	bls.n	8001654 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	f000 bcd5 	b.w	8001ffe <HAL_RCC_OscConfig+0xe02>
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001666:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	095b      	lsrs	r3, r3, #5
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b01      	cmp	r3, #1
 800167c:	d102      	bne.n	8001684 <HAL_RCC_OscConfig+0x488>
 800167e:	4b73      	ldr	r3, [pc, #460]	; (800184c <HAL_RCC_OscConfig+0x650>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	e013      	b.n	80016ac <HAL_RCC_OscConfig+0x4b0>
 8001684:	2302      	movs	r3, #2
 8001686:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001696:	2302      	movs	r3, #2
 8001698:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800169c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80016a8:	4b68      	ldr	r3, [pc, #416]	; (800184c <HAL_RCC_OscConfig+0x650>)
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	2202      	movs	r2, #2
 80016ae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80016b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80016b6:	fa92 f2a2 	rbit	r2, r2
 80016ba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80016be:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80016c2:	fab2 f282 	clz	r2, r2
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	f042 0220 	orr.w	r2, r2, #32
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	f002 021f 	and.w	r2, r2, #31
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f202 	lsl.w	r2, r1, r2
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0af      	beq.n	800163e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <HAL_RCC_OscConfig+0x650>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	21f8      	movs	r1, #248	; 0xf8
 80016ee:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016f6:	fa91 f1a1 	rbit	r1, r1
 80016fa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80016fe:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001702:	fab1 f181 	clz	r1, r1
 8001706:	b2c9      	uxtb	r1, r1
 8001708:	408b      	lsls	r3, r1
 800170a:	4950      	ldr	r1, [pc, #320]	; (800184c <HAL_RCC_OscConfig+0x650>)
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
 8001710:	e06a      	b.n	80017e8 <HAL_RCC_OscConfig+0x5ec>
 8001712:	2301      	movs	r3, #1
 8001714:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001724:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001728:	fab3 f383 	clz	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001732:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	461a      	mov	r2, r3
 800173a:	2300      	movs	r3, #0
 800173c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff f8b1 	bl	80008a4 <HAL_GetTick>
 8001742:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	e00a      	b.n	800175e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff f8ac 	bl	80008a4 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d902      	bls.n	800175e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	f000 bc50 	b.w	8001ffe <HAL_RCC_OscConfig+0xe02>
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d102      	bne.n	800178e <HAL_RCC_OscConfig+0x592>
 8001788:	4b30      	ldr	r3, [pc, #192]	; (800184c <HAL_RCC_OscConfig+0x650>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	e013      	b.n	80017b6 <HAL_RCC_OscConfig+0x5ba>
 800178e:	2302      	movs	r3, #2
 8001790:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001794:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80017a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_RCC_OscConfig+0x650>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	2202      	movs	r2, #2
 80017b8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80017bc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017c0:	fa92 f2a2 	rbit	r2, r2
 80017c4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80017c8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017cc:	fab2 f282 	clz	r2, r2
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	f042 0220 	orr.w	r2, r2, #32
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	f002 021f 	and.w	r2, r2, #31
 80017dc:	2101      	movs	r1, #1
 80017de:	fa01 f202 	lsl.w	r2, r1, r2
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1af      	bne.n	8001748 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80da 	beq.w	80019ac <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d069      	beq.n	80018d6 <HAL_RCC_OscConfig+0x6da>
 8001802:	2301      	movs	r3, #1
 8001804:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_OscConfig+0x654>)
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	461a      	mov	r2, r3
 8001828:	2301      	movs	r3, #1
 800182a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182c:	f7ff f83a 	bl	80008a4 <HAL_GetTick>
 8001830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001834:	e00e      	b.n	8001854 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001836:	f7ff f835 	bl	80008a4 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d906      	bls.n	8001854 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e3d9      	b.n	8001ffe <HAL_RCC_OscConfig+0xe02>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	10908120 	.word	0x10908120
 8001854:	2302      	movs	r3, #2
 8001856:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001866:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800186a:	2202      	movs	r2, #2
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	fa93 f2a3 	rbit	r2, r3
 8001878:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001882:	2202      	movs	r2, #2
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001894:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	4ba5      	ldr	r3, [pc, #660]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800189e:	2102      	movs	r1, #2
 80018a0:	6019      	str	r1, [r3, #0]
 80018a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fa93 f1a3 	rbit	r1, r3
 80018ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018b0:	6019      	str	r1, [r3, #0]
  return result;
 80018b2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fab3 f383 	clz	r3, r3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0b0      	beq.n	8001836 <HAL_RCC_OscConfig+0x63a>
 80018d4:	e06a      	b.n	80019ac <HAL_RCC_OscConfig+0x7b0>
 80018d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018ec:	601a      	str	r2, [r3, #0]
  return result;
 80018ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018f2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b8c      	ldr	r3, [pc, #560]	; (8001b30 <HAL_RCC_OscConfig+0x934>)
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	461a      	mov	r2, r3
 8001904:	2300      	movs	r3, #0
 8001906:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7fe ffcc 	bl	80008a4 <HAL_GetTick>
 800190c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	e009      	b.n	8001926 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001912:	f7fe ffc7 	bl	80008a4 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e36b      	b.n	8001ffe <HAL_RCC_OscConfig+0xe02>
 8001926:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800192a:	2202      	movs	r2, #2
 800192c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	fa93 f2a3 	rbit	r2, r3
 8001938:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001942:	2202      	movs	r2, #2
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800195a:	2202      	movs	r2, #2
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	fa93 f2a3 	rbit	r2, r3
 8001968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800196c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196e:	4b6f      	ldr	r3, [pc, #444]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001972:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001976:	2102      	movs	r1, #2
 8001978:	6019      	str	r1, [r3, #0]
 800197a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fa93 f1a3 	rbit	r1, r3
 8001984:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001988:	6019      	str	r1, [r3, #0]
  return result;
 800198a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	2101      	movs	r1, #1
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1b2      	bne.n	8001912 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8158 	beq.w	8001c6c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c2:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d112      	bne.n	80019f4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a56      	ldr	r2, [pc, #344]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d8:	61d3      	str	r3, [r2, #28]
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <HAL_RCC_OscConfig+0x938>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d11a      	bne.n	8001a36 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a00:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <HAL_RCC_OscConfig+0x938>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a4b      	ldr	r2, [pc, #300]	; (8001b34 <HAL_RCC_OscConfig+0x938>)
 8001a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0c:	f7fe ff4a 	bl	80008a4 <HAL_GetTick>
 8001a10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	e009      	b.n	8001a2a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a16:	f7fe ff45 	bl	80008a4 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e2e9      	b.n	8001ffe <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	4b42      	ldr	r3, [pc, #264]	; (8001b34 <HAL_RCC_OscConfig+0x938>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0ef      	beq.n	8001a16 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x852>
 8001a40:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4a39      	ldr	r2, [pc, #228]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6213      	str	r3, [r2, #32]
 8001a4c:	e02f      	b.n	8001aae <HAL_RCC_OscConfig+0x8b2>
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10c      	bne.n	8001a72 <HAL_RCC_OscConfig+0x876>
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4a33      	ldr	r2, [pc, #204]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	6213      	str	r3, [r2, #32]
 8001a64:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001a6a:	f023 0304 	bic.w	r3, r3, #4
 8001a6e:	6213      	str	r3, [r2, #32]
 8001a70:	e01d      	b.n	8001aae <HAL_RCC_OscConfig+0x8b2>
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d10c      	bne.n	8001a96 <HAL_RCC_OscConfig+0x89a>
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6213      	str	r3, [r2, #32]
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6213      	str	r3, [r2, #32]
 8001a94:	e00b      	b.n	8001aae <HAL_RCC_OscConfig+0x8b2>
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4a24      	ldr	r2, [pc, #144]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	6213      	str	r3, [r2, #32]
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001aa8:	f023 0304 	bic.w	r3, r3, #4
 8001aac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d06b      	beq.n	8001b90 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab8:	f7fe fef4 	bl	80008a4 <HAL_GetTick>
 8001abc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	e00b      	b.n	8001ada <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7fe feef 	bl	80008a4 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e291      	b.n	8001ffe <HAL_RCC_OscConfig+0xe02>
 8001ada:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ade:	2202      	movs	r2, #2
 8001ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	fa93 f2a3 	rbit	r2, r3
 8001aec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001af6:	2202      	movs	r2, #2
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b08:	601a      	str	r2, [r3, #0]
  return result;
 8001b0a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d109      	bne.n	8001b38 <HAL_RCC_OscConfig+0x93c>
 8001b24:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <HAL_RCC_OscConfig+0x930>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	e014      	b.n	8001b54 <HAL_RCC_OscConfig+0x958>
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	10908120 	.word	0x10908120
 8001b34:	40007000 	.word	0x40007000
 8001b38:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f2a3 	rbit	r2, r3
 8001b4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4bbb      	ldr	r3, [pc, #748]	; (8001e40 <HAL_RCC_OscConfig+0xc44>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b58:	2102      	movs	r1, #2
 8001b5a:	6011      	str	r1, [r2, #0]
 8001b5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	fa92 f1a2 	rbit	r1, r2
 8001b66:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b6a:	6011      	str	r1, [r2, #0]
  return result;
 8001b6c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	fab2 f282 	clz	r2, r2
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	f002 021f 	and.w	r2, r2, #31
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f202 	lsl.w	r2, r1, r2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d099      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x8c6>
 8001b8e:	e063      	b.n	8001c58 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b90:	f7fe fe88 	bl	80008a4 <HAL_GetTick>
 8001b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	e00b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7fe fe83 	bl	80008a4 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e225      	b.n	8001ffe <HAL_RCC_OscConfig+0xe02>
 8001bb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bce:	2202      	movs	r2, #2
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f2a3 	rbit	r2, r3
 8001bdc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001be0:	601a      	str	r2, [r3, #0]
  return result;
 8001be2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001be6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d102      	bne.n	8001c02 <HAL_RCC_OscConfig+0xa06>
 8001bfc:	4b90      	ldr	r3, [pc, #576]	; (8001e40 <HAL_RCC_OscConfig+0xc44>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	e00d      	b.n	8001c1e <HAL_RCC_OscConfig+0xa22>
 8001c02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c06:	2202      	movs	r2, #2
 8001c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	fa93 f2a3 	rbit	r2, r3
 8001c14:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <HAL_RCC_OscConfig+0xc44>)
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c22:	2102      	movs	r1, #2
 8001c24:	6011      	str	r1, [r2, #0]
 8001c26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	fa92 f1a2 	rbit	r1, r2
 8001c30:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c34:	6011      	str	r1, [r2, #0]
  return result;
 8001c36:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	fab2 f282 	clz	r2, r2
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f002 021f 	and.w	r2, r2, #31
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1a0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c58:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c60:	4b77      	ldr	r3, [pc, #476]	; (8001e40 <HAL_RCC_OscConfig+0xc44>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	4a76      	ldr	r2, [pc, #472]	; (8001e40 <HAL_RCC_OscConfig+0xc44>)
 8001c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 81c2 	beq.w	8001ffc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c78:	4b71      	ldr	r3, [pc, #452]	; (8001e40 <HAL_RCC_OscConfig+0xc44>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	f000 819c 	beq.w	8001fbe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	f040 8114 	bne.w	8001eba <HAL_RCC_OscConfig+0xcbe>
 8001c92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	fa93 f2a3 	rbit	r2, r3
 8001ca6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001caa:	601a      	str	r2, [r3, #0]
  return result;
 8001cac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cb0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7fe fdec 	bl	80008a4 <HAL_GetTick>
 8001ccc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd0:	e009      	b.n	8001ce6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7fe fde7 	bl	80008a4 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e18b      	b.n	8001ffe <HAL_RCC_OscConfig+0xe02>
 8001ce6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	fa93 f2a3 	rbit	r2, r3
 8001cfa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cfe:	601a      	str	r2, [r3, #0]
  return result;
 8001d00:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	095b      	lsrs	r3, r3, #5
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d102      	bne.n	8001d20 <HAL_RCC_OscConfig+0xb24>
 8001d1a:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <HAL_RCC_OscConfig+0xc44>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	e01b      	b.n	8001d58 <HAL_RCC_OscConfig+0xb5c>
 8001d20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <HAL_RCC_OscConfig+0xc44>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d60:	6011      	str	r1, [r2, #0]
 8001d62:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	fa92 f1a2 	rbit	r1, r2
 8001d6c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d70:	6011      	str	r1, [r2, #0]
  return result;
 8001d72:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	fab2 f282 	clz	r2, r2
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f042 0220 	orr.w	r2, r2, #32
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f002 021f 	and.w	r2, r2, #31
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d19e      	bne.n	8001cd2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_RCC_OscConfig+0xc44>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	430b      	orrs	r3, r1
 8001daa:	4925      	ldr	r1, [pc, #148]	; (8001e40 <HAL_RCC_OscConfig+0xc44>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
 8001db0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dc8:	601a      	str	r2, [r3, #0]
  return result;
 8001dca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dce:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	461a      	mov	r2, r3
 8001de2:	2301      	movs	r3, #1
 8001de4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7fe fd5d 	bl	80008a4 <HAL_GetTick>
 8001dea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dee:	e009      	b.n	8001e04 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df0:	f7fe fd58 	bl	80008a4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0fc      	b.n	8001ffe <HAL_RCC_OscConfig+0xe02>
 8001e04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fa93 f2a3 	rbit	r2, r3
 8001e18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e1c:	601a      	str	r2, [r3, #0]
  return result;
 8001e1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d105      	bne.n	8001e44 <HAL_RCC_OscConfig+0xc48>
 8001e38:	4b01      	ldr	r3, [pc, #4]	; (8001e40 <HAL_RCC_OscConfig+0xc44>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	e01e      	b.n	8001e7c <HAL_RCC_OscConfig+0xc80>
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	fa93 f2a3 	rbit	r2, r3
 8001e58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_RCC_OscConfig+0xe0c>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e84:	6011      	str	r1, [r2, #0]
 8001e86:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	fa92 f1a2 	rbit	r1, r2
 8001e90:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e94:	6011      	str	r1, [r2, #0]
  return result;
 8001e96:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	fab2 f282 	clz	r2, r2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f042 0220 	orr.w	r2, r2, #32
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	f002 021f 	and.w	r2, r2, #31
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d09b      	beq.n	8001df0 <HAL_RCC_OscConfig+0xbf4>
 8001eb8:	e0a0      	b.n	8001ffc <HAL_RCC_OscConfig+0xe00>
 8001eba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ebe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	fa93 f2a3 	rbit	r2, r3
 8001ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed2:	601a      	str	r2, [r3, #0]
  return result;
 8001ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ee4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	461a      	mov	r2, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7fe fcd8 	bl	80008a4 <HAL_GetTick>
 8001ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef8:	e009      	b.n	8001f0e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efa:	f7fe fcd3 	bl	80008a4 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e077      	b.n	8001ffe <HAL_RCC_OscConfig+0xe02>
 8001f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	fa93 f2a3 	rbit	r2, r3
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	601a      	str	r2, [r3, #0]
  return result;
 8001f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	095b      	lsrs	r3, r3, #5
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d102      	bne.n	8001f48 <HAL_RCC_OscConfig+0xd4c>
 8001f42:	4b31      	ldr	r3, [pc, #196]	; (8002008 <HAL_RCC_OscConfig+0xe0c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	e01b      	b.n	8001f80 <HAL_RCC_OscConfig+0xd84>
 8001f48:	f107 0320 	add.w	r3, r7, #32
 8001f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f107 0320 	add.w	r3, r7, #32
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	fa93 f2a3 	rbit	r2, r3
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	f107 0318 	add.w	r3, r7, #24
 8001f66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f107 0318 	add.w	r3, r7, #24
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	fa93 f2a3 	rbit	r2, r3
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_RCC_OscConfig+0xe0c>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f107 0210 	add.w	r2, r7, #16
 8001f84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f88:	6011      	str	r1, [r2, #0]
 8001f8a:	f107 0210 	add.w	r2, r7, #16
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	fa92 f1a2 	rbit	r1, r2
 8001f94:	f107 020c 	add.w	r2, r7, #12
 8001f98:	6011      	str	r1, [r2, #0]
  return result;
 8001f9a:	f107 020c 	add.w	r2, r7, #12
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	fab2 f282 	clz	r2, r2
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	f042 0220 	orr.w	r2, r2, #32
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f002 021f 	and.w	r2, r2, #31
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d19e      	bne.n	8001efa <HAL_RCC_OscConfig+0xcfe>
 8001fbc:	e01e      	b.n	8001ffc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e018      	b.n	8001ffe <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_RCC_OscConfig+0xe0c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fd4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d108      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000

0800200c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b09e      	sub	sp, #120	; 0x78
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e162      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b90      	ldr	r3, [pc, #576]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d910      	bls.n	8002054 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b8d      	ldr	r3, [pc, #564]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	498b      	ldr	r1, [pc, #556]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b89      	ldr	r3, [pc, #548]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e14a      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002060:	4b82      	ldr	r3, [pc, #520]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	497f      	ldr	r1, [pc, #508]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80dc 	beq.w	8002238 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d13c      	bne.n	8002102 <HAL_RCC_ClockConfig+0xf6>
 8002088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800208c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d102      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xa6>
 80020ac:	4b6f      	ldr	r3, [pc, #444]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	e00f      	b.n	80020d2 <HAL_RCC_ClockConfig+0xc6>
 80020b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	667b      	str	r3, [r7, #100]	; 0x64
 80020c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c4:	663b      	str	r3, [r7, #96]	; 0x60
 80020c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020ce:	4b67      	ldr	r3, [pc, #412]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80020d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020da:	fa92 f2a2 	rbit	r2, r2
 80020de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020e2:	fab2 f282 	clz	r2, r2
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f042 0220 	orr.w	r2, r2, #32
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d17b      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0f3      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d13c      	bne.n	8002184 <HAL_RCC_ClockConfig+0x178>
 800210a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800210e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d102      	bne.n	8002134 <HAL_RCC_ClockConfig+0x128>
 800212e:	4b4f      	ldr	r3, [pc, #316]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	e00f      	b.n	8002154 <HAL_RCC_ClockConfig+0x148>
 8002134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002138:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	647b      	str	r3, [r7, #68]	; 0x44
 8002142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002146:	643b      	str	r3, [r7, #64]	; 0x40
 8002148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002150:	4b46      	ldr	r3, [pc, #280]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002158:	63ba      	str	r2, [r7, #56]	; 0x38
 800215a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800215c:	fa92 f2a2 	rbit	r2, r2
 8002160:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002164:	fab2 f282 	clz	r2, r2
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	f042 0220 	orr.w	r2, r2, #32
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	f002 021f 	and.w	r2, r2, #31
 8002174:	2101      	movs	r1, #1
 8002176:	fa01 f202 	lsl.w	r2, r1, r2
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d13a      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0b2      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
 8002184:	2302      	movs	r3, #2
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d102      	bne.n	80021ac <HAL_RCC_ClockConfig+0x1a0>
 80021a6:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	e00d      	b.n	80021c8 <HAL_RCC_ClockConfig+0x1bc>
 80021ac:	2302      	movs	r3, #2
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
 80021b8:	2302      	movs	r3, #2
 80021ba:	623b      	str	r3, [r7, #32]
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	2202      	movs	r2, #2
 80021ca:	61ba      	str	r2, [r7, #24]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	fa92 f2a2 	rbit	r2, r2
 80021d2:	617a      	str	r2, [r7, #20]
  return result;
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	fab2 f282 	clz	r2, r2
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	f042 0220 	orr.w	r2, r2, #32
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	f002 021f 	and.w	r2, r2, #31
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e079      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	491a      	ldr	r1, [pc, #104]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002208:	f7fe fb4c 	bl	80008a4 <HAL_GetTick>
 800220c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	e00a      	b.n	8002226 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7fe fb48 	bl	80008a4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e061      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 020c 	and.w	r2, r3, #12
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	429a      	cmp	r2, r3
 8002236:	d1eb      	bne.n	8002210 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d214      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 0207 	bic.w	r2, r3, #7
 800224e:	4906      	ldr	r1, [pc, #24]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e040      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
 8002268:	40022000 	.word	0x40022000
 800226c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_ClockConfig+0x2e8>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	491a      	ldr	r1, [pc, #104]	; (80022f4 <HAL_RCC_ClockConfig+0x2e8>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <HAL_RCC_ClockConfig+0x2e8>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4912      	ldr	r1, [pc, #72]	; (80022f4 <HAL_RCC_ClockConfig+0x2e8>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022ae:	f000 f829 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022b2:	4601      	mov	r1, r0
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <HAL_RCC_ClockConfig+0x2e8>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022bc:	22f0      	movs	r2, #240	; 0xf0
 80022be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	fa92 f2a2 	rbit	r2, r2
 80022c6:	60fa      	str	r2, [r7, #12]
  return result;
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	fab2 f282 	clz	r2, r2
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	40d3      	lsrs	r3, r2
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x2ec>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	fa21 f303 	lsr.w	r3, r1, r3
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_RCC_ClockConfig+0x2f0>)
 80022dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_RCC_ClockConfig+0x2f4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fa9a 	bl	800081c <HAL_InitTick>
  
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3778      	adds	r7, #120	; 0x78
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08002978 	.word	0x08002978
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	b08b      	sub	sp, #44	; 0x2c
 8002308:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b04      	cmp	r3, #4
 800232c:	d002      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x30>
 800232e:	2b08      	cmp	r3, #8
 8002330:	d003      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x36>
 8002332:	e03c      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002336:	623b      	str	r3, [r7, #32]
      break;
 8002338:	e03c      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002340:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002344:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	fa92 f2a2 	rbit	r2, r2
 800234c:	607a      	str	r2, [r7, #4]
  return result;
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	fab2 f282 	clz	r2, r2
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	40d3      	lsrs	r3, r2
 8002358:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	220f      	movs	r2, #15
 8002368:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	fa92 f2a2 	rbit	r2, r2
 8002370:	60fa      	str	r2, [r7, #12]
  return result;
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	fab2 f282 	clz	r2, r2
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	40d3      	lsrs	r3, r2
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800238c:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	fbb2 f2f3 	udiv	r2, r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
 800239c:	e004      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	623b      	str	r3, [r7, #32]
      break;
 80023ac:	e002      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023b0:	623b      	str	r3, [r7, #32]
      break;
 80023b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b4:	6a3b      	ldr	r3, [r7, #32]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	372c      	adds	r7, #44	; 0x2c
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	007a1200 	.word	0x007a1200
 80023cc:	08002988 	.word	0x08002988
 80023d0:	08002998 	.word	0x08002998
 80023d4:	003d0900 	.word	0x003d0900

080023d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b092      	sub	sp, #72	; 0x48
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80d4 	beq.w	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fc:	4b4e      	ldr	r3, [pc, #312]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10e      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002408:	4b4b      	ldr	r3, [pc, #300]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	4a4a      	ldr	r2, [pc, #296]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002412:	61d3      	str	r3, [r2, #28]
 8002414:	4b48      	ldr	r3, [pc, #288]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002420:	2301      	movs	r3, #1
 8002422:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002426:	4b45      	ldr	r3, [pc, #276]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002432:	4b42      	ldr	r3, [pc, #264]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a41      	ldr	r2, [pc, #260]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243e:	f7fe fa31 	bl	80008a4 <HAL_GetTick>
 8002442:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	e008      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002446:	f7fe fa2d 	bl	80008a4 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b64      	cmp	r3, #100	; 0x64
 8002452:	d901      	bls.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e169      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	4b38      	ldr	r3, [pc, #224]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002464:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800246e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8084 	beq.w	800257e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002480:	429a      	cmp	r2, r3
 8002482:	d07c      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002484:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800248c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002492:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	461a      	mov	r2, r3
 80024ae:	2301      	movs	r3, #1
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	461a      	mov	r2, r3
 80024d2:	2300      	movs	r3, #0
 80024d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024d6:	4a18      	ldr	r2, [pc, #96]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d04b      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7fe f9dd 	bl	80008a4 <HAL_GetTick>
 80024ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7fe f9d9 	bl	80008a4 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e113      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002504:	2302      	movs	r3, #2
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
 8002510:	2302      	movs	r3, #2
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	61fb      	str	r3, [r7, #28]
  return result;
 800251c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d108      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002532:	4b01      	ldr	r3, [pc, #4]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	e00d      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002538:	40021000 	.word	0x40021000
 800253c:	40007000 	.word	0x40007000
 8002540:	10908100 	.word	0x10908100
 8002544:	2302      	movs	r3, #2
 8002546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	4b78      	ldr	r3, [pc, #480]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	2202      	movs	r2, #2
 8002556:	613a      	str	r2, [r7, #16]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	fa92 f2a2 	rbit	r2, r2
 800255e:	60fa      	str	r2, [r7, #12]
  return result;
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	fab2 f282 	clz	r2, r2
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f002 021f 	and.w	r2, r2, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0b7      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800257e:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	496a      	ldr	r1, [pc, #424]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002590:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002594:	2b01      	cmp	r3, #1
 8002596:	d105      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002598:	4b66      	ldr	r3, [pc, #408]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	4a65      	ldr	r2, [pc, #404]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800259e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025b0:	4b60      	ldr	r3, [pc, #384]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f023 0203 	bic.w	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	495d      	ldr	r1, [pc, #372]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d008      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025ce:	4b59      	ldr	r3, [pc, #356]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	4956      	ldr	r1, [pc, #344]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ec:	4b51      	ldr	r3, [pc, #324]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	494e      	ldr	r1, [pc, #312]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800260a:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f023 0210 	bic.w	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4947      	ldr	r1, [pc, #284]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002618:	4313      	orrs	r3, r2
 800261a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002628:	4b42      	ldr	r3, [pc, #264]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	493f      	ldr	r1, [pc, #252]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002646:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f023 0220 	bic.w	r2, r3, #32
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4938      	ldr	r1, [pc, #224]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002654:	4313      	orrs	r3, r2
 8002656:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002664:	4b33      	ldr	r3, [pc, #204]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	4930      	ldr	r1, [pc, #192]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002672:	4313      	orrs	r3, r2
 8002674:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002682:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	4929      	ldr	r1, [pc, #164]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002690:	4313      	orrs	r3, r2
 8002692:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026a0:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	4921      	ldr	r1, [pc, #132]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	491a      	ldr	r1, [pc, #104]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	4912      	ldr	r1, [pc, #72]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	490b      	ldr	r1, [pc, #44]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002708:	4313      	orrs	r3, r2
 800270a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002726:	4313      	orrs	r3, r2
 8002728:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3748      	adds	r7, #72	; 0x48
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e09d      	b.n	8002886 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	2b00      	cmp	r3, #0
 8002750:	d108      	bne.n	8002764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800275a:	d009      	beq.n	8002770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
 8002762:	e005      	b.n	8002770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fd fefe 	bl	800058c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027b0:	d902      	bls.n	80027b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	e002      	b.n	80027be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80027c6:	d007      	beq.n	80027d8 <HAL_SPI_Init+0xa0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027d0:	d002      	beq.n	80027d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	ea42 0103 	orr.w	r1, r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	0c1b      	lsrs	r3, r3, #16
 8002834:	f003 0204 	and.w	r2, r3, #4
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002854:	ea42 0103 	orr.w	r1, r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002874:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002896:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800289a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4013      	ands	r3, r2
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80028c4:	b084      	sub	sp, #16
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	f107 0014 	add.w	r0, r7, #20
 80028d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	b004      	add	sp, #16
 8002904:	4770      	bx	lr
	...

08002908 <__libc_init_array>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	4d0d      	ldr	r5, [pc, #52]	; (8002940 <__libc_init_array+0x38>)
 800290c:	4c0d      	ldr	r4, [pc, #52]	; (8002944 <__libc_init_array+0x3c>)
 800290e:	1b64      	subs	r4, r4, r5
 8002910:	10a4      	asrs	r4, r4, #2
 8002912:	2600      	movs	r6, #0
 8002914:	42a6      	cmp	r6, r4
 8002916:	d109      	bne.n	800292c <__libc_init_array+0x24>
 8002918:	4d0b      	ldr	r5, [pc, #44]	; (8002948 <__libc_init_array+0x40>)
 800291a:	4c0c      	ldr	r4, [pc, #48]	; (800294c <__libc_init_array+0x44>)
 800291c:	f000 f820 	bl	8002960 <_init>
 8002920:	1b64      	subs	r4, r4, r5
 8002922:	10a4      	asrs	r4, r4, #2
 8002924:	2600      	movs	r6, #0
 8002926:	42a6      	cmp	r6, r4
 8002928:	d105      	bne.n	8002936 <__libc_init_array+0x2e>
 800292a:	bd70      	pop	{r4, r5, r6, pc}
 800292c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002930:	4798      	blx	r3
 8002932:	3601      	adds	r6, #1
 8002934:	e7ee      	b.n	8002914 <__libc_init_array+0xc>
 8002936:	f855 3b04 	ldr.w	r3, [r5], #4
 800293a:	4798      	blx	r3
 800293c:	3601      	adds	r6, #1
 800293e:	e7f2      	b.n	8002926 <__libc_init_array+0x1e>
 8002940:	080029a8 	.word	0x080029a8
 8002944:	080029a8 	.word	0x080029a8
 8002948:	080029a8 	.word	0x080029a8
 800294c:	080029ac 	.word	0x080029ac

08002950 <memset>:
 8002950:	4402      	add	r2, r0
 8002952:	4603      	mov	r3, r0
 8002954:	4293      	cmp	r3, r2
 8002956:	d100      	bne.n	800295a <memset+0xa>
 8002958:	4770      	bx	lr
 800295a:	f803 1b01 	strb.w	r1, [r3], #1
 800295e:	e7f9      	b.n	8002954 <memset+0x4>

08002960 <_init>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	bf00      	nop
 8002964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002966:	bc08      	pop	{r3}
 8002968:	469e      	mov	lr, r3
 800296a:	4770      	bx	lr

0800296c <_fini>:
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296e:	bf00      	nop
 8002970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002972:	bc08      	pop	{r3}
 8002974:	469e      	mov	lr, r3
 8002976:	4770      	bx	lr
